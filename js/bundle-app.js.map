{"version":3,"sources":["wp:///js\\bundle-app.js","wp:///src\\index.js","wp:///~\\react-dom\\index.js","wp:///src\\examples\\ExampleBrowser.js","wp:///src\\examples\\Simple\\index.js","wp:///~\\react-three-renderer\\src\\index.js","wp:///~\\react-three-renderer\\src\\lib\\React3.js","wp:///~\\react\\lib\\ReactComponentWithPureRenderMixin.js","wp:///~\\react\\lib\\shallowCompare.js","wp:///src\\examples\\AnimationCloth\\index.js","wp:///~\\stats.js\\src\\Stats.js","wp:///src\\examples\\ExampleBase.js","wp:///src\\examples\\AnimationCloth\\Info.js","wp:///src\\examples\\AnimationCloth\\Cloth.js","wp:///src\\examples\\AnimationCloth\\StaticWorld.js","wp:///~\\babel-runtime\\core-js\\number\\parse-int.js","wp:///~\\core-js\\library\\fn\\number\\parse-int.js","wp:///~\\core-js\\library\\modules\\es6.number.parse-int.js","wp:///src\\examples\\AnimationCloth\\ClothGeometry.js","wp:///src\\examples\\AnimationCloth\\Poles.js","wp:///src\\examples\\AnimationCloth\\shaders\\depth.frag","wp:///src\\examples\\AnimationCloth\\shaders\\depth.vert","wp:///src\\examples\\AnimationCloth\\Sphere.js","wp:///src\\ref\\trackball.js","wp:///src\\examples\\Geometries\\index.js","wp:///src\\examples\\WebGLCameraExample\\index.js","wp:///src\\examples\\WebGLCameraExample\\Info.js","wp:///src\\examples\\WebGLCameraExample\\PointCloud.js","wp:///src\\examples\\GeometryShapes\\index.js","wp:///src\\examples\\GeometryShapes\\Resources.js","wp:///src\\examples\\GeometryShapes\\Rect.js","wp:///src\\examples\\GeometryShapes\\Shapes.js","wp:///src\\examples\\GeometryShapes\\Shape.js","wp:///src\\examples\\DraggableCubes\\index.js","wp:///src\\examples\\inputs\\MouseInput.js","wp:///~\\babel-runtime\\core-js\\object\\values.js","wp:///~\\core-js\\library\\fn\\object\\values.js","wp:///~\\core-js\\library\\modules\\es7.object.values.js","wp:///~\\core-js\\library\\modules\\$.object-to-array.js","wp:///src\\examples\\DraggableCubes\\AllCubes.js","wp:///src\\examples\\DraggableCubes\\DraggableCube.js","wp:///src\\examples\\Physics\\index.js","wp:///~\\cannon\\src\\Cannon.js","wp:///~\\cannon\\package.json","wp:///~\\cannon\\src\\collision\\AABB.js","wp:///~\\cannon\\src\\math\\Vec3.js","wp:///~\\cannon\\src\\math\\Mat3.js","wp:///~\\cannon\\src\\utils\\Utils.js","wp:///~\\cannon\\src\\collision\\ArrayCollisionMatrix.js","wp:///~\\cannon\\src\\objects\\Body.js","wp:///~\\cannon\\src\\utils\\EventTarget.js","wp:///~\\cannon\\src\\shapes\\Shape.js","wp:///~\\cannon\\src\\math\\Quaternion.js","wp:///~\\cannon\\src\\material\\Material.js","wp:///~\\cannon\\src\\shapes\\Box.js","wp:///~\\cannon\\src\\shapes\\ConvexPolyhedron.js","wp:///~\\cannon\\src\\math\\Transform.js","wp:///~\\cannon\\src\\collision\\Broadphase.js","wp:///~\\cannon\\src\\shapes\\Plane.js","wp:///~\\cannon\\src\\constraints\\Constraint.js","wp:///~\\cannon\\src\\equations\\ContactEquation.js","wp:///~\\cannon\\src\\equations\\Equation.js","wp:///~\\cannon\\src\\math\\JacobianElement.js","wp:///~\\cannon\\src\\world\\Narrowphase.js","wp:///~\\cannon\\src\\collision\\Ray.js","wp:///~\\cannon\\src\\collision\\RaycastResult.js","wp:///~\\cannon\\src\\solver\\Solver.js","wp:///~\\cannon\\src\\utils\\Vec3Pool.js","wp:///~\\cannon\\src\\utils\\Pool.js","wp:///~\\cannon\\src\\equations\\FrictionEquation.js","wp:///~\\cannon\\src\\constraints\\ConeTwistConstraint.js","wp:///~\\cannon\\src\\constraints\\PointToPointConstraint.js","wp:///~\\cannon\\src\\equations\\ConeEquation.js","wp:///~\\cannon\\src\\equations\\RotationalEquation.js","wp:///~\\cannon\\src\\material\\ContactMaterial.js","wp:///~\\cannon\\src\\shapes\\Cylinder.js","wp:///~\\cannon\\src\\constraints\\DistanceConstraint.js","wp:///~\\cannon\\src\\solver\\GSSolver.js","wp:///~\\cannon\\src\\collision\\GridBroadphase.js","wp:///~\\cannon\\src\\shapes\\Heightfield.js","wp:///~\\cannon\\src\\constraints\\HingeConstraint.js","wp:///~\\cannon\\src\\equations\\RotationalMotorEquation.js","wp:///~\\cannon\\src\\constraints\\LockConstraint.js","wp:///~\\cannon\\src\\collision\\NaiveBroadphase.js","wp:///~\\cannon\\src\\collision\\ObjectCollisionMatrix.js","wp:///~\\cannon\\src\\shapes\\Particle.js","wp:///~\\cannon\\src\\objects\\RaycastVehicle.js","wp:///~\\cannon\\src\\objects\\WheelInfo.js","wp:///~\\cannon\\src\\objects\\RigidVehicle.js","wp:///~\\cannon\\src\\shapes\\Sphere.js","wp:///~\\cannon\\src\\collision\\SAPBroadphase.js","wp:///~\\cannon\\src\\objects\\SPHSystem.js","wp:///~\\cannon\\src\\solver\\SplitSolver.js","wp:///~\\cannon\\src\\objects\\Spring.js","wp:///~\\cannon\\src\\shapes\\Trimesh.js","wp:///~\\cannon\\src\\utils\\Octree.js","wp:///~\\cannon\\src\\world\\World.js","wp:///~\\cannon\\src\\utils\\TupleDictionary.js","wp:///src\\examples\\Physics\\mousePick.js","wp:///src\\examples\\Physics\\mousePick\\PickableMesh.js","wp:///src\\examples\\Benchmark\\RotatingCubes.js","wp:///src\\examples\\Benchmark\\RotatingCube.js","wp:///src\\examples\\Benchmark\\RotatingCubesDirectUpdates.js","wp:///~\\react-addons-perf\\index.js","wp:///~\\react\\lib\\ReactDefaultPerf.js","wp:///~\\react\\lib\\ReactDefaultPerfAnalysis.js","wp:///~\\fbjs\\lib\\performanceNow.js","wp:///~\\fbjs\\lib\\performance.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_reactDom","_reactDom2","_ExampleBrowser","_ExampleBrowser2","_reactAddonsPerf","_reactAddonsPerf2","window","Perf","render","createElement","document","getElementById","Object","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_index","_index2","_index3","_index4","_index5","_index6","_index7","_index8","_index9","_index10","_index11","_index12","_index13","_index14","_mousePick","_mousePick2","_RotatingCubes","_RotatingCubes2","_RotatingCubesDirectUpdates","_RotatingCubesDirectUpdates2","examples","name","component","url","advanced","page","ExampleBrowser","_React$Component","props","context","this","_this","call","_onWindowResize","viewer","refs","setState","viewerWidth","offsetWidth","viewerHeight","offsetHeight","state","activeExample","key","addEventListener","removeEventListener","_this2","exampleContent","_state","sourceButton","_examples$state$activ","ExampleComponent","width","height","id","href","target","className","map","example","index","onClick","ref","Component","_reactThreeRenderer","_reactThreeRenderer2","_three","_three2","Simple","cameraPosition","Vector3","cubeRotation","Euler","_onAnimate","x","y","innerWidth","innerHeight","mainCamera","onAnimate","fov","aspect","near","far","position","rotation","depth","color","_React","_React2","_class","_temp","_extends2","_extends3","_React3Renderer","_React3Renderer2","_ReactComponentWithPureRenderMixin","_ReactComponentWithPureRenderMixin2","_propTypeInstanceOf","_propTypeInstanceOf2","PropTypes","React3","shouldComponentUpdate","_onRecreateCanvas","canvasKey","react3Renderer","_render","dispose","canvas","propsToClone","canvasStyle","onRecreateCanvas","children","style","propTypes","string","number","isRequired","any","gammaInput","bool","gammaOutput","sortObjects","func","clearColor","oneOfType","Color","shadowMapEnabled","shadowMapType","oneOf","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","shadowMapCullFace","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","shadowMapDebug","pixelRatio","antialias","defaultProps","findTHREEObject","eventDispatcher","shallowCompare","ReactComponentWithPureRenderMixin","nextProps","nextState","instance","shallowEqual","satisfyConstrains","p1","p2","distance","diff","subVectors","currentDist","length","correction","multiplyScalar","correctionHalf","add","sub","_stats","_stats2","_ExampleBase2","_ExampleBase3","_Info","_Info2","_Cloth","_Cloth2","_StaticWorld","_StaticWorld2","_Sphere","_Sphere2","_trackball","_trackball2","ballSize","GRAVITY","gravity","MASS","TIMESTEP","TIMESTEP_SQ","tmpForce","AnimationCloth","_ExampleBase","_toggleRotate","rotate","_toggleWind","wind","_toggleSphere","sphere","_togglePins","pins","pinsFormation","Math","random","controls","update","minTimePerFrame","time","undefined","round","Date","now","windStrength","cos","windForce","set","sin","normalize","_simulate","clothGeometry","_clothGeometry","timer","p","cloth","particles","il","i","vertices","copy","computeFaceNormals","computeVertexNormals","normalsNeedUpdate","verticesNeedUpdate","newState","spherePosition","ballPosition","stats","_clothRef","xSegs","ySegs","push","w","fog","Fog","scenePosition","findDOMNode","react3","rotateSpeed","zoomSpeed","panSpeed","noZoom","noPan","staticMoving","dynamicDampingFactor","domElement","top","container","appendChild","lastTime","particle","constrains","constrain","face","faces","normal","dot","a","addForce","b","c","integrate","clone","z","visible","pos","xy","original","previous","_this3","_props","toggleRotate","toggleWind","toggleSphere","togglePins","rotating","winding","balling","onFrameChange","event","devicePixelRatio","lookAt","clothRef","Stats","startTime","prevTime","ms","msMin","Infinity","msMax","fps","fpsMin","fpsMax","frames","mode","preventDefault","setMode","cssText","fpsDiv","fpsText","innerHTML","fpsGraph","bar","msDiv","msText","msGraph","display","updateGraph","dom","child","firstChild","REVISION","begin","end","min","max","textContent","ExampleBase","apply","arguments","Info","linkStyle","textDecoration","cursor","textAlign","padding","zIndex","onChange","type","plane","u","v","DAMPING","DRAG","restDistance","clothFunction","Particle","mass","invMass","tmp","tmp2","force","timesQ","newPos","Cloth","indexU","indexV","h","_parseInt","_parseInt2","_ClothGeometry","_ClothGeometry2","_Poles","_Poles2","_depth","_depth2","_depth3","_depth4","StaticWorld","directionalLightPosition","groundPosition","groundRotation","PI","groundRepeat","Vector2","ambientLightColor","directionalLightColor","fragmentShaderDepth","vertexShaderDepth","shadowCameraSize","frag","vert","wrapS","RepeatWrapping","wrapT","anisotropy","resourceId","intensity","castShadow","shadowMapWidth","shadowMapHeight","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraFar","receiveShadow","alphaTest","specular","emissive","shininess","side","DoubleSide","slot","fragmentShader","vertexShader","repeat","instanceOf","parseInt","$export","S","_temp2","ClothGeometry","_Object$getPrototypeO","_ret","_len","args","Array","_key","concat","geometry","parametricFunction","slices","stacks","dynamic","Poles","poleMaterialColor","Number","toString","poleMaterialSpecular","poleMaterialShininess","sidePolePositions","boxPositions","topPolePosition","subResource","radius","Sphere","widthSegments","heightSegments","TrackballControls","_THREE$EventDispatche","object","keydown","enabled","_prevState","STATE","NONE","keyCode","keys","ROTATE","noRotate","ZOOM","PAN","keyup","mousemove","stopPropagation","_panEnd","getMouseOnScreen","pageX","pageY","_zoomEnd","_movePrev","_moveCurr","getMouseOnCircle","mouseup","dispatchEvent","endEvent","mousedown","button","_panStart","_zoomStart","startEvent","mousewheel","delta","wheelDelta","detail","touchstart","touches","TOUCH_ROTATE","TOUCH_ZOOM_PAN","dx","dy","_touchZoomDistanceEnd","_touchZoomDistanceStart","sqrt","touchmove","touchend","contextmenu","screen","left","minDistance","maxDistance","EPS","lastPosition","_eye","_lastAxis","_lastAngle","target0","position0","up0","up","changeEvent","handleResize","box","getBoundingClientRect","d","ownerDocument","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","handleEvent","vector","rotateCamera","axis","quaternion","Quaternion","eyeDirection","objectUpDirection","objectSidewaysDirection","moveDirection","angle","crossVectors","setLength","setFromAxisAngle","applyQuaternion","zoomCamera","factor","panCamera","mouseChange","objectUp","pan","lengthSq","cross","checkDistances","addVectors","distanceToSquared","reset","EventDispatcher","Geometries","_onAnimateInternal","objectPositions","lathePoints","arrowDir","arrowOrigin","objectRotation","depthSegments","segments","thetaStart","thetaLength","innerRadius","outerRadius","thetaSegments","phiSegments","radiusTop","radiusBottom","radialSegments","points","tube","tubularSegments","size","dir","origin","_initialiseProps","_PointCloud","_PointCloud2","perspectiveCameraName","orthographicCameraName","mainCameraName","perspectiveCameraRotation","orthographicCameraRotation","WebGLCameraExample","r","meshPosition","childPosition","activeCameraName","paused","mainCameraPosition","_onKeyDown","aspectRatio","pause","frame","cameraName","right","bottom","wireframe","_this4","PointCloud","pointCloudVertices","vertex","randFloatSpread","_Resources","_Resources2","_Shapes","_Shapes2","GeometryShapes","_onDocumentMouseDown","_onDocumentMouseMove","_onDocumentMouseUp","_onDocumentMouseOut","windowHalfX","mouseXOnMouseDown","clientX","targetRotationOnMouseDown","targetRotation","mouseX","_onDocumentTouchStart","_onDocumentTouchMove","groupPosition","groupRotation","groupRotationY","abs","_Rect","_Rect2","Resources","textureRepeat","sqLength","rectLength","rectWidth","californiaPts","cp1X","cp1Y","cp2X","cp2Y","aX","aY","rectX","rectY","roundedRectWidth","roundedRectHeight","cpX","cpY","startAngle","endAngle","clockwise","circleRadius","xRadius","yRadius","splinePoints","Rect","_ReactPropTypes","_ReactPropTypes2","_Shape","_Shape2","Shapes","rx","ry","rz","s","extrudeSettings","amount","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","Shape","scale","settings","divisions","linewidth","_MouseInput","_MouseInput2","_AllCubes","_AllCubes2","DraggableCubes","_onCubesMounted","cubes","_onHoverStart","hovering","_onHoverEnd","_onDragStart","dragging","_onDragEnd","_onTrackballChange","camera","cameraRotation","mouseInput","_cursor","lightPosition","_refs","newProps","containerResized","_refs2","isReady","_refs3","scene","ready","restrictIntersections","setActive","_props2","descriptor","shadowCameraNear","shadowCameraFov","shadowBias","onCubesMounted","onHoverStart","onHoverEnd","onDragStart","onDragEnd","_keys","_keys2","_values","_values2","_get2","_get3","_ReactUpdates","_ReactUpdates2","_SyntheticMouseEvent","_SyntheticMouseEvent2","_Module2","_Module3","tempVector2","listenerCallbackNames","mouseEvents","boolProps","ignorePointerEvents","MouseInput","_Module","_onMouseDown","callbackName","mouseEvent","batchedUpdates","_this$_intersectAndDi","_intersectAndDispatch","intersections","isDefaultPrevented","isPropagationStopped","_intersectionsForClick","_onMouseUp","_this$_intersectAndDi2","intersectionUUIDMap","reduce","intersection","uuid","_createSyntheticMouseEvent","_isReady","_active","_restrictIntersections","_objectsToIntersect","_restrictedIntersectionRecursive","_patchedDescriptors","react3RendererInstance","prototype","_react3RendererInstance","Object3DDescriptor","threeElementDescriptors","object3D","constructor","forEach","elementDescriptor","eventName","hasEvent","propName","hasProp","threeObject","userData","active","objects","recursive","_scene","_container","_camera","_raycaster","Raycaster","_mouse","_onMouseMove","clientY","_updateEnterLeave","_containerRect","_hoverObjectMap","_caughtListenersCleanupFunctions","boundListener","listenerCallbackName","bind","eventType","getPooled","MouseEvent","_getIntersections","mouseCoords","relativeMouseCoords","_getRelativeMouseCoords","setFromCamera","intersectObjects","intersectObject","originalRay","ray","resultRay","hoverMapToUpdate","mouseEnterEvent","mouseLeaveEvent","unseenUUIDs","screenMouseCoords","containerRect","divide","cleanupFunction","allProps","removeProp","values","$values","it","$","toIObject","isEnum","isEntries","O","getKeys","result","_DraggableCube","_DraggableCube2","AllCubes","_onCubeCreate","cube","_onCubeMouseEnter","_hoveredCubes","_onCubeMouseLeave","_onCubeDragStart","_draggingCubes","_onCubeDragEnd","cubePositions","mouse","offset","selected","cubePosition","initialPosition","onCreate","onMouseEnter","onMouseLeave","PerspectiveCamera","dragPlane","Plane","backVector","DraggableCube","_onMouseEnter","hovered","_this$props","setFromNormalAndCoplanarPoint","point","_offset","pressed","getCameraRay","intersectLine","Line3","direction","_onMouseLeave","_ref","mesh","hsl","getHSL","l","hoverColor","setHSL","pressedColor","hoverHighlight","onMouseDown","_Cannon","_Cannon2","Physics","world","World","broadphase","NaiveBroadphase","solver","iterations","shape","Box","Vec3","body","Body","addShape","angularVelocity","angularDamping","addBody","timeStep","updatePhysics","step","meshQuaternion","version","AABB","ArrayCollisionMatrix","Broadphase","Constraint","ContactEquation","Narrowphase","ConeTwistConstraint","ContactMaterial","ConvexPolyhedron","Cylinder","DistanceConstraint","Equation","EventTarget","FrictionEquation","GSSolver","GridBroadphase","Heightfield","HingeConstraint","LockConstraint","Mat3","Material","ObjectCollisionMatrix","Pool","PointToPointConstraint","Ray","RaycastVehicle","RaycastResult","RigidVehicle","RotationalEquation","RotationalMotorEquation","SAPBroadphase","SPHSystem","Solver","SplitSolver","Spring","Trimesh","Vec3Pool","_args","_from","_id","_inCache","_installable","_location","_npmUser","email","_npmVersion","_phantomChildren","_requested","raw","rawSpec","scope","spec","_requiredBy","_resolved","_shasum","_shrinkwrap","_spec","_where","author","bugs","dependencies","description","devDependencies","browserify","grunt","grunt-browserify","grunt-contrib-concat","grunt-contrib-jshint","grunt-contrib-nodeunit","grunt-contrib-uglify","grunt-contrib-yuidoc","jshint","nodeunit","uglify-js","directories","dist","shasum","tarball","engines","node","homepage","keywords","licenses","main","maintainers","optionalDependencies","readme","repository","options","lowerBound","upperBound","setFromPoints","skinSize","q","vmult","vadd","aabb","extend","overlaps","l1","u1","l2","u2","contains","getCorners","e","f","g","transformIntoFrame_corners","toLocalFrame","corners","corner","pointToLocal","toWorldFrame","pointToWorld","ZERO","UNIT_X","UNIT_Y","UNIT_Z","vx","vy","vz","setZero","vsub","crossmat","n","invN","unit","ninv","norm","norm2","lengthSquared","distanceTo","px","py","pz","distanceSquared","mult","scalar","isZero","negate","Vec3_tangents_n","Vec3_tangents_randVec","tangents","t1","t2","inorm","randVec","toArray","source","lerp","t","almostEquals","precision","almostZero","antip_neg","isAntiparallelTo","elements","identity","setTrace","vec3","getTrace","smult","mmult","m","j","sum","k","solve","nr","nc","eqns","np","kp","multiplier","isNaN","row","column","sep","reverse","setRotationFromQuaternion","x2","y2","z2","xx","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","Utils","defaults","matrix","get","temp","setNumObjects","idCounter","preStep","postStep","vlambda","collisionFilterGroup","collisionFilterMask","collisionResponse","previousPosition","initPosition","velocity","initVelocity","material","linearDamping","STATIC","DYNAMIC","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","_wakeUpAfterNarrowphase","torque","initQuaternion","initAngularVelocity","interpolatedPosition","interpolatedQuaternion","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","aabbNeedsUpdate","wlambda","updateMassProperties","KINEMATIC","AWAKE","SLEEPY","SLEEPING","wakeUp","sleep","sleepyEvent","sleepEvent","sleepTick","speedSquared","speedLimitSquared","pow","updateSolveMassProperties","pointToLocalFrame","worldPoint","conjugate","vectorToLocalFrame","worldVector","pointToWorldFrame","localPoint","vectorToWorldFrame","localVector","tmpVec","tmpQuat","_orientation","orientation","updateBoundingRadius","N","updateBoundingSphereRadius","boundingSphereRadius","boundingRadius","computeAABB_shapeAABB","computeAABB","bodyQuat","shapeAABB","calculateWorldAABB","uiw_m1","uiw_m2","updateInertiaWorld","I","m1","m2","Body_applyForce_r","Body_applyForce_rotForce","applyForce","rotForce","Body_applyLocalForce_worldForce","Body_applyLocalForce_worldPoint","applyLocalForce","localForce","worldForce","Body_applyImpulse_r","Body_applyImpulse_velo","Body_applyImpulse_rotVelo","applyImpulse","impulse","velo","rotVelo","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_worldPoint","applyLocalImpulse","localImpulse","worldImpulse","Body_updateMassProperties_halfExtents","halfExtents","fixed","calculateInertia","getVelocityAtWorldPoint","listener","_listeners","listeners","indexOf","hasEventListener","splice","listenerArray","volume","calculateLocalInertia","types","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","toAxisAngle","targetAxis","acos","sfv_t1","sfv_t2","setFromVectors","Quaternion_mult_va","Quaternion_mult_vb","Quaternion_mult_vaxvb","va","vb","vaxvb","inverse","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c2","c3","s1","s2","s3","friction","restitution","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","indices","getSideNormals","sixTargetVectors","quat","sides","ex","worldCornerTempPos","forEachWorldCorner","callback","worldCornersTemp","wc","uniqueAxes","worldVertices","worldVerticesNeedsUpdate","faceNormals","computeNormals","worldFaceNormalsNeedsUpdate","worldFaceNormals","uniqueEdges","slice","computeEdges","Transform","computeEdges_tmpEdge","edges","edge","numVertices","found","getFaceNormal","console","error","warn","cb","ab","computeNormal","vc","cah_WorldNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","MAX_VALUE","worldVertsB1","polyB","e0","worldb","clipFaceAgainstHull","fsa_faceANormalWS3","fsa_Worldnormal1","fsa_deltaC","fsa_worldEdge0","fsa_worldEdge1","fsa_Cross","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","curPlaneTests","testSepAxis","numFacesA","fi","numFacesB","e1","maxminA","maxminB","project","maxA","minA","maxB","minB","d0","d1","cli_aabbmin","cli_aabbmax","computeLocalAABB","getPlaneConstantOfFace","face_i","cfah_faceANormalWS","cfah_edge0","cfah_WorldEdge0","cfah_worldPlaneAnormal1","cfah_planeNormalWS1","cfah_worldA1","cfah_localPlaneNormal","cfah_planeNormalWS","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","worldVertsB2","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","planeEqWS","otherFace","localPlaneEq","clipFaceAgainstPlane","shift","log","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","computeWorldVertices","verts","worldVerts","aabbmin","aabbmax","computeWorldFaceNormals","normals","worldNormals","max2","tempWorldVertex","minx","miny","minz","maxx","maxy","maxz","getAveragePointLocal","transformAllPoints","ConvexPolyhedron_pointIsInside","ConvexPolyhedron_vToP","ConvexPolyhedron_vToPointInside","pointIsInside","positiveResult","pointInside","vToP","r1","vToPointInside","r2","project_localAxis","project_localOrigin","hull","localAxis","localOrigin","vs","val","useBoundingBoxes","dirty","collisionPairs","Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC","needBroadphaseCollision","bodyA","bodyB","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","makePairsUnique","id1","id2","pop","pairIndex","setWorld","bsc_dist","boundingSphereCheck","aabbQuery","worldNormal","worldNormalNeedsUpdate","computeWorldNormal","tempNormal","maxVal","collideConnected","wakeUpBodies","equations","enable","eqs","disable","maxForce","ri","rj","ni","ContactEquation_computeB_temp1","ContactEquation_computeB_temp2","ContactEquation_computeB_temp3","computeB","bi","bj","rixn","rjxn","wi","vj","wj","penetrationVec","GA","jacobianElementA","GB","jacobianElementB","spatial","rotational","ePlusOne","GW","GiMf","computeGiMf","B","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","ContactEquation_getImpactVelocityAlongNormal_relVel","getImpactVelocityAlongNormal","xi","xj","relVel","minForce","eps","JacobianElement","setSpookParams","stiffness","relaxation","computeGW","Gq","computeGq","zero","multiplyVectors","computeGWlambda","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","ti","fj","tj","invMassi","invMassj","computeGiMGt","invIi","invIj","addToWlambda_temp","addToWlambda","deltalambda","computeC","multiplyElement","element","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","enableFrictionReduction","pointInPolygon","pointInPolygon_edge","edge_x_normal","pointInPolygon_edge_x_normal","vertex_to_p","pointInPolygon_vtp","createContactEquation","si","sj","rsi","rsj","cm","contactEquationStiffness","contactEquationRelaxation","dt","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","reducedMass","pool","frictionEquationStiffness","frictionEquationRelaxation","averageNormal","averageContactPointA","averageContactPointB","createFrictionFromAverage","numContacts","f1","f2","invNumContacts","tmpVec1","tmpVec2","tmpQuat1","tmpQuat2","getContacts","oldcontacts","frictionPool","qi","qj","bodyContactMaterial","getContactMaterial","shapeContactMaterial","defaultContactMaterial","resolver","boxBox","convexConvex","boxConvex","boxParticle","convexParticle","sphereSphere","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","planeTrimesh","planeShape","trimeshShape","planePos","trimeshPos","planeQuat","trimeshQuat","planeBody","trimeshBody","getVertex","v2","relpos","projected","sphereTrimesh_normal","sphereTrimesh_relpos","sphereTrimesh_v","sphereTrimesh_v2","sphereTrimesh_edgeVertexA","sphereTrimesh_edgeVertexB","sphereTrimesh_edgeVector","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_localSphereAABB","sphereTrimesh_triangles","sphereTrimesh","sphereShape","spherePos","sphereQuat","sphereBody","edgeVertexA","edgeVertexB","edgeVector","edgeVectorUnit","localSpherePos","localSphereAABB","triangles","sphereRadius","getTrianglesInAABB","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","getTriangleVertices","getNormal","pointInTriangle","point_on_plane_to_sphere","plane_to_sphere_ortho","spherePlane","box_to_sphere","sphereBox_ns","sphereBox_ns1","sphereBox_ns2","sphereBox_sides","sphereBox_sphere_to_corner","sphereBox_side_ns","sphereBox_side_ns1","sphereBox_side_ns2","sphereBox","R","side_ns","side_ns1","side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","idx","nsides","ns","ns1","ns2","h1","h2","dot1","dot2","sphere_to_corner","release","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","convex_to_sphere","sphereConvex_edge","sphereConvex_edgeUnit","sphereConvex_sphereToCorner","sphereConvex_worldCorner","sphereConvex_worldNormal","sphereConvex_worldPoint","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","sphereConvex_sphereToWorldPoint","sphereConvex","worldCorner","nfaces","worldSpherePointClosestToPlane","penetration","worldPointToSphere","faceVerts","Nverts","worldVertex","penetrationVec2","penetrationSpherePoint","Nfaceverts","v1","edgeUnit","v1_to_xi","xi_to_p","planeBox","planeConvex","planeConvex_v","planeConvex_normal","planeConvex_relpos","planeConvex_projected","convexShape","planePosition","convexPosition","convexQuat","convexBody","convexConvex_sepAxis","convexConvex_q","sepAxis","particlePlane_normal","particlePlane_relpos","particlePlane_projected","planeParticle","particleSphere_normal","sphereParticle","cqj","convexParticle_local","convexParticle_penetratedFaceNormal","convexParticle_vertexToParticle","convexParticle_worldPenetrationVec","penetratedFaceIndex","penetratedFaceNormal","worldPenetrationVec","minPenetration","numDetectedFaces","local","boxHeightfield","convexHeightfield","convexHeightfield_tmp1","convexHeightfield_tmp2","convexHeightfield_faceList","hfShape","convexPos","hfPos","hfQuat","hfBody","data","elementSize","worldPillarOffset","faceList","localConvexPos","iMinX","floor","iMaxX","ceil","iMinY","iMaxY","minMax","getRectMinMax","getConvexTrianglePillar","pillarOffset","pillarConvex","sphereHeightfield_tmp1","sphereHeightfield_tmp2","sphereHeightfield","numContactsBefore","from","to","_direction","checkCollisionResponse","skipBackfaces","ANY","hasHit","v0","dot00","dot01","dot02","dot11","dot12","distanceFromIntersection","intersect","CLOSEST","ALL","tmpAABB","tmpArray","intersectWorld","_updateDirection","getAABB","intersectBodies","intersectBody_xi","intersectBody_qi","intersectBody","intersectShape","_shouldStop","bodies","intersectMethod","intersectPoint","intersectBox","intersectConvex","intersectPlane","len","planeToFrom","planeToTo","n_dot_dir","planePointToFrom","dir_scaled_with_t","hitPointWorld","reportIntersection","intersectConvexOptions","intersectHeightfield","localRay","inside","getIndexOfPosition","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","intersectSphere","intersectionPoint","d2","intersectConvex_normal","intersectConvex_vector","fromToDistance","Nfaces","faceNormal","intersectTrimesh_normal","intersectTrimesh_localDirection","intersectTrimesh_localFrom","intersectTrimesh_localTo","intersectTrimesh_worldNormal","intersectTrimesh_worldIntersectPoint","intersectTrimesh_triangles","intersectTrimesh_treeTransform","intersectTrimesh","treeTransform","localDirection","localFrom","localTo","worldIntersectPoint","fromToDistanceSquared","tree","rayQuery","trianglesIndex","squaredDistance","hitFaceIndex","rayFromWorld","rayToWorld","hitNormalWorld","abort","addEquation","eq","removeEquation","removeAllEquations","constructObject","Nargs","slipForce","FrictionEquation_computeB_temp1","FrictionEquation_computeB_temp2","rixt","rjxt","pivotA","pivotB","axisA","axisB","coneEquation","ConeEquation","twistEquation","twistAngle","cone","twist","maxAngle","equationX","equationY","equationZ","nj","nixnj","njxni","materials","numSegments","axes","bottomface","topface","theta","thetaN","distanceEquation","halfDist","tolerance","GSSolver_solve_lambda","GSSolver_solve_invCs","GSSolver_solve_Bs","invC","deltalambdaTot","GWlambda","lambdaj","iter","maxIter","tolSquared","Neq","Nbodies","invCs","Bs","lambda","aabbMin","aabbMax","nx","ny","nz","nbins","bins","binLengths","GridBroadphase_collisionPairs_d","addBoxToBins","x0","y0","z0","x1","y1","z1","xoff0","xmin","xmult","yoff0","ymin","ymult","zoff0","zmin","zmult","xoff1","yoff1","zoff1","xstep","ystep","zstep","xoff","yoff","zoff","numObjects","xmax","ymax","zmax","binsizeX","binsizeY","binsizeZ","binRadius","Nbins","xreset","yreset","zreset","yi","zi","binLength","bin","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","clearCachedConvexTrianglePillar","clamp","getHeightAt","edgeClamp","minmax","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","rotationalEquation1","rotationalEquation2","motor","motorEquation","enableMotor","disableMotor","setMotorSpeed","speed","targetVelocity","setMotorMaxForce","HingeConstraint_update_tmpVec1","HingeConstraint_update_tmpVec2","worldAxisA","worldAxisB","halfWay","r3","rotationalEquation3","chassisBody","wheelInfos","sliding","indexRightAxis","indexForwardAxis","indexUpAxis","calcRollingFriction","body0","body1","frictionPosWorld","frictionDirectionWorld","maxImpulse","j1","contactPosWorld","vel1","calcRollingFriction_vel1","vel2","calcRollingFriction_vel2","vel","calcRollingFriction_vel","vrel","denom0","computeImpulseDenominator","denom1","jacDiagABInv","r0","computeImpulseDenominator_r0","c0","computeImpulseDenominator_c0","vec","computeImpulseDenominator_vec","computeImpulseDenominator_m","resolveSingleBilateral","pos1","body2","pos2","normalLenSqr","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","rel_vel","contactDamping","massTerm","WheelInfo","tmpVec4","tmpVec5","tmpVec6","addWheel","info","setSteeringValue","wheelIndex","wheel","steering","applyEngineForce","engineForce","setBrake","brake","addToWorld","constraints","that","preStepCallback","updateVehicle","getVehicleAxisWorld","axisIndex","numWheels","updateWheelTransform","currentVehicleSpeedKmHour","forwardWorld","castRay","updateSuspension","suspensionForce","maxSuspensionForce","raycastResult","updateFriction","hitNormalWorldScaledWithProj","fwd","chassisConnectionPointWorld","isInContact","proj","proj2","deltaRotation","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","deltaTime","chassisMass","w_it","susp_length","suspensionRestLength","current_length","suspensionLength","length_diff","suspensionStiffness","clippedInvContactDotSuspension","susp_damping","projected_rel_vel","suspensionRelativeVelocity","dampingCompression","dampingRelaxation","removeFromWorld","remove","castRay_rayvector","castRay_target","rayvector","updateWheelTransformWorld","raylen","directionWorld","oldState","rayTest","groundObject","hitDistance","minSuspensionLength","maxSuspensionTravel","maxSuspensionLength","denominator","chassis_velocity_at_contactPoint","projVel","inv","chassisConnectionPointLocal","directionLocal","axleLocal","axleWorld","steeringOrn","rotatingOrn","worldTransform","directions","getWheelTransformWorld","updateFriction_surfNormalWS_scaled_proj","updateFriction_axle","updateFriction_forwardWS","sideFrictionStiffness2","surfNormalWS_scaled_proj","forwardWS","axle","numWheelsOnGround","sideImpulse","forwardImpulse","axlei","wheelTrans","surfNormalWS","sideFactor","fwdFactor","rollingFriction","slipInfo","defaultRollingFrictionImpulse","skidInfo","maximp","frictionSlip","maximpSide","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","rollInfluence","suspensionMaxLength","isFrontWheel","updateWheel","chassis","wheelBodies","coordinateSystem","chassisShape","wheelAxes","wheelForces","wheelBody","worldPosition","hingeConstraint","motorTargetVelocity","setWheelForce","applyWheelForce","bodyTorque","addConstraint","_update","removeConstraint","worldAxis","getWheelSpeed","ax","axisList","_addBodyHandler","_removeBodyHandler","insertionSortX","insertionSortY","insertionSortZ","sortList","checkBounds","biPos","bjPos","boundA2","boundB1","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","density","smoothingRadius","speedOfSound","viscosity","pressures","densities","neighbors","SPHSystem_getNeighbors_dist","getNeighbors","R2","SPHSystem_update_dist","SPHSystem_update_a_pressure","SPHSystem_update_a_visc","SPHSystem_update_gradW","SPHSystem_update_r_vec","SPHSystem_update_u","cs","numNeighbors","weight","a_pressure","a_visc","gradW","r_vec","Pij","nabla","neighbor","gradw","nablaw","rVec","resultVec","subsolver","nodes","nodePool","createNode","getUnvisitedNode","Nnodes","visited","bfs","root","visitFunc","bds","queue","Neqs","sortById","SplitSolver_solve_nodes","SplitSolver_solve_eqs","SplitSolver_solve_dummyWorld","dummyWorld","sort","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","applyForce_ri_x_f","applyForce_rj_x_f","applyForce_tmp","r_unit","ri_x_f","rj_x_f","rlen","Float32Array","Int16Array","Octree","updateEdges","updateNormals","updateAABB","updateTree","computeNormals_n","triangleAABB","i3","_getUnscaledVertex","insert","removeEmptyNodes","unscaledAABB","isx","isy","isz","setScale","wasUniform","isUniform","indexA","indexB","split","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector_va","getEdgeVector_vb","getEdgeVector","vectorStore","out","getWorldVertex","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","arc","OctreeNode","maxDepth","elementData","level","nodeData","subdivided","subdivide","halfDiagonal","contacts","frictionEquations","quatNormalizeSkip","quatNormalizeFast","stepnumber","default_dt","nextId","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","TupleDictionary","defaultMaterial","doProfiling","profile","makeContactConstraints","subsystems","addBodyEvent","removeBodyEvent","tmpRay","collisionMatrixTick","raycastClosest","raycastAll","raycastAny","removeBody","addMaterial","addContactMaterial","cmat","performance","nowOffset","timing","navigationStart","step_tmp1","timeSinceLastCalled","maxSubSteps","internalStep","internalSteps","t0","h_div_dt","interpvelo","World_step_postStepEvent","World_step_preStepEvent","World_step_collideEvent","contact","World_step_oldContacts","World_step_frictionEquationPool","World_step_p1","World_step_p2","World_step_step_w","World_step_step_wq","invI_tau_dt","profilingStart","gx","gy","gz","Nsubsystems","Nconstraints","NoldContacts","NoldFrictionEquations","ncontacts","mu","speedSquaredB","speedLimitSquaredB","speedSquaredA","speedLimitSquaredA","ld","av","ad","wq","DYNAMIC_OR_KINEMATIC","quatNormalize","half_dt","tau","angularVelo","clearForces","_PickableMesh","_PickableMesh2","PhysicsMousePick","_onMeshMouseDown","bodyIndex","_setClickMarker","_addMouseConstraint","clickMarkerVisible","mouseConstraint","jointBody","groundQuaternion","cameraQuaternion","meshRefs","constrainedBody","pivot","initCannon","boxShape","_loop","boxBody","_bodyIndex","meshes","groundShape","groundBody","_getMeshStates","meshStates","_ref2","antiRot","clickMarkerPosition","cubeMeshes","_ref3","shadowDarkness","PickableMesh","arrayOf","Mesh","_RotatingCube","_RotatingCube2","RotatingCubes","_updatePhysics","_updateGraphics","_onBodiesSelectChange","numBodies","_createBodies","getTime","sinTime","timeScale","multiply","rotationDeltaPerFrame","movementPerFrame","startPosition","_createBody","title","background","_getInputBox","meshScale","RotatingCube","_RotatingCubes3","RotatingCubesDirectUpdates","_bodyRef","roundFloat","addValue","DOMProperty","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","ReactDefaultPerf","_allMeasurements","_mountStack","_injected","start","injection","injectMeasure","measure","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","table","item","Component class name","componentName","Total inclusive time (ms)","inclusive","Exclusive mount time (ms)","exclusive","Exclusive render time (ms)","Mount time per instance (ms)","count","Render time per instance (ms)","Instances","printInclusive","getInclusiveSummary","Owner > component","Inclusive time (ms)","getTotalTime","toFixed","getMeasurementsSummaryMap","Wasted time (ms)","printWasted","printDOM","getDOMSummary","ID_ATTRIBUTE_NAME","JSON","stringify","_recordWrite","fnName","totalTime","writes","moduleName","rv","counts","displayNames","created","mountID","getID","writeArgs","fromIndex","toIndex","markupIndex","markup","parentID","_currentElement","TopLevelWrapper","rootNodeID","_rootNodeID","isRender","isMount","mountStack","entry","subMountTime","current","getName","owner","_owner","measurement","items","write","DOM_OPERATION_TYPES","displayName","candidates","allIDs","assign","arr","DONT_CARE_THRESHOLD","onlyClean","inclusiveKey","cleanComponents","getUnchangedComponents","dirtyLeafIDs","isDirty","_mountImageIntoNode","INSERT_MARKUP","MOVE_EXISTING","REMOVE_NODE","SET_MARKUP","TEXT_CONTENT","setValueForProperty","setValueForAttribute","deleteValueForProperty","setValueForStyles","replaceNodeWithMarkup","updateTextContent","ExecutionEnvironment","canUseDOM","msPerformance","webkitPerformance"],"mappings":"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","file":"js\\bundle-app.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(322);\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */,\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */,\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */,\n/* 103 */,\n/* 104 */,\n/* 105 */,\n/* 106 */,\n/* 107 */,\n/* 108 */,\n/* 109 */,\n/* 110 */,\n/* 111 */,\n/* 112 */,\n/* 113 */,\n/* 114 */,\n/* 115 */,\n/* 116 */,\n/* 117 */,\n/* 118 */,\n/* 119 */,\n/* 120 */,\n/* 121 */,\n/* 122 */,\n/* 123 */,\n/* 124 */,\n/* 125 */,\n/* 126 */,\n/* 127 */,\n/* 128 */,\n/* 129 */,\n/* 130 */,\n/* 131 */,\n/* 132 */,\n/* 133 */,\n/* 134 */,\n/* 135 */,\n/* 136 */,\n/* 137 */,\n/* 138 */,\n/* 139 */,\n/* 140 */,\n/* 141 */,\n/* 142 */,\n/* 143 */,\n/* 144 */,\n/* 145 */,\n/* 146 */,\n/* 147 */,\n/* 148 */,\n/* 149 */,\n/* 150 */,\n/* 151 */,\n/* 152 */,\n/* 153 */,\n/* 154 */,\n/* 155 */,\n/* 156 */,\n/* 157 */,\n/* 158 */,\n/* 159 */,\n/* 160 */,\n/* 161 */,\n/* 162 */,\n/* 163 */,\n/* 164 */,\n/* 165 */,\n/* 166 */,\n/* 167 */,\n/* 168 */,\n/* 169 */,\n/* 170 */,\n/* 171 */,\n/* 172 */,\n/* 173 */,\n/* 174 */,\n/* 175 */,\n/* 176 */,\n/* 177 */,\n/* 178 */,\n/* 179 */,\n/* 180 */,\n/* 181 */,\n/* 182 */,\n/* 183 */,\n/* 184 */,\n/* 185 */,\n/* 186 */,\n/* 187 */,\n/* 188 */,\n/* 189 */,\n/* 190 */,\n/* 191 */,\n/* 192 */,\n/* 193 */,\n/* 194 */,\n/* 195 */,\n/* 196 */,\n/* 197 */,\n/* 198 */,\n/* 199 */,\n/* 200 */,\n/* 201 */,\n/* 202 */,\n/* 203 */,\n/* 204 */,\n/* 205 */,\n/* 206 */,\n/* 207 */,\n/* 208 */,\n/* 209 */,\n/* 210 */,\n/* 211 */,\n/* 212 */,\n/* 213 */,\n/* 214 */,\n/* 215 */,\n/* 216 */,\n/* 217 */,\n/* 218 */,\n/* 219 */,\n/* 220 */,\n/* 221 */,\n/* 222 */,\n/* 223 */,\n/* 224 */,\n/* 225 */,\n/* 226 */,\n/* 227 */,\n/* 228 */,\n/* 229 */,\n/* 230 */,\n/* 231 */,\n/* 232 */,\n/* 233 */,\n/* 234 */,\n/* 235 */,\n/* 236 */,\n/* 237 */,\n/* 238 */,\n/* 239 */,\n/* 240 */,\n/* 241 */,\n/* 242 */,\n/* 243 */,\n/* 244 */,\n/* 245 */,\n/* 246 */,\n/* 247 */,\n/* 248 */,\n/* 249 */,\n/* 250 */,\n/* 251 */,\n/* 252 */,\n/* 253 */,\n/* 254 */,\n/* 255 */,\n/* 256 */,\n/* 257 */,\n/* 258 */,\n/* 259 */,\n/* 260 */,\n/* 261 */,\n/* 262 */,\n/* 263 */,\n/* 264 */,\n/* 265 */,\n/* 266 */,\n/* 267 */,\n/* 268 */,\n/* 269 */,\n/* 270 */,\n/* 271 */,\n/* 272 */,\n/* 273 */,\n/* 274 */,\n/* 275 */,\n/* 276 */,\n/* 277 */,\n/* 278 */,\n/* 279 */,\n/* 280 */,\n/* 281 */,\n/* 282 */,\n/* 283 */,\n/* 284 */,\n/* 285 */,\n/* 286 */,\n/* 287 */,\n/* 288 */,\n/* 289 */,\n/* 290 */,\n/* 291 */,\n/* 292 */,\n/* 293 */,\n/* 294 */,\n/* 295 */,\n/* 296 */,\n/* 297 */,\n/* 298 */,\n/* 299 */,\n/* 300 */,\n/* 301 */,\n/* 302 */,\n/* 303 */,\n/* 304 */,\n/* 305 */,\n/* 306 */,\n/* 307 */,\n/* 308 */,\n/* 309 */,\n/* 310 */,\n/* 311 */,\n/* 312 */,\n/* 313 */,\n/* 314 */,\n/* 315 */,\n/* 316 */,\n/* 317 */,\n/* 318 */,\n/* 319 */,\n/* 320 */,\n/* 321 */,\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(323);\n\t\n\tvar _reactDom2 = _interopRequireDefault(_reactDom);\n\t\n\tvar _ExampleBrowser = __webpack_require__(324);\n\t\n\tvar _ExampleBrowser2 = _interopRequireDefault(_ExampleBrowser);\n\t\n\tvar _reactAddonsPerf = __webpack_require__(424);\n\t\n\tvar _reactAddonsPerf2 = _interopRequireDefault(_reactAddonsPerf);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\twindow.Perf = _reactAddonsPerf2.default;\n\t\n\t_reactDom2.default.render(_react2.default.createElement(_ExampleBrowser2.default, null), document.getElementById('content'));\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(4);\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _index = __webpack_require__(325);\n\t\n\tvar _index2 = _interopRequireDefault(_index);\n\t\n\tvar _index3 = __webpack_require__(330);\n\t\n\tvar _index4 = _interopRequireDefault(_index3);\n\t\n\tvar _index5 = __webpack_require__(345);\n\t\n\tvar _index6 = _interopRequireDefault(_index5);\n\t\n\tvar _index7 = __webpack_require__(346);\n\t\n\tvar _index8 = _interopRequireDefault(_index7);\n\t\n\tvar _index9 = __webpack_require__(349);\n\t\n\tvar _index10 = _interopRequireDefault(_index9);\n\t\n\tvar _index11 = __webpack_require__(354);\n\t\n\tvar _index12 = _interopRequireDefault(_index11);\n\t\n\tvar _index13 = __webpack_require__(362);\n\t\n\tvar _index14 = _interopRequireDefault(_index13);\n\t\n\tvar _mousePick = __webpack_require__(419);\n\t\n\tvar _mousePick2 = _interopRequireDefault(_mousePick);\n\t\n\tvar _RotatingCubes = __webpack_require__(421);\n\t\n\tvar _RotatingCubes2 = _interopRequireDefault(_RotatingCubes);\n\t\n\tvar _RotatingCubesDirectUpdates = __webpack_require__(423);\n\t\n\tvar _RotatingCubesDirectUpdates2 = _interopRequireDefault(_RotatingCubesDirectUpdates);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar examples = [{\n\t  name: 'Simple',\n\t  component: _index2.default,\n\t  url: 'Simple/index'\n\t}, {\n\t  name: 'Cloth',\n\t  component: _index4.default,\n\t  url: 'AnimationCloth/index'\n\t}, {\n\t  name: 'Camera',\n\t  component: _index8.default,\n\t  url: 'WebGLCameraExample/index'\n\t}, {\n\t  name: 'Geometries',\n\t  component: _index6.default,\n\t  url: 'Geometries/index'\n\t}, {\n\t  name: 'Geometry Shapes',\n\t  component: _index10.default,\n\t  url: 'GeometryShapes/index'\n\t}, {\n\t  name: 'Draggable Cubes',\n\t  component: _index12.default,\n\t  url: 'DraggableCubes/index'\n\t}, {\n\t  name: 'Advanced',\n\t  advanced: true,\n\t  page: 'advanced.html'\n\t}, {\n\t  name: 'Physics',\n\t  component: _index14.default,\n\t  url: 'Physics/index'\n\t}, {\n\t  name: 'Physics - MousePick',\n\t  component: _mousePick2.default,\n\t  url: 'Physics/mousePick'\n\t}, {\n\t  name: 'Benchmark - RotatingCubes - Through React',\n\t  component: _RotatingCubes2.default,\n\t  url: 'Benchmark/RotatingCubes'\n\t}, {\n\t  name: 'Benchmark - RotatingCubes - Direct Updates',\n\t  component: _RotatingCubesDirectUpdates2.default,\n\t  url: 'Benchmark/RotatingCubesDirectUpdates'\n\t}];\n\t\n\tvar ExampleBrowser = function (_React$Component) {\n\t  (0, _inherits3.default)(ExampleBrowser, _React$Component);\n\t\n\t  function ExampleBrowser(props, context) {\n\t    (0, _classCallCheck3.default)(this, ExampleBrowser);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ExampleBrowser).call(this, props, context));\n\t\n\t    _this._onWindowResize = function () {\n\t      var viewer = _this.refs.viewer;\n\t\n\t      _this.setState({\n\t        viewerWidth: viewer.offsetWidth,\n\t        viewerHeight: viewer.offsetHeight\n\t      });\n\t    };\n\t\n\t    _this.state = {\n\t      activeExample: null,\n\t      viewerWidth: 0,\n\t      viewerHeight: 0\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(ExampleBrowser, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      window.addEventListener('resize', this._onWindowResize, false);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      window.removeEventListener('resize', this._onWindowResize, false);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var exampleContent = null;\n\t\n\t      var _state = this.state;\n\t      var viewerWidth = _state.viewerWidth;\n\t      var viewerHeight = _state.viewerHeight;\n\t\n\t      var sourceButton = null;\n\t\n\t      if (this.state.activeExample !== null) {\n\t        var _examples$state$activ = examples[this.state.activeExample];\n\t        var ExampleComponent = _examples$state$activ.component;\n\t        var url = _examples$state$activ.url;\n\t\n\t        exampleContent = _react2.default.createElement(ExampleComponent, {\n\t          width: viewerWidth,\n\t          height: viewerHeight });\n\t\n\t        sourceButton = _react2.default.createElement(\n\t          'div',\n\t          { key: 'src', id: 'button' },\n\t          _react2.default.createElement(\n\t            'a',\n\t            {\n\t              href: 'https://github.com/toxicFork/react-three-renderer-example/blob/master/src/examples/' + url + '.js',\n\t              target: '_blank' },\n\t            'View source'\n\t          )\n\t        );\n\t      }\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t          'div',\n\t          { id: 'panel', className: 'collapsed' },\n\t          _react2.default.createElement(\n\t            'h1',\n\t            null,\n\t            _react2.default.createElement(\n\t              'a',\n\t              { href: 'https://github.com/toxicFork/react-three-renderer/' },\n\t              'react-three-renderer'\n\t            ),\n\t            ' / examples'\n\t          ),\n\t          _react2.default.createElement(\n\t            'div',\n\t            { id: 'content' },\n\t            _react2.default.createElement(\n\t              'div',\n\t              null,\n\t              _react2.default.createElement(\n\t                'h2',\n\t                null,\n\t                'webgl'\n\t              ),\n\t              examples.map(function (example, index) {\n\t                if (example.advanced) {\n\t                  return _react2.default.createElement(\n\t                    'div',\n\t                    { className: 'link', key: index },\n\t                    _react2.default.createElement(\n\t                      'a',\n\t                      { href: example.page },\n\t                      example.name\n\t                    )\n\t                  );\n\t                }\n\t                return _react2.default.createElement(\n\t                  'div',\n\t                  { className: 'link', key: index, onClick: function onClick() {\n\t                      var viewer = _this2.refs.viewer;\n\t\n\t                      _this2.setState({\n\t                        viewerWidth: viewer.offsetWidth,\n\t                        viewerHeight: viewer.offsetHeight,\n\t                        activeExample: index\n\t                      });\n\t                    } },\n\t                  example.name\n\t                );\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'div',\n\t          { id: 'viewer', ref: 'viewer' },\n\t          exampleContent,\n\t          sourceButton\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return ExampleBrowser;\n\t}(_react2.default.Component);\n\t\n\texports.default = ExampleBrowser;\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Simple = function (_React$Component) {\n\t  (0, _inherits3.default)(Simple, _React$Component);\n\t\n\t  function Simple(props, context) {\n\t    (0, _classCallCheck3.default)(this, Simple);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Simple).call(this, props, context));\n\t\n\t    _this.cameraPosition = new _three2.default.Vector3(0, 0, 5);\n\t\n\t    _this.state = {\n\t      cubeRotation: new _three2.default.Euler()\n\t    };\n\t\n\t    _this._onAnimate = function () {\n\t      _this.setState({\n\t        cubeRotation: new _three2.default.Euler(_this.state.cubeRotation.x + 0.1, _this.state.cubeRotation.y + 0.1, 0)\n\t      });\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(Simple, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var width = window.innerWidth;\n\t      var height = window.innerHeight;\n\t\n\t      return _react2.default.createElement(\n\t        _reactThreeRenderer2.default,\n\t        {\n\t          mainCamera: 'camera',\n\t          width: width,\n\t          height: height,\n\t\n\t          onAnimate: this._onAnimate\n\t        },\n\t        _react2.default.createElement(\n\t          'scene',\n\t          null,\n\t          _react2.default.createElement('perspectiveCamera', {\n\t            name: 'camera',\n\t            fov: 75,\n\t            aspect: width / height,\n\t            near: 0.1,\n\t            far: 1000,\n\t\n\t            position: this.cameraPosition\n\t          }),\n\t          _react2.default.createElement(\n\t            'mesh',\n\t            {\n\t              rotation: this.state.cubeRotation\n\t            },\n\t            _react2.default.createElement('boxGeometry', {\n\t              width: 1,\n\t              height: 1,\n\t              depth: 1\n\t            }),\n\t            _react2.default.createElement('meshBasicMaterial', {\n\t              color: 0x00ff00\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Simple;\n\t}(_react2.default.Component);\n\t\n\texports.default = Simple;\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _React = __webpack_require__(327);\n\t\n\tvar _React2 = _interopRequireDefault(_React);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tmodule.exports = _React2.default; // Use this file if you like to compile from the source files instead of the lib.\n\t// It may save you some bytes, as for example babel runtime is no longer a hidden dependency.undefined\n\n/***/ },\n/* 327 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _React3Renderer = __webpack_require__(154);\n\t\n\tvar _React3Renderer2 = _interopRequireDefault(_React3Renderer);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _propTypeInstanceOf = __webpack_require__(234);\n\t\n\tvar _propTypeInstanceOf2 = _interopRequireDefault(_propTypeInstanceOf);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar React3 = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(React3, _React$Component);\n\t\n\t  function React3(props, context) {\n\t    (0, _classCallCheck3.default)(this, React3);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(React3).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this._onRecreateCanvas = function () {\n\t      _this.setState({\n\t        // changing the key will recreate the element\n\t        canvasKey: _this.state.canvasKey + 1\n\t      });\n\t    };\n\t\n\t    _this.state = {\n\t      canvasKey: 0\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(React3, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.react3Renderer = new _React3Renderer2.default();\n\t\n\t      this._render();\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate() {\n\t      this._render();\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      this.react3Renderer.dispose();\n\t      delete this.react3Renderer;\n\t    }\n\t  }, {\n\t    key: '_render',\n\t    value: function _render() {\n\t      var canvas = this.refs.canvas;\n\t\n\t      var propsToClone = (0, _extends3.default)({}, this.props);\n\t\n\t      delete propsToClone.canvasStyle;\n\t\n\t      this.react3Renderer.render(_react2.default.createElement(\n\t        'react3',\n\t        (0, _extends3.default)({}, propsToClone, {\n\t          onRecreateCanvas: this._onRecreateCanvas }),\n\t        this.props.children\n\t      ), canvas);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var canvasKey = this.state.canvasKey;\n\t\n\t      return _react2.default.createElement('canvas', {\n\t        ref: 'canvas',\n\t        key: canvasKey,\n\t        width: this.props.width,\n\t        height: this.props.height,\n\t        style: (0, _extends3.default)({}, this.props.canvasStyle, {\n\t          width: this.props.width,\n\t          height: this.props.height\n\t        })\n\t      });\n\t    }\n\t  }]);\n\t  return React3;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  context: PropTypes.string,\n\t  width: PropTypes.number.isRequired,\n\t  height: PropTypes.number.isRequired,\n\t  children: PropTypes.any,\n\t  canvasStyle: PropTypes.any,\n\t  gammaInput: PropTypes.bool,\n\t  gammaOutput: PropTypes.bool,\n\t  sortObjects: PropTypes.bool,\n\t  mainCamera: PropTypes.string,\n\t  onAnimate: PropTypes.func,\n\t  clearColor: PropTypes.oneOfType([(0, _propTypeInstanceOf2.default)(_three2.default.Color), PropTypes.number, PropTypes.string]),\n\t  shadowMapEnabled: PropTypes.bool,\n\t  shadowMapType: PropTypes.oneOf([_three2.default.BasicShadowMap, _three2.default.PCFShadowMap, _three2.default.PCFSoftShadowMap]),\n\t  shadowMapCullFace: PropTypes.oneOf([_three2.default.CullFaceNone, _three2.default.CullFaceBack, _three2.default.CullFaceFront, _three2.default.CullFaceFrontBack]),\n\t  shadowMapDebug: PropTypes.bool,\n\t  pixelRatio: PropTypes.number,\n\t  antialias: PropTypes.oneOfType([PropTypes.bool, PropTypes.number])\n\t}, _class.defaultProps = {\n\t  context: '3d'\n\t}, _class.findTHREEObject = _React3Renderer2.default.findTHREEObject, _class.eventDispatcher = _React3Renderer2.default.eventDispatcher, _temp);\n\t\n\tmodule.exports = React3;\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactComponentWithPureRenderMixin\n\t */\n\t\n\t'use strict';\n\t\n\tvar shallowCompare = __webpack_require__(329);\n\t\n\t/**\n\t * If your React component's render function is \"pure\", e.g. it will render the\n\t * same result given the same props and state, provide this Mixin for a\n\t * considerable performance boost.\n\t *\n\t * Most React components have pure render functions.\n\t *\n\t * Example:\n\t *\n\t *   var ReactComponentWithPureRenderMixin =\n\t *     require('ReactComponentWithPureRenderMixin');\n\t *   React.createClass({\n\t *     mixins: [ReactComponentWithPureRenderMixin],\n\t *\n\t *     render: function() {\n\t *       return <div className={this.props.className}>foo</div>;\n\t *     }\n\t *   });\n\t *\n\t * Note: This only checks shallow equality for props and state. If these contain\n\t * complex data structures this mixin may have false-negatives for deeper\n\t * differences. Only mixin to components which have simple props and state, or\n\t * use `forceUpdate()` when you know deep data structures have changed.\n\t */\n\tvar ReactComponentWithPureRenderMixin = {\n\t  shouldComponentUpdate: function (nextProps, nextState) {\n\t    return shallowCompare(this, nextProps, nextState);\n\t  }\n\t};\n\t\n\tmodule.exports = ReactComponentWithPureRenderMixin;\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t* @providesModule shallowCompare\n\t*/\n\t\n\t'use strict';\n\t\n\tvar shallowEqual = __webpack_require__(117);\n\t\n\t/**\n\t * Does a shallow comparison for props and state.\n\t * See ReactComponentWithPureRenderMixin\n\t */\n\tfunction shallowCompare(instance, nextProps, nextState) {\n\t  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n\t}\n\t\n\tmodule.exports = shallowCompare;\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(323);\n\t\n\tvar _reactDom2 = _interopRequireDefault(_reactDom);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _Info = __webpack_require__(333);\n\t\n\tvar _Info2 = _interopRequireDefault(_Info);\n\t\n\tvar _Cloth = __webpack_require__(334);\n\t\n\tvar _Cloth2 = _interopRequireDefault(_Cloth);\n\t\n\tvar _StaticWorld = __webpack_require__(335);\n\t\n\tvar _StaticWorld2 = _interopRequireDefault(_StaticWorld);\n\t\n\tvar _Sphere = __webpack_require__(343);\n\t\n\tvar _Sphere2 = _interopRequireDefault(_Sphere);\n\t\n\tvar _trackball = __webpack_require__(344);\n\t\n\tvar _trackball2 = _interopRequireDefault(_trackball);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar ballSize = 60; // 40\n\t\n\tvar GRAVITY = 981 * 1.4; //\n\tvar gravity = new _three2.default.Vector3(0, -GRAVITY, 0).multiplyScalar(_Cloth2.default.MASS);\n\t\n\tvar TIMESTEP = 18 / 1000;\n\tvar TIMESTEP_SQ = TIMESTEP * TIMESTEP;\n\t\n\tvar diff = new _three2.default.Vector3();\n\t\n\tfunction satisfyConstrains(p1, p2, distance) {\n\t  diff.subVectors(p2.position, p1.position);\n\t  var currentDist = diff.length();\n\t  if (currentDist === 0) return; // prevents division by 0\n\t  var correction = diff.multiplyScalar(1 - distance / currentDist);\n\t  var correctionHalf = correction.multiplyScalar(0.5);\n\t  p1.position.add(correctionHalf);\n\t  p2.position.sub(correctionHalf);\n\t}\n\t\n\tvar tmpForce = new _three2.default.Vector3();\n\t\n\tvar AnimationCloth = function (_ExampleBase) {\n\t  (0, _inherits3.default)(AnimationCloth, _ExampleBase);\n\t\n\t  function AnimationCloth(props, context) {\n\t    (0, _classCallCheck3.default)(this, AnimationCloth);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AnimationCloth).call(this, props, context));\n\t\n\t    _this._toggleRotate = function () {\n\t      _this.setState({ rotate: !_this.state.rotate });\n\t    };\n\t\n\t    _this._toggleWind = function () {\n\t      _this.setState({ wind: !_this.state.wind });\n\t    };\n\t\n\t    _this._toggleSphere = function () {\n\t      _this.setState({ sphere: !_this.state.sphere });\n\t    };\n\t\n\t    _this._togglePins = function () {\n\t      _this.pins = _this.pinsFormation[~ ~(Math.random() * _this.pinsFormation.length)];\n\t    };\n\t\n\t    _this._onAnimate = function () {\n\t      _this.controls.update();\n\t\n\t      var minTimePerFrame = _this.state.minTimePerFrame;\n\t\n\t      var time = undefined;\n\t\n\t      if (minTimePerFrame > 0) {\n\t        time = Math.round(Date.now() / minTimePerFrame) * minTimePerFrame;\n\t      } else {\n\t        time = Date.now();\n\t      }\n\t\n\t      if (time === _this.state.time) {\n\t        return;\n\t      }\n\t\n\t      var windStrength = Math.cos(time / 7000) * 20 + 40;\n\t      _this.windForce.set(Math.sin(time / 2000), Math.cos(time / 3000), Math.sin(time / 1000)).normalize().multiplyScalar(windStrength);\n\t\n\t      _this._simulate(time);\n\t\n\t      var clothGeometry = _reactThreeRenderer2.default.findTHREEObject(_this._clothGeometry);\n\t\n\t      // render\n\t\n\t      var timer = time * 0.0002;\n\t\n\t      var p = _this.cloth.particles;\n\t\n\t      var il = undefined;\n\t      var i = undefined;\n\t      for (i = 0, il = p.length; i < il; ++i) {\n\t        clothGeometry.vertices[i].copy(p[i].position);\n\t      }\n\t\n\t      clothGeometry.computeFaceNormals();\n\t      clothGeometry.computeVertexNormals();\n\t\n\t      clothGeometry.normalsNeedUpdate = true;\n\t      clothGeometry.verticesNeedUpdate = true;\n\t\n\t      var newState = {\n\t        time: time,\n\t        spherePosition: _this.ballPosition\n\t      };\n\t\n\t      if (_this.state.rotate) {\n\t        newState.cameraPosition = new _three2.default.Vector3(Math.cos(timer) * 1500, _this.state.cameraPosition.y, Math.sin(timer) * 1500);\n\t      }\n\t\n\t      _this.setState(newState);\n\t      _this.stats.update();\n\t    };\n\t\n\t    _this._clothRef = function (ref) {\n\t      _this._clothGeometry = ref;\n\t    };\n\t\n\t    _this.state = (0, _extends3.default)({}, _this.state, {\n\t      minTimePerFrame: 0,\n\t      rotate: true,\n\t      wind: true,\n\t      sphere: false\n\t    });\n\t\n\t    var xSegs = 10; //\n\t    var ySegs = 10; //\n\t\n\t    _this.cloth = new _Cloth2.default(xSegs, ySegs);\n\t\n\t    var pinsFormation = [];\n\t    var pins = [6];\n\t\n\t    pinsFormation.push(pins);\n\t\n\t    pins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\t    pinsFormation.push(pins);\n\t\n\t    pins = [0];\n\t    pinsFormation.push(pins);\n\t\n\t    pins = []; // cut the rope ;)\n\t    pinsFormation.push(pins);\n\t\n\t    pins = [0, _this.cloth.w]; // classic 2 pins\n\t    pinsFormation.push(pins);\n\t\n\t    pins = pinsFormation[1];\n\t\n\t    _this.pins = pins;\n\t    _this.pinsFormation = pinsFormation;\n\t\n\t    _this.fog = new _three2.default.Fog(0xcce0ff, 500, 10000);\n\t\n\t    _this.windForce = new _three2.default.Vector3(0, 0, 0);\n\t\n\t    _this.state = (0, _extends3.default)({}, _this.state, {\n\t      ballPosition: new _three2.default.Vector3(0, -45, 0),\n\t      cameraPosition: new _three2.default.Vector3(0, 50, 1500)\n\t    });\n\t\n\t    _this.scenePosition = new _three2.default.Vector3(0, 0, 0);\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(AnimationCloth, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var controls = new _trackball2.default(this.refs.mainCamera, _reactDom2.default.findDOMNode(this.refs.react3));\n\t      controls.rotateSpeed = 1.0;\n\t      controls.zoomSpeed = 1.2;\n\t      controls.panSpeed = 0.8;\n\t\n\t      controls.noZoom = false;\n\t      controls.noPan = false;\n\t\n\t      controls.staticMoving = true;\n\t      controls.dynamicDampingFactor = 0.3;\n\t\n\t      controls.addEventListener('change', function () {\n\t        _this2.setState({\n\t          cameraPosition: _this2.refs.mainCamera.position\n\t        });\n\t      });\n\t\n\t      this.controls = controls;\n\t\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      this.refs.container.appendChild(this.stats.domElement);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      delete this.stats;\n\t      this.controls.dispose();\n\t      delete this.controls;\n\t    }\n\t  }, {\n\t    key: '_simulate',\n\t    value: function _simulate(time) {\n\t      if (!this.lastTime) {\n\t        this.lastTime = time;\n\t        return;\n\t      }\n\t\n\t      var i = undefined;\n\t      var il = undefined;\n\t      var particles = undefined;\n\t      var particle = undefined;\n\t      var constrains = undefined;\n\t      var constrain = undefined;\n\t\n\t      var clothGeometry = _reactThreeRenderer2.default.findTHREEObject(this._clothGeometry);\n\t\n\t      var sphere = _reactThreeRenderer2.default.findTHREEObject(this.refs.sphere);\n\t\n\t      // Aerodynamics forces\n\t      if (this.state.wind) {\n\t        var face = undefined;\n\t        var faces = clothGeometry.faces;\n\t        var normal = undefined;\n\t\n\t        particles = this.cloth.particles;\n\t\n\t        for (i = 0, il = faces.length; i < il; i++) {\n\t          face = faces[i];\n\t          normal = face.normal;\n\t\n\t          tmpForce.copy(normal).normalize().multiplyScalar(normal.dot(this.windForce));\n\t          particles[face.a].addForce(tmpForce);\n\t          particles[face.b].addForce(tmpForce);\n\t          particles[face.c].addForce(tmpForce);\n\t        }\n\t      }\n\t\n\t      for (particles = this.cloth.particles, i = 0, il = particles.length; i < il; i++) {\n\t        particle = particles[i];\n\t        particle.addForce(gravity);\n\t\n\t        particle.integrate(TIMESTEP_SQ);\n\t      }\n\t\n\t      // Start Constrains\n\t\n\t      constrains = this.cloth.constrains;\n\t      il = constrains.length;\n\t\n\t      for (i = 0; i < il; i++) {\n\t        constrain = constrains[i];\n\t        satisfyConstrains(constrain[0], constrain[1], constrain[2]);\n\t      }\n\t\n\t      var ballPosition = this.state.ballPosition.clone();\n\t\n\t      // Ball Constrains\n\t      ballPosition.z = -Math.sin(Date.now() / 600) * 90; // + 40;\n\t      ballPosition.x = Math.cos(Date.now() / 400) * 70;\n\t\n\t      if (sphere.visible) {\n\t        for (particles = this.cloth.particles, i = 0, il = particles.length; i < il; i++) {\n\t          particle = particles[i];\n\t          var pos = particle.position;\n\t          diff.subVectors(pos, ballPosition);\n\t          if (diff.length() < ballSize) {\n\t            // collided\n\t            diff.normalize().multiplyScalar(ballSize);\n\t            pos.copy(ballPosition).add(diff);\n\t          }\n\t        }\n\t      }\n\t\n\t      // Floor Constraints\n\t      for (particles = this.cloth.particles, i = 0, il = particles.length; i < il; i++) {\n\t        particle = particles[i];\n\t        var pos = particle.position;\n\t        if (pos.y < -250) {\n\t          pos.y = -250;\n\t        }\n\t      }\n\t\n\t      // Pin Constrains\n\t      for (i = 0, il = this.pins.length; i < il; i++) {\n\t        var xy = this.pins[i];\n\t        var p = particles[xy];\n\t        p.position.copy(p.original);\n\t        p.previous.copy(p.original);\n\t      }\n\t\n\t      this.setState({\n\t        ballPosition: ballPosition\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var minTimePerFrame = this.state.minTimePerFrame;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { ref: 'container' },\n\t        _react2.default.createElement(_Info2.default, {\n\t          toggleRotate: this._toggleRotate,\n\t          toggleWind: this._toggleWind,\n\t          toggleSphere: this._toggleSphere,\n\t          togglePins: this._togglePins,\n\t          rotating: this.state.rotate,\n\t          winding: this.state.wind,\n\t          balling: this.state.sphere,\n\t          onFrameChange: function onFrameChange(event) {\n\t            _this3.setState({\n\t              minTimePerFrame: +event.target.value\n\t            });\n\t          },\n\t          minTimePerFrame: minTimePerFrame }),\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            ref: 'react3',\n\t            width: width,\n\t            height: height,\n\t            antialias: true,\n\t            pixelRatio: window.devicePixelRatio,\n\t            clearColor: this.fog.color,\n\t            gammaInput: true,\n\t            gammaOutput: true,\n\t            shadowMapEnabled: true,\n\t            shadowMapDebug: true,\n\t            mainCamera: 'mainCamera',\n\t            onAnimate: this._onAnimate\n\t          },\n\t          _react2.default.createElement(\n\t            'scene',\n\t            { fog: this.fog },\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              name: 'mainCamera',\n\t              fov: 30,\n\t              aspect: width / height,\n\t              ref: 'mainCamera',\n\t              position: this.state.cameraPosition,\n\t              near: 1,\n\t              far: 10000,\n\t              lookAt: this.state.rotate ? this.scenePosition : null\n\t            }),\n\t            _react2.default.createElement(_StaticWorld2.default, {\n\t              clothRef: this._clothRef,\n\t              cloth: this.cloth\n\t            }),\n\t            _react2.default.createElement(_Sphere2.default, {\n\t              ref: 'sphere',\n\t              visible: this.state.sphere,\n\t              position: this.state.ballPosition\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return AnimationCloth;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = AnimationCloth;\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tvar Stats = function () {\n\t\n\t\tvar startTime = Date.now(), prevTime = startTime;\n\t\tvar ms = 0, msMin = Infinity, msMax = 0;\n\t\tvar fps = 0, fpsMin = Infinity, fpsMax = 0;\n\t\tvar frames = 0, mode = 0;\n\t\n\t\tvar container = document.createElement( 'div' );\n\t\tcontainer.id = 'stats';\n\t\tcontainer.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );\n\t\tcontainer.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\t\n\t\tvar fpsDiv = document.createElement( 'div' );\n\t\tfpsDiv.id = 'fps';\n\t\tfpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\n\t\tcontainer.appendChild( fpsDiv );\n\t\n\t\tvar fpsText = document.createElement( 'div' );\n\t\tfpsText.id = 'fpsText';\n\t\tfpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\t\tfpsText.innerHTML = 'FPS';\n\t\tfpsDiv.appendChild( fpsText );\n\t\n\t\tvar fpsGraph = document.createElement( 'div' );\n\t\tfpsGraph.id = 'fpsGraph';\n\t\tfpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\n\t\tfpsDiv.appendChild( fpsGraph );\n\t\n\t\twhile ( fpsGraph.children.length < 74 ) {\n\t\n\t\t\tvar bar = document.createElement( 'span' );\n\t\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';\n\t\t\tfpsGraph.appendChild( bar );\n\t\n\t\t}\n\t\n\t\tvar msDiv = document.createElement( 'div' );\n\t\tmsDiv.id = 'ms';\n\t\tmsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\n\t\tcontainer.appendChild( msDiv );\n\t\n\t\tvar msText = document.createElement( 'div' );\n\t\tmsText.id = 'msText';\n\t\tmsText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\t\tmsText.innerHTML = 'MS';\n\t\tmsDiv.appendChild( msText );\n\t\n\t\tvar msGraph = document.createElement( 'div' );\n\t\tmsGraph.id = 'msGraph';\n\t\tmsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\n\t\tmsDiv.appendChild( msGraph );\n\t\n\t\twhile ( msGraph.children.length < 74 ) {\n\t\n\t\t\tvar bar = document.createElement( 'span' );\n\t\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';\n\t\t\tmsGraph.appendChild( bar );\n\t\n\t\t}\n\t\n\t\tvar setMode = function ( value ) {\n\t\n\t\t\tmode = value;\n\t\n\t\t\tswitch ( mode ) {\n\t\n\t\t\t\tcase 0:\n\t\t\t\t\tfpsDiv.style.display = 'block';\n\t\t\t\t\tmsDiv.style.display = 'none';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tfpsDiv.style.display = 'none';\n\t\t\t\t\tmsDiv.style.display = 'block';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tvar updateGraph = function ( dom, value ) {\n\t\n\t\t\tvar child = dom.appendChild( dom.firstChild );\n\t\t\tchild.style.height = value + 'px';\n\t\n\t\t};\n\t\n\t\treturn {\n\t\n\t\t\tREVISION: 12,\n\t\n\t\t\tdomElement: container,\n\t\n\t\t\tsetMode: setMode,\n\t\n\t\t\tbegin: function () {\n\t\n\t\t\t\tstartTime = Date.now();\n\t\n\t\t\t},\n\t\n\t\t\tend: function () {\n\t\n\t\t\t\tvar time = Date.now();\n\t\n\t\t\t\tms = time - startTime;\n\t\t\t\tmsMin = Math.min( msMin, ms );\n\t\t\t\tmsMax = Math.max( msMax, ms );\n\t\n\t\t\t\tmsText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';\n\t\t\t\tupdateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );\n\t\n\t\t\t\tframes ++;\n\t\n\t\t\t\tif ( time > prevTime + 1000 ) {\n\t\n\t\t\t\t\tfps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );\n\t\t\t\t\tfpsMin = Math.min( fpsMin, fps );\n\t\t\t\t\tfpsMax = Math.max( fpsMax, fps );\n\t\n\t\t\t\t\tfpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n\t\t\t\t\tupdateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );\n\t\n\t\t\t\t\tprevTime = time;\n\t\t\t\t\tframes = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn time;\n\t\n\t\t\t},\n\t\n\t\t\tupdate: function () {\n\t\n\t\t\t\tstartTime = this.end();\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tif ( true ) {\n\t\n\t\tmodule.exports = Stats;\n\t\n\t}\n\n/***/ },\n/* 332 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar ExampleBase = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(ExampleBase, _React$Component);\n\t\n\t  function ExampleBase() {\n\t    (0, _classCallCheck3.default)(this, ExampleBase);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(ExampleBase).apply(this, arguments));\n\t  }\n\t\n\t  return ExampleBase;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  width: PropTypes.number.isRequired,\n\t  height: PropTypes.number.isRequired\n\t}, _temp);\n\texports.default = ExampleBase;\n\n/***/ },\n/* 333 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar Info = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(Info, _React$Component);\n\t\n\t  function Info() {\n\t    (0, _classCallCheck3.default)(this, Info);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Info).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(Info, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var linkStyle = {\n\t        textDecoration: 'underline',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var _props = this.props;\n\t      var toggleRotate = _props.toggleRotate;\n\t      var toggleWind = _props.toggleWind;\n\t      var toggleSphere = _props.toggleSphere;\n\t      var togglePins = _props.togglePins;\n\t      var minTimePerFrame = _props.minTimePerFrame;\n\t      var onFrameChange = _props.onFrameChange;\n\t      var rotating = _props.rotating;\n\t      var winding = _props.winding;\n\t      var balling = _props.balling;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { style: {\n\t            textAlign: 'center',\n\t            padding: 10,\n\t            zIndex: 10,\n\t            width: '100%',\n\t            position: 'absolute',\n\t            color: '#000'\n\t          } },\n\t        _react2.default.createElement(\n\t          'a',\n\t          { href: 'http://threejs.org', style: {\n\t              color: '#0080ff'\n\t            } },\n\t          'three.js'\n\t        ),\n\t        ' - Simple Cloth Simulation',\n\t        _react2.default.createElement('br', null),\n\t        'Verlet integration with Constrains relaxation',\n\t        _react2.default.createElement('br', null),\n\t        'Toggle: ',\n\t        _react2.default.createElement(\n\t          'a',\n\t          { onClick: toggleRotate, style: linkStyle },\n\t          'Camera',\n\t          rotating ? '*' : null\n\t        ),\n\t        ' |',\n\t        _react2.default.createElement(\n\t          'span',\n\t          null,\n\t          ' ',\n\t          _react2.default.createElement(\n\t            'a',\n\t            { onClick: toggleWind, style: linkStyle },\n\t            'Wind',\n\t            winding ? '*' : null\n\t          )\n\t        ),\n\t        ' |',\n\t        _react2.default.createElement(\n\t          'span',\n\t          null,\n\t          ' ',\n\t          _react2.default.createElement(\n\t            'a',\n\t            { onClick: toggleSphere, style: linkStyle },\n\t            'Ball',\n\t            balling ? '*' : null\n\t          )\n\t        ),\n\t        ' |',\n\t        _react2.default.createElement(\n\t          'span',\n\t          null,\n\t          ' ',\n\t          _react2.default.createElement(\n\t            'a',\n\t            { onClick: togglePins, style: linkStyle },\n\t            'Pins'\n\t          )\n\t        ),\n\t        ' |',\n\t        _react2.default.createElement(\n\t          'span',\n\t          null,\n\t          ' Time between frames (ms): ',\n\t          _react2.default.createElement('input', {\n\t            onChange: onFrameChange,\n\t            value: minTimePerFrame,\n\t            type: 'number',\n\t            style: { width: 40 },\n\t            min: '0' }),\n\t          ' '\n\t        ),\n\t        _react2.default.createElement('br', null),\n\t        _react2.default.createElement(\n\t          'span',\n\t          null,\n\t          'Note: add some time between frames (e.g. 60ms) if you would like to inspect the scene through react devtools, because updating every frame kills the addon.'\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Info;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  toggleWind: PropTypes.func.isRequired,\n\t  toggleSphere: PropTypes.func.isRequired,\n\t  togglePins: PropTypes.func.isRequired,\n\t  toggleRotate: PropTypes.func.isRequired,\n\t  onFrameChange: PropTypes.func.isRequired,\n\t  minTimePerFrame: PropTypes.number.isRequired,\n\t  rotating: PropTypes.bool.isRequired,\n\t  winding: PropTypes.bool.isRequired,\n\t  balling: PropTypes.bool.isRequired\n\t}, _temp);\n\texports.default = Info;\n\n/***/ },\n/* 334 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp; /*\r\n\t                    * Cloth Simulation using a relaxed constrains solver\r\n\t                    */\n\t\n\t// Suggested Readings\n\t\n\t// Advanced Character Physics by Thomas Jakobsen Character\n\t// http://freespace.virgin.net/hugo.elias/models/m_cloth.htm\n\t// http://en.wikipedia.org/wiki/Cloth_modeling\n\t// http://cg.alexandra.dk/tag/spring-mass-system/\n\t// Real-time Cloth Animation http://www.darwin3d.com/gamedev/articles/col0599.pdf\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction plane(width, height) {\n\t  return function (u, v) {\n\t    var x = (u - 0.5) * width;\n\t    var y = (v + 0.5) * height;\n\t    var z = 0;\n\t\n\t    return new _three2.default.Vector3(x, y, z);\n\t  };\n\t}\n\t\n\tvar DAMPING = 0.03;\n\tvar DRAG = 1 - DAMPING;\n\tvar MASS = 0.1;\n\tvar restDistance = 25;\n\t\n\tvar xSegs = 10; //\n\tvar ySegs = 10; //\n\t\n\tvar clothFunction = plane(restDistance * xSegs, restDistance * ySegs);\n\t\n\tvar Particle = function () {\n\t  function Particle(x, y, z, mass) {\n\t    (0, _classCallCheck3.default)(this, Particle);\n\t\n\t    void z;\n\t\n\t    this.position = clothFunction(x, y); // position\n\t    this.previous = clothFunction(x, y); // previous\n\t    this.original = clothFunction(x, y);\n\t    this.a = new _three2.default.Vector3(0, 0, 0); // acceleration\n\t    this.mass = mass;\n\t    this.invMass = 1 / mass;\n\t    this.tmp = new _three2.default.Vector3();\n\t    this.tmp2 = new _three2.default.Vector3();\n\t  }\n\t\n\t  // Force -> Acceleration\n\t\n\t  (0, _createClass3.default)(Particle, [{\n\t    key: 'addForce',\n\t    value: function addForce(force) {\n\t      this.a.add(this.tmp2.copy(force).multiplyScalar(this.invMass));\n\t    }\n\t\n\t    // Performs verlet integration\n\t\n\t  }, {\n\t    key: 'integrate',\n\t    value: function integrate(timesQ) {\n\t      var newPos = this.tmp.subVectors(this.position, this.previous);\n\t      newPos.multiplyScalar(DRAG).add(this.position);\n\t      newPos.add(this.a.multiplyScalar(timesQ));\n\t\n\t      this.tmp = this.previous;\n\t      this.previous = this.position;\n\t      this.position = newPos;\n\t\n\t      this.a.set(0, 0, 0);\n\t    }\n\t  }]);\n\t  return Particle;\n\t}();\n\t\n\tvar Cloth = (_temp = _class = function Cloth() {\n\t  var w = arguments.length <= 0 || arguments[0] === undefined ? 10 : arguments[0];\n\t  var h = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];\n\t  (0, _classCallCheck3.default)(this, Cloth);\n\t\n\t  this.w = w;\n\t  this.h = h;\n\t\n\t  var particles = [];\n\t  var constrains = [];\n\t\n\t  var u = undefined;\n\t  var v = undefined;\n\t\n\t  // Create particles\n\t  for (v = 0; v <= h; v++) {\n\t    for (u = 0; u <= w; u++) {\n\t      particles.push(new Particle(u / w, v / h, 0, MASS));\n\t    }\n\t  }\n\t\n\t  function index(indexU, indexV) {\n\t    return indexU + indexV * (w + 1);\n\t  }\n\t\n\t  // Structural\n\t\n\t  for (v = 0; v < h; v++) {\n\t    for (u = 0; u < w; u++) {\n\t      constrains.push([particles[index(u, v)], particles[index(u, v + 1)], restDistance]);\n\t\n\t      constrains.push([particles[index(u, v)], particles[index(u + 1, v)], restDistance]);\n\t    }\n\t  }\n\t\n\t  for (u = w, v = 0; v < h; v++) {\n\t    constrains.push([particles[index(u, v)], particles[index(u, v + 1)], restDistance]);\n\t  }\n\t\n\t  for (v = h, u = 0; u < w; u++) {\n\t    constrains.push([particles[index(u, v)], particles[index(u + 1, v)], restDistance]);\n\t  }\n\t\n\t  this.particles = particles;\n\t  this.constrains = constrains;\n\t\n\t  this.index = index;\n\t}, _class.clothFunction = clothFunction, _class.MASS = MASS, _temp);\n\texports.default = Cloth;\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _parseInt = __webpack_require__(336);\n\t\n\tvar _parseInt2 = _interopRequireDefault(_parseInt);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ClothGeometry = __webpack_require__(339);\n\t\n\tvar _ClothGeometry2 = _interopRequireDefault(_ClothGeometry);\n\t\n\tvar _Poles = __webpack_require__(340);\n\t\n\tvar _Poles2 = _interopRequireDefault(_Poles);\n\t\n\tvar _Cloth = __webpack_require__(334);\n\t\n\tvar _Cloth2 = _interopRequireDefault(_Cloth);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tvar _depth = __webpack_require__(341);\n\t\n\tvar _depth2 = _interopRequireDefault(_depth);\n\t\n\tvar _depth3 = __webpack_require__(342);\n\t\n\tvar _depth4 = _interopRequireDefault(_depth3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar StaticWorld = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(StaticWorld, _React$Component);\n\t\n\t  function StaticWorld(props, context) {\n\t    (0, _classCallCheck3.default)(this, StaticWorld);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(StaticWorld).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this.directionalLightPosition = new _three2.default.Vector3(50, 200, 100).multiplyScalar(1.3);\n\t    _this.groundPosition = new _three2.default.Vector3(0, -250, 0);\n\t    _this.groundRotation = new _three2.default.Euler(-Math.PI / 2, 0, 0);\n\t    _this.groundRepeat = new _three2.default.Vector2(25, 25);\n\t\n\t    _this.state = {\n\t      ambientLightColor: '666666',\n\t      directionalLightColor: 'dfebff',\n\t      fragmentShaderDepth: _depth2.default,\n\t      vertexShaderDepth: _depth4.default\n\t    };\n\t\n\t    // check if HMR is enabled\n\t    if (false) {\n\t      // accept update of dependency\n\t      module.hot.accept('raw!./shaders/depth.frag', function () {\n\t        _this.setState({\n\t          fragmentShaderDepth: require('raw!./shaders/depth.frag')\n\t        });\n\t      });\n\t\n\t      module.hot.accept('raw!./shaders/depth.vert', function () {\n\t        _this.setState({\n\t          vertexShaderDepth: require('raw!./shaders/depth.vert')\n\t        });\n\t      });\n\t    }\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(StaticWorld, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var shadowCameraSize = 300;\n\t\n\t      var _state = this.state;\n\t      var ambientLightColor = _state.ambientLightColor;\n\t      var directionalLightColor = _state.directionalLightColor;\n\t      var frag = _state.fragmentShaderDepth;\n\t      var vert = _state.vertexShaderDepth;\n\t\n\t      return _react2.default.createElement(\n\t        'object3D',\n\t        null,\n\t        _react2.default.createElement(\n\t          'resources',\n\t          null,\n\t          _react2.default.createElement('texture', {\n\t            url: 'textures/patterns/circuit_pattern.png',\n\t            wrapS: _three2.default.RepeatWrapping,\n\t            wrapT: _three2.default.RepeatWrapping,\n\t            anisotropy: 16,\n\t            resourceId: 'clothTexture'\n\t          })\n\t        ),\n\t        _react2.default.createElement('ambientLight', {\n\t          color: (0, _parseInt2.default)(ambientLightColor, 16)\n\t        }),\n\t        _react2.default.createElement('directionalLight', {\n\t          color: (0, _parseInt2.default)(directionalLightColor, 16),\n\t          intensity: 1.75,\n\t          position: this.directionalLightPosition,\n\t          castShadow: true,\n\t          shadowMapWidth: 1024,\n\t          shadowMapHeight: 1024,\n\t          shadowCameraLeft: -shadowCameraSize,\n\t          shadowCameraRight: shadowCameraSize,\n\t          shadowCameraTop: shadowCameraSize,\n\t          shadowCameraBottom: -shadowCameraSize,\n\t          shadowCameraFar: 1000\n\t        }),\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            castShadow: true,\n\t            receiveShadow: true\n\t          },\n\t          _react2.default.createElement(_ClothGeometry2.default, {\n\t            ref: this.props.clothRef,\n\t            cloth: this.props.cloth\n\t          }),\n\t          _react2.default.createElement(\n\t            'meshPhongMaterial',\n\t            {\n\t              alphaTest: 0.5,\n\t              color: 0xffffff,\n\t              specular: 0x030303,\n\t              emissive: 0x111111,\n\t              shininess: 10,\n\t              side: _three2.default.DoubleSide\n\t            },\n\t            _react2.default.createElement('textureResource', {\n\t              resourceId: 'clothTexture'\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'shaderMaterial',\n\t            {\n\t              slot: 'customDepthMaterial',\n\t              fragmentShader: frag,\n\t              vertexShader: vert\n\t            },\n\t            _react2.default.createElement(\n\t              'uniforms',\n\t              null,\n\t              _react2.default.createElement(\n\t                'uniform',\n\t                {\n\t                  name: 'texture',\n\t                  type: 't'\n\t                },\n\t                _react2.default.createElement('textureResource', {\n\t                  resourceId: 'clothTexture'\n\t                })\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            position: this.groundPosition,\n\t            rotation: this.groundRotation,\n\t            receiveShadow: true\n\t          },\n\t          _react2.default.createElement('planeBufferGeometry', {\n\t            width: 20000,\n\t            height: 20000\n\t          }),\n\t          _react2.default.createElement(\n\t            'meshPhongMaterial',\n\t            {\n\t              color: 0xffffff,\n\t              specular: 0x111111\n\t            },\n\t            _react2.default.createElement('texture', {\n\t              url: 'textures/terrain/grasslight-big.jpg',\n\t              wrapS: _three2.default.RepeatWrapping,\n\t              wrapT: _three2.default.RepeatWrapping,\n\t              repeat: this.groundRepeat,\n\t              anisotropy: 16\n\t            })\n\t          )\n\t        ),\n\t        _react2.default.createElement(_Poles2.default, null)\n\t      );\n\t    }\n\t  }]);\n\t  return StaticWorld;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  clothRef: PropTypes.func.isRequired,\n\t  cloth: PropTypes.instanceOf(_Cloth2.default).isRequired\n\t}, _temp);\n\texports.default = StaticWorld;\n\n/***/ },\n/* 336 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(337), __esModule: true };\n\n/***/ },\n/* 337 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(338);\n\tmodule.exports = parseInt;\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 20.1.2.13 Number.parseInt(string, radix)\n\tvar $export = __webpack_require__(160);\n\t\n\t$export($export.S, 'Number', {parseInt: parseInt});\n\n/***/ },\n/* 339 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp2;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Cloth = __webpack_require__(334);\n\t\n\tvar _Cloth2 = _interopRequireDefault(_Cloth);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar ClothGeometry = (_temp2 = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(ClothGeometry, _React$Component);\n\t\n\t  function ClothGeometry() {\n\t    var _Object$getPrototypeO;\n\t\n\t    var _temp, _this, _ret;\n\t\n\t    (0, _classCallCheck3.default)(this, ClothGeometry);\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(ClothGeometry)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t\n\t  (0, _createClass3.default)(ClothGeometry, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var geometry = this.refs.geometry;\n\t\n\t      geometry.computeFaceNormals();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var cloth = this.props.cloth;\n\t\n\t      return _react2.default.createElement('parametricGeometry', {\n\t        ref: 'geometry',\n\t        parametricFunction: _Cloth2.default.clothFunction,\n\t        slices: cloth.w,\n\t        stacks: cloth.h,\n\t        dynamic: true\n\t      });\n\t    }\n\t  }]);\n\t  return ClothGeometry;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  cloth: PropTypes.instanceOf(_Cloth2.default).isRequired\n\t}, _temp2);\n\texports.default = ClothGeometry;\n\n/***/ },\n/* 340 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _parseInt = __webpack_require__(336);\n\t\n\tvar _parseInt2 = _interopRequireDefault(_parseInt);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Poles = function (_React$Component) {\n\t  (0, _inherits3.default)(Poles, _React$Component);\n\t\n\t  function Poles(props, context) {\n\t    (0, _classCallCheck3.default)(this, Poles);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Poles).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this.state = {\n\t      poleMaterialColor: Number(0xffffff).toString(16),\n\t      poleMaterialSpecular: Number(0x111111).toString(16),\n\t      poleMaterialShininess: 100,\n\t      sidePolePositions: [new _three2.default.Vector3(-125, -62, 0), new _three2.default.Vector3(125, -62, 0)],\n\t      boxPositions: [new _three2.default.Vector3(125, -250, 0), new _three2.default.Vector3(-125, -250, 0)],\n\t      topPolePosition: new _three2.default.Vector3(0, -250 + 750 / 2, 0),\n\t      subResource: false\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(Poles, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        'object3D',\n\t        null,\n\t        _react2.default.createElement(\n\t          'resources',\n\t          null,\n\t          _react2.default.createElement('boxGeometry', {\n\t            resourceId: 'poleGeometry',\n\t            width: 5,\n\t            height: 375,\n\t            depth: 5 }),\n\t          _react2.default.createElement('boxGeometry', {\n\t            resourceId: 'boxGeometry',\n\t            width: 10,\n\t            height: 10,\n\t            depth: 10 }),\n\t          _react2.default.createElement('meshPhongMaterial', {\n\t            resourceId: 'poleMaterial',\n\t            color: (0, _parseInt2.default)(this.state.poleMaterialColor, 16),\n\t            specular: (0, _parseInt2.default)(this.state.poleMaterialSpecular, 16),\n\t            shininess: this.state.poleMaterialShininess\n\t          })\n\t        ),\n\t        this.state.sidePolePositions.map(function (position, i) {\n\t          return _react2.default.createElement(\n\t            'mesh',\n\t            {\n\t              key: i,\n\t              position: position,\n\t              receiveShadow: true,\n\t              castShadow: true\n\t            },\n\t            _react2.default.createElement('geometryResource', {\n\t              resourceId: 'poleGeometry'\n\t            }),\n\t            _react2.default.createElement('materialResource', {\n\t              resourceId: 'poleMaterial'\n\t            })\n\t          );\n\t        }),\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            position: this.state.topPolePosition,\n\t            receiveShadow: true,\n\t            castShadow: true\n\t          },\n\t          _react2.default.createElement('boxGeometry', {\n\t            width: 255,\n\t            height: 5,\n\t            depth: 5\n\t          }),\n\t          _react2.default.createElement('materialResource', {\n\t            resourceId: 'poleMaterial'\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'object3D',\n\t          null,\n\t          this.state.subResource ? _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            this.state.subResource ? _react2.default.createElement('meshPhongMaterial', {\n\t              resourceId: 'poleMaterial',\n\t              color: 0x00ff00,\n\t              specular: 0x111111,\n\t              shininess: 100\n\t            }) : null,\n\t            _react2.default.createElement('sphereGeometry', { resourceId: 'boxGeometry',\n\t              radius: 20 })\n\t          ) : null,\n\t          this.state.boxPositions.map(function (position, i) {\n\t            return _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                key: i,\n\t                position: position,\n\t                receiveShadow: true,\n\t                castShadow: true\n\t              },\n\t              _react2.default.createElement('geometryResource', {\n\t                resourceId: 'boxGeometry'\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'poleMaterial'\n\t              })\n\t            );\n\t          })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Poles;\n\t}(_react2.default.Component);\n\t\n\texports.default = Poles;\n\n/***/ },\n/* 341 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"uniform sampler2D texture;\\r\\nvarying vec2 vUV;\\r\\n\\r\\nvec4 pack_depth( const in float depth ) {\\r\\n  const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\r\\n  const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\r\\n  vec4 res = fract( depth * bit_shift );\\r\\n  res -= res.xxyz * bit_mask;\\r\\n\\r\\n  return res;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n  vec4 pixel = texture2D( texture, vUV );\\r\\n\\r\\n  if ( pixel.a < 0.5 ) discard;\\r\\n\\r\\n  gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\\r\\n}\\r\\n\"\n\n/***/ },\n/* 342 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"varying vec2 vUV;\\r\\n\\r\\nvoid main() {\\r\\n  vUV = 0.75 * uv;\\r\\n\\r\\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\r\\n\\r\\n  gl_Position = projectionMatrix * mvPosition;\\r\\n}\\r\\n\"\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _parseInt = __webpack_require__(336);\n\t\n\tvar _parseInt2 = _interopRequireDefault(_parseInt);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\t\n\tvar ballSize = 60; // 40\n\t\n\tvar Sphere = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(Sphere, _React$Component);\n\t\n\t  function Sphere(props, context) {\n\t    (0, _classCallCheck3.default)(this, Sphere);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Sphere).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this.state = {\n\t      color: '0xaaaaaa'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(Sphere, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var visible = _props.visible;\n\t      var position = _props.position;\n\t\n\t      return _react2.default.createElement(\n\t        'mesh',\n\t        {\n\t          castShadow: true,\n\t          receiveShadow: true,\n\t          visible: visible,\n\t          position: position\n\t        },\n\t        _react2.default.createElement('sphereGeometry', {\n\t          radius: ballSize,\n\t          widthSegments: 20,\n\t          heightSegments: 20\n\t        }),\n\t        _react2.default.createElement('meshPhongMaterial', {\n\t          color: (0, _parseInt2.default)(this.state.color, 16)\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return Sphere;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  visible: PropTypes.bool.isRequired,\n\t  position: PropTypes.instanceOf(_three2.default.Vector3).isRequired\n\t}, _temp);\n\texports.default = Sphere;\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t * @author Eberhard Graether / http://egraether.com/\r\n\t * @author Mark Lundin  / http://mark-lundin.com\r\n\t * @author Simone Manini / http://daron1337.github.io\r\n\t * @author Luca Antiga  / http://lantiga.github.io\r\n\t */\n\t\n\tvar TrackballControls = function (_THREE$EventDispatche) {\n\t  (0, _inherits3.default)(TrackballControls, _THREE$EventDispatche);\n\t\n\t  function TrackballControls(object, domElement) {\n\t    (0, _classCallCheck3.default)(this, TrackballControls);\n\t\n\t    var _this2 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TrackballControls).call(this));\n\t\n\t    var _this = _this2;\n\t    var STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };\n\t\n\t    _this2.object = object;\n\t    _this2.domElement = domElement !== undefined ? domElement : document;\n\t\n\t    // API\n\t\n\t    _this2.enabled = true;\n\t\n\t    _this2.screen = { left: 0, top: 0, width: 0, height: 0 };\n\t\n\t    _this2.rotateSpeed = 1.0;\n\t    _this2.zoomSpeed = 1.2;\n\t    _this2.panSpeed = 0.3;\n\t\n\t    _this2.noRotate = false;\n\t    _this2.noZoom = false;\n\t    _this2.noPan = false;\n\t\n\t    _this2.staticMoving = false;\n\t    _this2.dynamicDampingFactor = 0.2;\n\t\n\t    _this2.minDistance = 0;\n\t    _this2.maxDistance = Infinity;\n\t\n\t    _this2.keys = [65 /* A */\n\t    , 83 /* S */\n\t    , 68 /* D */\n\t    ];\n\t\n\t    // internals\n\t\n\t    _this2.target = new _three2.default.Vector3();\n\t\n\t    var EPS = 0.000001;\n\t\n\t    var lastPosition = new _three2.default.Vector3();\n\t\n\t    var _state = STATE.NONE;\n\t    var _prevState = STATE.NONE;\n\t\n\t    var _eye = new _three2.default.Vector3();\n\t    var _movePrev = new _three2.default.Vector2();\n\t    var _moveCurr = new _three2.default.Vector2();\n\t    var _lastAxis = new _three2.default.Vector3();\n\t\n\t    var _lastAngle = 0;\n\t\n\t    var _zoomStart = new _three2.default.Vector2();\n\t    var _zoomEnd = new _three2.default.Vector2();\n\t\n\t    var _touchZoomDistanceStart = 0;\n\t    var _touchZoomDistanceEnd = 0;\n\t    var _panStart = new _three2.default.Vector2();\n\t    var _panEnd = new _three2.default.Vector2();\n\t\n\t    // for reset\n\t\n\t    _this2.target0 = _this2.target.clone();\n\t    _this2.position0 = _this2.object.position.clone();\n\t    _this2.up0 = _this2.object.up.clone();\n\t\n\t    // events\n\t\n\t    var changeEvent = { type: 'change' };\n\t    var startEvent = { type: 'start' };\n\t    var endEvent = { type: 'end' };\n\t\n\t    // methods\n\t\n\t    _this2.handleResize = function () {\n\t      if (_this2.domElement === document) {\n\t        _this2.screen.left = 0;\n\t        _this2.screen.top = 0;\n\t        _this2.screen.width = window.innerWidth;\n\t        _this2.screen.height = window.innerHeight;\n\t      } else {\n\t        var box = _this2.domElement.getBoundingClientRect();\n\t        // adjustments come from similar code in the jquery offset() function\n\t        var d = _this2.domElement.ownerDocument.documentElement;\n\t        _this2.screen.left = box.left + window.pageXOffset - d.clientLeft;\n\t        _this2.screen.top = box.top + window.pageYOffset - d.clientTop;\n\t        _this2.screen.width = box.width;\n\t        _this2.screen.height = box.height;\n\t      }\n\t    };\n\t\n\t    _this2.handleEvent = function (event) {\n\t      if (typeof _this2[event.type] === 'function') {\n\t        _this2[event.type](event);\n\t      }\n\t    };\n\t\n\t    var getMouseOnScreen = function wrapper() {\n\t      var vector = new _three2.default.Vector2();\n\t\n\t      return function (pageX, pageY) {\n\t        vector.set((pageX - _this.screen.left) / _this.screen.width, (pageY - _this.screen.top) / _this.screen.height);\n\t\n\t        return vector;\n\t      };\n\t    }();\n\t\n\t    var getMouseOnCircle = function wrapper() {\n\t      var vector = new _three2.default.Vector2();\n\t\n\t      return function (pageX, pageY) {\n\t        vector.set((pageX - _this.screen.width * 0.5 - _this.screen.left) / (_this.screen.width * 0.5), (_this.screen.height + 2 * (_this.screen.top - pageY)) / _this.screen.width);\n\t\n\t        // screen.width intentional\n\t        return vector;\n\t      };\n\t    }();\n\t\n\t    _this2.rotateCamera = function wrapper() {\n\t      var axis = new _three2.default.Vector3();\n\t      var quaternion = new _three2.default.Quaternion();\n\t      var eyeDirection = new _three2.default.Vector3();\n\t      var objectUpDirection = new _three2.default.Vector3();\n\t      var objectSidewaysDirection = new _three2.default.Vector3();\n\t      var moveDirection = new _three2.default.Vector3();\n\t\n\t      var angle = undefined;\n\t\n\t      return function rotateCamera() {\n\t        moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);\n\t        angle = moveDirection.length();\n\t\n\t        if (angle) {\n\t          _eye.copy(_this.object.position).sub(_this.target);\n\t\n\t          eyeDirection.copy(_eye).normalize();\n\t          objectUpDirection.copy(_this.object.up).normalize();\n\t          objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();\n\t\n\t          objectUpDirection.setLength(_moveCurr.y - _movePrev.y);\n\t          objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);\n\t\n\t          moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));\n\t\n\t          axis.crossVectors(moveDirection, _eye).normalize();\n\t\n\t          angle *= _this.rotateSpeed;\n\t          quaternion.setFromAxisAngle(axis, angle);\n\t\n\t          _eye.applyQuaternion(quaternion);\n\t          _this.object.up.applyQuaternion(quaternion);\n\t\n\t          _lastAxis.copy(axis);\n\t          _lastAngle = angle;\n\t        } else if (!_this.staticMoving && _lastAngle) {\n\t          _lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);\n\t          _eye.copy(_this.object.position).sub(_this.target);\n\t          quaternion.setFromAxisAngle(_lastAxis, _lastAngle);\n\t          _eye.applyQuaternion(quaternion);\n\t          _this.object.up.applyQuaternion(quaternion);\n\t        }\n\t\n\t        _movePrev.copy(_moveCurr);\n\t      };\n\t    }();\n\t\n\t    _this2.zoomCamera = function () {\n\t      var factor = undefined;\n\t\n\t      if (_state === STATE.TOUCH_ZOOM_PAN) {\n\t        factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;\n\t        _touchZoomDistanceStart = _touchZoomDistanceEnd;\n\t        _eye.multiplyScalar(factor);\n\t      } else {\n\t        factor = 1.0 + (_zoomEnd.y - _zoomStart.y) * _this.zoomSpeed;\n\t\n\t        if (factor !== 1.0 && factor > 0.0) {\n\t          _eye.multiplyScalar(factor);\n\t\n\t          if (_this.staticMoving) {\n\t            _zoomStart.copy(_zoomEnd);\n\t          } else {\n\t            _zoomStart.y += (_zoomEnd.y - _zoomStart.y) * _this2.dynamicDampingFactor;\n\t          }\n\t        }\n\t      }\n\t    };\n\t\n\t    _this2.panCamera = function wrapper() {\n\t      var mouseChange = new _three2.default.Vector2();\n\t      var objectUp = new _three2.default.Vector3();\n\t      var pan = new _three2.default.Vector3();\n\t\n\t      return function panCamera() {\n\t        mouseChange.copy(_panEnd).sub(_panStart);\n\t\n\t        if (mouseChange.lengthSq()) {\n\t          mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);\n\t\n\t          pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);\n\t          pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));\n\t\n\t          _this.object.position.add(pan);\n\t          _this.target.add(pan);\n\t\n\t          if (_this.staticMoving) {\n\t            _panStart.copy(_panEnd);\n\t          } else {\n\t            _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\n\t          }\n\t        }\n\t      };\n\t    }();\n\t\n\t    _this2.checkDistances = function () {\n\t      if (!_this.noZoom || !_this.noPan) {\n\t        if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {\n\t          _this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));\n\t          _zoomStart.copy(_zoomEnd);\n\t        }\n\t\n\t        if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {\n\t          _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));\n\t          _zoomStart.copy(_zoomEnd);\n\t        }\n\t      }\n\t    };\n\t\n\t    _this2.update = function () {\n\t      _eye.subVectors(_this.object.position, _this.target);\n\t\n\t      if (!_this.noRotate) {\n\t        _this.rotateCamera();\n\t      }\n\t\n\t      if (!_this.noZoom) {\n\t        _this.zoomCamera();\n\t      }\n\t\n\t      if (!_this.noPan) {\n\t        _this.panCamera();\n\t      }\n\t\n\t      _this.object.position.addVectors(_this.target, _eye);\n\t\n\t      _this.checkDistances();\n\t\n\t      _this.object.lookAt(_this.target);\n\t\n\t      if (lastPosition.distanceToSquared(_this.object.position) > EPS) {\n\t        _this.dispatchEvent(changeEvent);\n\t\n\t        lastPosition.copy(_this.object.position);\n\t      }\n\t    };\n\t\n\t    _this2.reset = function () {\n\t      _state = STATE.NONE;\n\t      _prevState = STATE.NONE;\n\t\n\t      _this.target.copy(_this.target0);\n\t      _this.object.position.copy(_this.position0);\n\t      _this.object.up.copy(_this.up0);\n\t\n\t      _eye.subVectors(_this.object.position, _this.target);\n\t\n\t      _this.object.lookAt(_this.target);\n\t\n\t      _this.dispatchEvent(changeEvent);\n\t\n\t      lastPosition.copy(_this.object.position);\n\t    };\n\t\n\t    // listeners\n\t\n\t    function keydown(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      window.removeEventListener('keydown', keydown);\n\t\n\t      _prevState = _state;\n\t\n\t      if (_state !== STATE.NONE) {\n\t        return;\n\t      }\n\t\n\t      if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {\n\t        _state = STATE.ROTATE;\n\t      } else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {\n\t        _state = STATE.ZOOM;\n\t      } else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {\n\t        _state = STATE.PAN;\n\t      }\n\t    }\n\t\n\t    function keyup() {\n\t      if (_this.enabled === false) return;\n\t\n\t      _state = _prevState;\n\t\n\t      window.addEventListener('keydown', keydown, false);\n\t    }\n\t\n\t    function mousemove(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      if (_state === STATE.ROTATE && !_this.noRotate) {\n\t        _movePrev.copy(_moveCurr);\n\t        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n\t      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\t        _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\t      } else if (_state === STATE.PAN && !_this.noPan) {\n\t        _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\n\t      }\n\t    }\n\t\n\t    function mouseup(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      _state = STATE.NONE;\n\t\n\t      document.removeEventListener('mousemove', mousemove);\n\t      document.removeEventListener('mouseup', mouseup);\n\t      _this.dispatchEvent(endEvent);\n\t    }\n\t\n\t    function mousedown(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      if (_state === STATE.NONE) {\n\t        _state = event.button;\n\t      }\n\t\n\t      if (_state === STATE.ROTATE && !_this.noRotate) {\n\t        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\n\t        _movePrev.copy(_moveCurr);\n\t      } else if (_state === STATE.ZOOM && !_this.noZoom) {\n\t        _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n\t        _zoomEnd.copy(_zoomStart);\n\t      } else if (_state === STATE.PAN && !_this.noPan) {\n\t        _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));\n\t        _panEnd.copy(_panStart);\n\t      }\n\t\n\t      document.addEventListener('mousemove', mousemove, false);\n\t      document.addEventListener('mouseup', mouseup, false);\n\t\n\t      _this.dispatchEvent(startEvent);\n\t    }\n\t\n\t    function mousewheel(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      var delta = 0;\n\t\n\t      if (event.wheelDelta) {\n\t        // WebKit / Opera / Explorer 9\n\t\n\t        delta = event.wheelDelta / 40;\n\t      } else if (event.detail) {\n\t        // Firefox\n\t\n\t        delta = -event.detail / 3;\n\t      }\n\t\n\t      _zoomStart.y += delta * 0.01;\n\t      _this.dispatchEvent(startEvent);\n\t      _this.dispatchEvent(endEvent);\n\t    }\n\t\n\t    function touchstart(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      switch (event.touches.length) {\n\t        case 1:\n\t          _state = STATE.TOUCH_ROTATE;\n\t          _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\t          _movePrev.copy(_moveCurr);\n\t          break;\n\t\n\t        case 2:\n\t          _state = STATE.TOUCH_ZOOM_PAN;\n\t          var dx = event.touches[0].pageX - event.touches[1].pageX;\n\t          var dy = event.touches[0].pageY - event.touches[1].pageY;\n\t          _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n\t\n\t          var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n\t          var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n\t          _panStart.copy(getMouseOnScreen(x, y));\n\t          _panEnd.copy(_panStart);\n\t          break;\n\t\n\t        default:\n\t          _state = STATE.NONE;\n\t\n\t      }\n\t      _this.dispatchEvent(startEvent);\n\t    }\n\t\n\t    function touchmove(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      switch (event.touches.length) {\n\t\n\t        case 1:\n\t          _movePrev.copy(_moveCurr);\n\t          _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\t          break;\n\t\n\t        case 2:\n\t          var dx = event.touches[0].pageX - event.touches[1].pageX;\n\t          var dy = event.touches[0].pageY - event.touches[1].pageY;\n\t          _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n\t\n\t          var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n\t          var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n\t          _panEnd.copy(getMouseOnScreen(x, y));\n\t          break;\n\t\n\t        default:\n\t          _state = STATE.NONE;\n\t      }\n\t    }\n\t\n\t    function touchend(event) {\n\t      if (_this.enabled === false) return;\n\t\n\t      switch (event.touches.length) {\n\t        default:\n\t          // no touches\n\t          break;\n\t        case 1:\n\t          _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n\t          _movePrev.copy(_moveCurr);\n\t          break;\n\t\n\t        case 2:\n\t          _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\n\t\n\t          var x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n\t          var y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n\t          _panEnd.copy(getMouseOnScreen(x, y));\n\t          _panStart.copy(_panEnd);\n\t          break;\n\t\n\t      }\n\t\n\t      _state = STATE.NONE;\n\t      _this.dispatchEvent(endEvent);\n\t    }\n\t\n\t    function contextmenu(event) {\n\t      event.preventDefault();\n\t    }\n\t\n\t    _this2.dispose = function () {\n\t      _this2.domElement.removeEventListener('contextmenu', contextmenu, false);\n\t      _this2.domElement.removeEventListener('mousedown', mousedown, false);\n\t      _this2.domElement.removeEventListener('mousewheel', mousewheel, false);\n\t      _this2.domElement.removeEventListener('DOMMouseScroll', mousewheel, false); // firefox\n\t\n\t      _this2.domElement.removeEventListener('touchstart', touchstart, false);\n\t      _this2.domElement.removeEventListener('touchend', touchend, false);\n\t      _this2.domElement.removeEventListener('touchmove', touchmove, false);\n\t\n\t      document.removeEventListener('mousemove', mousemove, false);\n\t      document.removeEventListener('mouseup', mouseup, false);\n\t\n\t      window.removeEventListener('keydown', keydown, false);\n\t      window.removeEventListener('keyup', keyup, false);\n\t    };\n\t\n\t    _this2.domElement.addEventListener('contextmenu', contextmenu, false);\n\t    _this2.domElement.addEventListener('mousedown', mousedown, false);\n\t    _this2.domElement.addEventListener('mousewheel', mousewheel, false);\n\t    _this2.domElement.addEventListener('DOMMouseScroll', mousewheel, false); // firefox\n\t\n\t    _this2.domElement.addEventListener('touchstart', touchstart, false);\n\t    _this2.domElement.addEventListener('touchend', touchend, false);\n\t    _this2.domElement.addEventListener('touchmove', touchmove, false);\n\t\n\t    window.addEventListener('keydown', keydown, false);\n\t    window.addEventListener('keyup', keyup, false);\n\t\n\t    _this2.handleResize();\n\t\n\t    // force an update at start\n\t    _this2.update();\n\t    return _this2;\n\t  }\n\t\n\t  return TrackballControls;\n\t}(_three2.default.EventDispatcher);\n\t\n\texports.default = TrackballControls;\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Geometries = function (_ExampleBase) {\n\t  (0, _inherits3.default)(Geometries, _ExampleBase);\n\t\n\t  function Geometries(props, context) {\n\t    (0, _classCallCheck3.default)(this, Geometries);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Geometries).call(this, props, context));\n\t\n\t    _this._onAnimate = function () {\n\t      _this._onAnimateInternal();\n\t    };\n\t\n\t    _this.directionalLightPosition = new _three2.default.Vector3(0, 1, 0);\n\t\n\t    _this.objectPositions = [new _three2.default.Vector3(-400, 0, 200), new _three2.default.Vector3(-200, 0, 200), new _three2.default.Vector3(0, 0, 200), new _three2.default.Vector3(200, 0, 200), new _three2.default.Vector3(-400, 0, 0), new _three2.default.Vector3(-200, 0, 0), new _three2.default.Vector3(0, 0, 0), new _three2.default.Vector3(200, 0, 0), new _three2.default.Vector3(400, 0, 0), new _three2.default.Vector3(-400, 0, -200), new _three2.default.Vector3(-200, 0, -200), new _three2.default.Vector3(0, 0, -200), new _three2.default.Vector3(200, 0, -200), new _three2.default.Vector3(400, 0, -200)];\n\t\n\t    _this.lathePoints = [];\n\t\n\t    for (var i = 0; i < 50; i++) {\n\t      _this.lathePoints.push(new _three2.default.Vector3(Math.sin(i * 0.2) * Math.sin(i * 0.1) * 15 + 50, 0, (i - 5) * 2));\n\t    }\n\t\n\t    _this.arrowDir = new _three2.default.Vector3(0, 1, 0);\n\t    _this.arrowOrigin = new _three2.default.Vector3(0, 0, 0);\n\t\n\t    _this.scenePosition = new _three2.default.Vector3(0, 0, 0);\n\t\n\t    _this.state = (0, _extends3.default)({}, _this.state, {\n\t      timer: Date.now() * 0.0001\n\t    });\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(Geometries, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      this.refs.container.appendChild(this.stats.domElement);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: '_onAnimateInternal',\n\t    value: function _onAnimateInternal() {\n\t      var timer = Date.now() * 0.0001;\n\t\n\t      this.setState({\n\t        timer: timer\n\t      });\n\t\n\t      this.stats.update();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var timer = this.state.timer;\n\t\n\t      var objectRotation = new _three2.default.Euler(timer * 5, timer * 2.5, 0);\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { ref: 'container' },\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            width: width,\n\t            height: height,\n\t            antialias: true,\n\t            pixelRatio: window.devicePixelRatio,\n\t            mainCamera: 'mainCamera',\n\t            onAnimate: this._onAnimate\n\t          },\n\t          _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            _react2.default.createElement('texture', {\n\t              resourceId: 'texture',\n\t              url: 'textures/UV_Grid_Sm.jpg',\n\t              wrapS: _three2.default.RepeatWrapping,\n\t              wrapT: _three2.default.RepeatWrapping,\n\t              anisotropy: 16\n\t            }),\n\t            _react2.default.createElement(\n\t              'meshLambertMaterial',\n\t              {\n\t                resourceId: 'material',\n\t                side: _three2.default.DoubleSide\n\t              },\n\t              _react2.default.createElement('textureResource', {\n\t                resourceId: 'texture'\n\t              })\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            null,\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              fov: 45,\n\t              aspect: width / height,\n\t              near: 1,\n\t              far: 2000,\n\t              lookAt: this.scenePosition,\n\t              name: 'mainCamera',\n\t              position: new _three2.default.Vector3(Math.cos(timer) * 800, 400, Math.sin(timer) * 800)\n\t            }),\n\t            _react2.default.createElement('ambientLight', {\n\t              color: 0x404040\n\t            }),\n\t            _react2.default.createElement('directionalLight', {\n\t              color: 0xffffff,\n\t              position: this.directionalLightPosition\n\t            }),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[0],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('sphereGeometry', {\n\t                radius: 75,\n\t                widthSegments: 20,\n\t                heightSegments: 10\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[1],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('icosahedronGeometry', {\n\t                radius: 75,\n\t                detail: 1\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[2],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('octahedronGeometry', {\n\t                radius: 75,\n\t                detail: 2\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[3],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('tetrahedronGeometry', {\n\t                radius: 75,\n\t                detail: 0\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[4],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('planeBufferGeometry', {\n\t                width: 100,\n\t                height: 100,\n\t                widthSegments: 4,\n\t                heightSegments: 4\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[5],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('boxGeometry', {\n\t                width: 100,\n\t                height: 100,\n\t                depth: 100,\n\t                widthSegments: 4,\n\t                heightSegments: 4,\n\t                depthSegments: 4\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[6],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('circleGeometry', {\n\t                radius: 50,\n\t                segments: 20,\n\t                thetaStart: 0,\n\t                thetaLength: Math.PI * 2\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[7],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('ringGeometry', {\n\t                innerRadius: 10,\n\t                outerRadius: 50,\n\t                thetaSegments: 20,\n\t                phiSegments: 5,\n\t                thetaStart: 0,\n\t                thetaLength: Math.PI * 2\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[8],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('cylinderGeometry', {\n\t                radiusTop: 25,\n\t                radiusBottom: 75,\n\t                height: 100,\n\t                radialSegments: 40,\n\t                heightSegments: 5\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[9],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('latheGeometry', {\n\t                points: this.lathePoints,\n\t                segments: 20\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[10],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('torusGeometry', {\n\t                radius: 50,\n\t                tube: 20,\n\t                radialSegments: 20,\n\t                tubularSegments: 20\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: this.objectPositions[11],\n\t                rotation: objectRotation\n\t              },\n\t              _react2.default.createElement('torusKnotGeometry', {\n\t                radius: 50,\n\t                tube: 10,\n\t                radialSegments: 50,\n\t                tubularSegments: 20\n\t              }),\n\t              _react2.default.createElement('materialResource', {\n\t                resourceId: 'material'\n\t              })\n\t            ),\n\t            _react2.default.createElement('axisHelper', {\n\t              position: this.objectPositions[12],\n\t              size: 50,\n\t              rotation: objectRotation\n\t            }),\n\t            _react2.default.createElement('arrowHelper', {\n\t              dir: this.arrowDir,\n\t              origin: this.arrowOrigin,\n\t              length: 50,\n\t              position: this.objectPositions[13],\n\t              rotation: objectRotation\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Geometries;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = Geometries;\n\n/***/ },\n/* 346 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp, _initialiseProps;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(323);\n\t\n\tvar _reactDom2 = _interopRequireDefault(_reactDom);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _Info = __webpack_require__(347);\n\t\n\tvar _Info2 = _interopRequireDefault(_Info);\n\t\n\tvar _PointCloud = __webpack_require__(348);\n\t\n\tvar _PointCloud2 = _interopRequireDefault(_PointCloud);\n\t\n\tvar _trackball = __webpack_require__(344);\n\t\n\tvar _trackball2 = _interopRequireDefault(_trackball);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar perspectiveCameraName = 'perspectiveCamera';\n\tvar orthographicCameraName = 'orthographicCamera';\n\tvar mainCameraName = 'mainCamera';\n\t\n\tvar perspectiveCameraRotation = new _three2.default.Euler(0, Math.PI, 0);\n\tvar orthographicCameraRotation = new _three2.default.Euler(0, Math.PI, 0);\n\t\n\tvar spherePosition = new _three2.default.Vector3(0, 0, 150);\n\t\n\tvar WebGLCameraExample = (_temp = _class = function (_ExampleBase) {\n\t  (0, _inherits3.default)(WebGLCameraExample, _ExampleBase);\n\t\n\t  function WebGLCameraExample(props, context) {\n\t    (0, _classCallCheck3.default)(this, WebGLCameraExample);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(WebGLCameraExample).call(this, props, context));\n\t\n\t    _initialiseProps.call(_this);\n\t\n\t    var r = Date.now() * 0.0005;\n\t\n\t    _this.state = (0, _extends3.default)({}, _this.state, {\n\t      meshPosition: new _three2.default.Vector3(Math.cos(r), Math.sin(r), Math.sin(r)).multiplyScalar(700),\n\t      childPosition: new _three2.default.Vector3(70 * Math.cos(2 * r), 150, 70 * Math.sin(r)),\n\t      activeCameraName: perspectiveCameraName,\n\t      paused: false,\n\t      mainCameraPosition: new _three2.default.Vector3(0, 0, 2500)\n\t    });\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(WebGLCameraExample, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      document.addEventListener('keydown', this._onKeyDown, false);\n\t\n\t      var controls = new _trackball2.default(this.refs.mainCamera, _reactDom2.default.findDOMNode(this.refs.react3));\n\t      controls.rotateSpeed = 1.0;\n\t      controls.zoomSpeed = 1.2;\n\t      controls.panSpeed = 0.8;\n\t\n\t      controls.noZoom = false;\n\t      controls.noPan = false;\n\t\n\t      controls.staticMoving = true;\n\t      controls.dynamicDampingFactor = 0.3;\n\t\n\t      controls.addEventListener('change', function () {\n\t        _this2.setState({\n\t          mainCameraPosition: _this2.refs.mainCamera.position\n\t        });\n\t      });\n\t\n\t      this.controls = controls;\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      document.removeEventListener('keydown', this._onKeyDown, false);\n\t\n\t      this.controls.dispose();\n\t      delete this.controls;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var _state = this.state;\n\t      var meshPosition = _state.meshPosition;\n\t      var childPosition = _state.childPosition;\n\t      var r = _state.r;\n\t\n\t      var aspectRatio = 0.5 * width / height;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(_Info2.default, {\n\t          pause: function pause() {\n\t            _this3.setState({\n\t              paused: !_this3.state.paused\n\t            });\n\t          },\n\t          frame: function frame() {\n\t            _this3.setState({\n\t              paused: false\n\t            }, function () {\n\t              _this3._onAnimate();\n\t              _this3.setState({\n\t                paused: true\n\t              });\n\t            });\n\t          }\n\t        }),\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            ref: 'react3',\n\t            width: width,\n\t            height: height,\n\t            antialias: true,\n\t            onAnimate: this._onAnimate\n\t          },\n\t          _react2.default.createElement('viewport', {\n\t            x: 0,\n\t            y: 0,\n\t            width: width / 2,\n\t            height: height,\n\t            cameraName: this.state.activeCameraName }),\n\t          _react2.default.createElement('viewport', {\n\t            x: width / 2,\n\t            y: 0,\n\t            width: width / 2,\n\t            height: height,\n\t            cameraName: mainCameraName }),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            null,\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              ref: 'mainCamera',\n\t              name: mainCameraName,\n\t              fov: 50,\n\t              aspect: aspectRatio,\n\t              near: 1,\n\t              far: 10000,\n\t              position: this.state.mainCameraPosition }),\n\t            _react2.default.createElement(\n\t              'object3D',\n\t              {\n\t                lookAt: meshPosition },\n\t              _react2.default.createElement('perspectiveCamera', {\n\t                name: perspectiveCameraName,\n\t                fov: 35 + 30 * Math.sin(0.5 * r),\n\t                aspect: aspectRatio,\n\t                near: 150,\n\t                far: meshPosition.length(),\n\t                rotation: perspectiveCameraRotation }),\n\t              _react2.default.createElement('orthographicCamera', {\n\t                name: orthographicCameraName,\n\t                left: 0.5 * width / -2,\n\t                right: 0.5 * width / 2,\n\t                top: height / 2,\n\t                bottom: height / -2,\n\t                near: 150,\n\t                far: meshPosition.length(),\n\t                rotation: orthographicCameraRotation }),\n\t              _react2.default.createElement(\n\t                'mesh',\n\t                {\n\t                  position: spherePosition },\n\t                _react2.default.createElement('sphereGeometry', {\n\t                  radius: 5,\n\t                  widthSegments: 16,\n\t                  heightSegments: 8 }),\n\t                _react2.default.createElement('meshBasicMaterial', {\n\t                  color: 0x0000ff,\n\t                  wireframe: true })\n\t              )\n\t            ),\n\t            _react2.default.createElement('cameraHelper', {\n\t              cameraName: this.state.activeCameraName }),\n\t            _react2.default.createElement(\n\t              'object3D',\n\t              {\n\t                position: meshPosition },\n\t              _react2.default.createElement(\n\t                'mesh',\n\t                null,\n\t                _react2.default.createElement('sphereGeometry', {\n\t                  radius: 100,\n\t                  widthSegments: 16,\n\t                  heightSegments: 8 }),\n\t                _react2.default.createElement('meshBasicMaterial', {\n\t                  color: 0xffffff,\n\t                  wireframe: true })\n\t              ),\n\t              _react2.default.createElement(\n\t                'mesh',\n\t                {\n\t                  position: childPosition },\n\t                _react2.default.createElement('sphereGeometry', {\n\t                  radius: 50,\n\t                  widthSegments: 16,\n\t                  heightSegments: 8 }),\n\t                _react2.default.createElement('meshBasicMaterial', {\n\t                  color: 0x00ff00,\n\t                  wireframe: true })\n\t              )\n\t            ),\n\t            _react2.default.createElement(_PointCloud2.default, null)\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return WebGLCameraExample;\n\t}(_ExampleBase3.default), _initialiseProps = function _initialiseProps() {\n\t  var _this4 = this;\n\t\n\t  this._onKeyDown = function (event) {\n\t    switch (event.keyCode) {\n\t      default:\n\t        break;\n\t      case 79:\n\t        // O\n\t        _this4.setState({\n\t          activeCameraName: orthographicCameraName\n\t        });\n\t        break;\n\t      case 80:\n\t        // P\n\t        _this4.setState({\n\t          activeCameraName: perspectiveCameraName\n\t        });\n\t\n\t        break;\n\t    }\n\t  };\n\t\n\t  this._onAnimate = function () {\n\t    _this4.controls.update();\n\t\n\t    if (_this4.state.paused) {\n\t      return;\n\t    }\n\t\n\t    var r = Date.now() * 0.0005;\n\t\n\t    _this4.setState({\n\t      r: r,\n\t      meshPosition: new _three2.default.Vector3(Math.cos(r), Math.sin(r), Math.sin(r)).multiplyScalar(700),\n\t      childPosition: new _three2.default.Vector3(70 * Math.cos(2 * r), 150, 70 * Math.sin(r))\n\t    });\n\t  };\n\t}, _temp);\n\texports.default = WebGLCameraExample;\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar Info = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(Info, _React$Component);\n\t\n\t  function Info() {\n\t    (0, _classCallCheck3.default)(this, Info);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Info).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(Info, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { style: {\n\t            position: 'absolute',\n\t            textAlign: 'center',\n\t            top: 0,\n\t            width: '100%',\n\t            padding: 5,\n\t            color: 'white',\n\t            zIndex: 100\n\t          } },\n\t        _react2.default.createElement(\n\t          'a',\n\t          { href: 'http://threejs.org', style: {\n\t              color: '#0080ff'\n\t            } },\n\t          'three.js'\n\t        ),\n\t        ' - cameras',\n\t        _react2.default.createElement('br', null),\n\t        _react2.default.createElement(\n\t          'b',\n\t          { style: {\n\t              color: 'lightgreen'\n\t            } },\n\t          'O'\n\t        ),\n\t        ' orthographic ',\n\t        _react2.default.createElement(\n\t          'b',\n\t          { style: {\n\t              color: 'lightgreen'\n\t            } },\n\t          'P'\n\t        ),\n\t        ' perspective ',\n\t        _react2.default.createElement('br', null),\n\t        _react2.default.createElement(\n\t          'button',\n\t          { onClick: this.props.pause },\n\t          'Pause'\n\t        ),\n\t        _react2.default.createElement(\n\t          'button',\n\t          { onClick: this.props.frame },\n\t          'Frame'\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Info;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  pause: PropTypes.func.isRequired,\n\t  frame: PropTypes.func.isRequired\n\t}, _temp);\n\texports.default = Info;\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PointCloud = function (_React$Component) {\n\t  (0, _inherits3.default)(PointCloud, _React$Component);\n\t  (0, _createClass3.default)(PointCloud, [{\n\t    key: 'shouldComponentUpdate',\n\t    value: function shouldComponentUpdate() {\n\t      return false;\n\t    }\n\t  }]);\n\t\n\t  function PointCloud(props, context) {\n\t    (0, _classCallCheck3.default)(this, PointCloud);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PointCloud).call(this, props, context));\n\t\n\t    _this.pointCloudVertices = [];\n\t\n\t    for (var i = 0; i < 10000; i++) {\n\t      var vertex = new _three2.default.Vector3();\n\t\n\t      vertex.x = _three2.default.Math.randFloatSpread(2000);\n\t      vertex.y = _three2.default.Math.randFloatSpread(2000);\n\t      vertex.z = _three2.default.Math.randFloatSpread(2000);\n\t\n\t      _this.pointCloudVertices.push(vertex);\n\t    }\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(PointCloud, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        'points',\n\t        null,\n\t        _react2.default.createElement('geometry', { vertices: this.pointCloudVertices }),\n\t        _react2.default.createElement('pointsMaterial', {\n\t          color: 0x888888\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return PointCloud;\n\t}(_react2.default.Component);\n\t\n\texports.default = PointCloud;\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _Resources = __webpack_require__(350);\n\t\n\tvar _Resources2 = _interopRequireDefault(_Resources);\n\t\n\tvar _Shapes = __webpack_require__(352);\n\t\n\tvar _Shapes2 = _interopRequireDefault(_Shapes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar GeometryShapes = function (_ExampleBase) {\n\t  (0, _inherits3.default)(GeometryShapes, _ExampleBase);\n\t\n\t  function GeometryShapes(props, context) {\n\t    (0, _classCallCheck3.default)(this, GeometryShapes);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(GeometryShapes).call(this, props, context));\n\t\n\t    _this._onDocumentMouseDown = function (event) {\n\t      event.preventDefault();\n\t\n\t      document.addEventListener('mousemove', _this._onDocumentMouseMove, false);\n\t      document.addEventListener('mouseup', _this._onDocumentMouseUp, false);\n\t      document.addEventListener('mouseout', _this._onDocumentMouseOut, false);\n\t\n\t      var width = _this.props.width;\n\t\n\t      var windowHalfX = width / 2;\n\t\n\t      _this.mouseXOnMouseDown = event.clientX - windowHalfX;\n\t      _this.targetRotationOnMouseDown = _this.targetRotation;\n\t    };\n\t\n\t    _this._onDocumentMouseMove = function (event) {\n\t      var width = _this.props.width;\n\t\n\t      var windowHalfX = width / 2;\n\t\n\t      _this.mouseX = event.clientX - windowHalfX;\n\t      _this.targetRotation = _this.targetRotationOnMouseDown + (_this.mouseX - _this.mouseXOnMouseDown) * 0.02;\n\t    };\n\t\n\t    _this._onDocumentMouseUp = function () {\n\t      document.removeEventListener('mousemove', _this._onDocumentMouseMove, false);\n\t      document.removeEventListener('mouseup', _this._onDocumentMouseUp, false);\n\t      document.removeEventListener('mouseout', _this._onDocumentMouseOut, false);\n\t    };\n\t\n\t    _this._onDocumentMouseOut = function () {\n\t      document.removeEventListener('mousemove', _this._onDocumentMouseMove, false);\n\t      document.removeEventListener('mouseup', _this._onDocumentMouseUp, false);\n\t      document.removeEventListener('mouseout', _this._onDocumentMouseOut, false);\n\t    };\n\t\n\t    _this._onDocumentTouchStart = function (event) {\n\t      if (event.touches.length === 1) {\n\t        event.preventDefault();\n\t\n\t        var width = _this.props.width;\n\t\n\t        var windowHalfX = width / 2;\n\t\n\t        _this.mouseXOnMouseDown = event.touches[0].pageX - windowHalfX;\n\t        _this.targetRotationOnMouseDown = _this.targetRotation;\n\t      }\n\t    };\n\t\n\t    _this._onDocumentTouchMove = function (event) {\n\t      if (event.touches.length === 1) {\n\t        event.preventDefault();\n\t\n\t        var width = _this.props.width;\n\t\n\t        var windowHalfX = width / 2;\n\t\n\t        _this.mouseX = event.touches[0].pageX - windowHalfX;\n\t        _this.targetRotation = _this.targetRotationOnMouseDown + (_this.mouseX - _this.mouseXOnMouseDown) * 0.05;\n\t      }\n\t    };\n\t\n\t    _this._onAnimate = function () {\n\t      _this._onAnimateInternal();\n\t    };\n\t\n\t    _this.cameraPosition = new _three2.default.Vector3(0, 150, 500);\n\t    _this.groupPosition = new _three2.default.Vector3(0, 50, 0);\n\t\n\t    _this.targetRotationOnMouseDown = 0;\n\t\n\t    _this.mouseX = 0;\n\t    _this.mouseXOnMouseDown = 0;\n\t    _this.targetRotation = 0;\n\t\n\t    _this.state = (0, _extends3.default)({}, _this.state, {\n\t      groupRotation: new _three2.default.Euler(0, 0, 0)\n\t    });\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(GeometryShapes, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.stats = new _stats2.default();\n\t\n\t      var container = this.refs.container;\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      container.appendChild(this.stats.domElement);\n\t\n\t      container.addEventListener('mousedown', this._onDocumentMouseDown, false);\n\t      container.addEventListener('touchstart', this._onDocumentTouchStart, false);\n\t      document.addEventListener('touchmove', this._onDocumentTouchMove, false);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      var container = this.refs.container;\n\t\n\t      container.removeEventListener('mousedown', this._onDocumentMouseDown, false);\n\t      container.removeEventListener('touchstart', this._onDocumentTouchStart, false);\n\t      document.removeEventListener('touchmove', this._onDocumentTouchMove, false);\n\t      document.removeEventListener('mousemove', this._onDocumentMouseMove, false);\n\t      document.removeEventListener('mouseup', this._onDocumentMouseUp, false);\n\t      document.removeEventListener('mouseout', this._onDocumentMouseOut, false);\n\t\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: '_onAnimateInternal',\n\t    value: function _onAnimateInternal() {\n\t      var groupRotationY = this.state.groupRotation.y;\n\t\n\t      if (Math.abs(groupRotationY - this.targetRotation) > 0.0001) {\n\t        this.setState({\n\t          groupRotation: new _three2.default.Euler(0, groupRotationY + (this.targetRotation - groupRotationY) * 0.05, 0)\n\t        });\n\t      }\n\t\n\t      this.stats.update();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var groupRotation = this.state.groupRotation;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { ref: 'container' },\n\t        _react2.default.createElement(\n\t          'div',\n\t          { style: {\n\t              color: 'black',\n\t              position: 'absolute',\n\t              top: '10px',\n\t              width: '100%',\n\t              textAlign: 'center'\n\t            } },\n\t          'Simple procedurally generated 3D shapes',\n\t          _react2.default.createElement('br', null),\n\t          'Drag to spin'\n\t        ),\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            width: width,\n\t            height: height,\n\t            antialias: true,\n\t            pixelRatio: window.devicePixelRatio,\n\t            mainCamera: 'mainCamera',\n\t            clearColor: 0xf0f0f0,\n\t            onAnimate: this._onAnimate\n\t          },\n\t          _react2.default.createElement(\n\t            'scene',\n\t            { ref: 'scene' },\n\t            _react2.default.createElement(\n\t              'perspectiveCamera',\n\t              {\n\t                name: 'mainCamera',\n\t                ref: 'camera',\n\t                fov: 50,\n\t                aspect: width / height,\n\t                near: 1,\n\t                far: 1000,\n\t\n\t                position: this.cameraPosition\n\t              },\n\t              _react2.default.createElement('pointLight', {\n\t                color: 0xffffff,\n\t                intensity: 0.8\n\t              })\n\t            ),\n\t            _react2.default.createElement(_Resources2.default, null),\n\t            _react2.default.createElement(\n\t              'group',\n\t              {\n\t                position: this.groupPosition,\n\t                rotation: groupRotation\n\t              },\n\t              _react2.default.createElement(_Shapes2.default, null)\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return GeometryShapes;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = GeometryShapes;\n\n/***/ },\n/* 350 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Rect = __webpack_require__(351);\n\t\n\tvar _Rect2 = _interopRequireDefault(_Rect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Resources = function (_React$Component) {\n\t  (0, _inherits3.default)(Resources, _React$Component);\n\t\n\t  function Resources() {\n\t    (0, _classCallCheck3.default)(this, Resources);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Resources).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(Resources, [{\n\t    key: 'shouldComponentUpdate',\n\t    value: function shouldComponentUpdate() {\n\t      return false;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      this.textureRepeat = new _three2.default.Vector2(0.008, 0.008);\n\t\n\t      var x = 0;\n\t      var y = 0;\n\t\n\t      var sqLength = 80;\n\t\n\t      var rectLength = 120;\n\t      var rectWidth = 40;\n\t\n\t      var californiaPts = [];\n\t\n\t      californiaPts.push(new _three2.default.Vector2(610, 320));\n\t      californiaPts.push(new _three2.default.Vector2(450, 300));\n\t      californiaPts.push(new _three2.default.Vector2(392, 392));\n\t      californiaPts.push(new _three2.default.Vector2(266, 438));\n\t      californiaPts.push(new _three2.default.Vector2(190, 570));\n\t      californiaPts.push(new _three2.default.Vector2(190, 600));\n\t      californiaPts.push(new _three2.default.Vector2(160, 620));\n\t      californiaPts.push(new _three2.default.Vector2(160, 650));\n\t      californiaPts.push(new _three2.default.Vector2(180, 640));\n\t      californiaPts.push(new _three2.default.Vector2(165, 680));\n\t      californiaPts.push(new _three2.default.Vector2(150, 670));\n\t      californiaPts.push(new _three2.default.Vector2(90, 737));\n\t      californiaPts.push(new _three2.default.Vector2(80, 795));\n\t      californiaPts.push(new _three2.default.Vector2(50, 835));\n\t      californiaPts.push(new _three2.default.Vector2(64, 870));\n\t      californiaPts.push(new _three2.default.Vector2(60, 945));\n\t      californiaPts.push(new _three2.default.Vector2(300, 945));\n\t      californiaPts.push(new _three2.default.Vector2(300, 743));\n\t      californiaPts.push(new _three2.default.Vector2(600, 473));\n\t      californiaPts.push(new _three2.default.Vector2(626, 425));\n\t      californiaPts.push(new _three2.default.Vector2(600, 370));\n\t      californiaPts.push(new _three2.default.Vector2(610, 320));\n\t\n\t      for (var i = 0; i < californiaPts.length; i++) {\n\t        californiaPts[i].multiplyScalar(0.25);\n\t      }this.californiaPts = californiaPts;\n\t\n\t      return _react2.default.createElement(\n\t        'resources',\n\t        null,\n\t        _react2.default.createElement('texture', {\n\t          resourceId: 'texture',\n\t          url: 'textures/UV_Grid_Sm.jpg',\n\t          wrapS: _three2.default.RepeatWrapping,\n\t          wrapT: _three2.default.RepeatWrapping,\n\t          repeat: this.textureRepeat\n\t        }),\n\t        _react2.default.createElement('meshBasicMaterial', {\n\t          resourceId: 'hoverMaterial',\n\t          color: 0xff0000,\n\t          side: _three2.default.DoubleSide\n\t        }),\n\t        _react2.default.createElement(\n\t          'meshPhongMaterial',\n\t          {\n\t            resourceId: 'phongMaterial',\n\t            side: _three2.default.DoubleSide\n\t          },\n\t          _react2.default.createElement('textureResource', {\n\t            resourceId: 'texture'\n\t          })\n\t        ),\n\t        _react2.default.createElement('shape', {\n\t          resourceId: 'california',\n\t          points: this.californiaPts\n\t        }),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          { resourceId: 'triangle' },\n\t          _react2.default.createElement('moveTo', {\n\t            x: 80,\n\t            y: 20\n\t          }),\n\t          _react2.default.createElement('lineTo', {\n\t            x: 40,\n\t            y: 80\n\t          }),\n\t          _react2.default.createElement('lineTo', {\n\t            x: 120,\n\t            y: 80\n\t          }),\n\t          _react2.default.createElement('lineTo', {\n\t            x: 80,\n\t            y: 20\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          { resourceId: 'heart' },\n\t          _react2.default.createElement('moveTo', {\n\t            x: x + 25,\n\t            y: y + 25\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x + 25,\n\t            cp1Y: y + 25,\n\t            cp2X: x + 20,\n\t            cp2Y: y,\n\t            aX: x,\n\t            aY: y\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x - 30,\n\t            cp1Y: y,\n\t            cp2X: x - 30,\n\t            cp2Y: y + 35,\n\t            aX: x - 30,\n\t            aY: y + 35\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x - 30,\n\t            cp1Y: y + 55,\n\t            cp2X: x - 10,\n\t            cp2Y: y + 77,\n\t            aX: x + 25,\n\t            aY: y + 95\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x + 60,\n\t            cp1Y: y + 77,\n\t            cp2X: x + 80,\n\t            cp2Y: y + 55,\n\t            aX: x + 80,\n\t            aY: y + 35\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x + 80,\n\t            cp1Y: y + 35,\n\t            cp2X: x + 80,\n\t            cp2Y: y,\n\t            aX: x + 50,\n\t            aY: y\n\t          }),\n\t          _react2.default.createElement('bezierCurveTo', {\n\t            cp1X: x + 35,\n\t            cp1Y: y,\n\t            cp2X: x + 25,\n\t            cp2Y: y + 25,\n\t            aX: x + 25,\n\t            aY: y + 25\n\t          })\n\t        ),\n\t        _react2.default.createElement(_Rect2.default, {\n\t          resourceId: 'square',\n\t          width: sqLength,\n\t          length: sqLength\n\t        }),\n\t        _react2.default.createElement(_Rect2.default, {\n\t          resourceId: 'rect',\n\t          width: rectWidth,\n\t          length: rectLength\n\t        }),\n\t        function roundedRect(rectX, rectY, roundedRectWidth, roundedRectHeight, radius) {\n\t          return _react2.default.createElement(\n\t            'shape',\n\t            { resourceId: 'roundedRect' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: rectX,\n\t              y: rectY + radius\n\t            }),\n\t            _react2.default.createElement('lineTo', {\n\t              x: rectX,\n\t              y: rectY + roundedRectHeight - radius\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: rectX,\n\t              cpY: rectY + roundedRectHeight,\n\t              x: rectX + radius,\n\t              y: rectY + roundedRectHeight\n\t            }),\n\t            _react2.default.createElement('lineTo', {\n\t              x: rectX + roundedRectWidth - radius,\n\t              y: rectY + roundedRectHeight\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: rectX + roundedRectWidth,\n\t              cpY: rectY + roundedRectHeight,\n\t              x: rectX + roundedRectWidth,\n\t              y: rectY + roundedRectHeight - radius\n\t            }),\n\t            _react2.default.createElement('lineTo', {\n\t              x: rectX + roundedRectWidth,\n\t              y: rectY + radius\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: rectX + roundedRectWidth,\n\t              cpY: rectY,\n\t              x: rectX + roundedRectWidth - radius,\n\t              y: rectY\n\t            }),\n\t            _react2.default.createElement('lineTo', {\n\t              x: rectX + radius,\n\t              y: rectY\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: rectX,\n\t              cpY: rectY,\n\t              x: rectX,\n\t              y: rectY + radius\n\t            })\n\t          );\n\t        }(0, 0, 50, 50, 20),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          {\n\t            resourceId: 'track'\n\t          },\n\t          _react2.default.createElement('moveTo', {\n\t            x: 40,\n\t            y: 40\n\t          }),\n\t          _react2.default.createElement('lineTo', {\n\t            x: 40,\n\t            y: 160\n\t          }),\n\t          _react2.default.createElement('absArc', {\n\t            x: 60,\n\t            y: 160,\n\t            radius: 20,\n\t            startAngle: Math.PI,\n\t            endAngle: 0,\n\t            clockwise: true\n\t          }),\n\t          _react2.default.createElement('lineTo', {\n\t            x: 80,\n\t            y: 40\n\t          }),\n\t          _react2.default.createElement('absArc', {\n\t            x: 60,\n\t            y: 40,\n\t            radius: 20,\n\t            startAngle: 2 * Math.PI,\n\t            endAngle: Math.PI,\n\t            clockwise: true\n\t          })\n\t        ),\n\t        function circleShape() {\n\t          var circleRadius = 40;\n\t\n\t          return _react2.default.createElement(\n\t            'shape',\n\t            { resourceId: 'circle' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: 0,\n\t              y: circleRadius\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: circleRadius,\n\t              cpY: circleRadius,\n\t              x: circleRadius,\n\t              y: 0\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: circleRadius,\n\t              cpY: -circleRadius,\n\t              x: 0,\n\t              y: -circleRadius\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: -circleRadius,\n\t              cpY: -circleRadius,\n\t              x: -circleRadius,\n\t              y: 0\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: -circleRadius,\n\t              cpY: circleRadius,\n\t              x: 0,\n\t              y: circleRadius\n\t            })\n\t          );\n\t        }(),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          { resourceId: 'arc' },\n\t          _react2.default.createElement('moveTo', {\n\t            x: 50,\n\t            y: 10\n\t          }),\n\t          _react2.default.createElement('absArc', {\n\t            x: 10,\n\t            y: 10,\n\t            radius: 40,\n\t            startAngle: 0,\n\t            endAngle: Math.PI * 2,\n\t            clockwise: false\n\t          }),\n\t          _react2.default.createElement(\n\t            'hole',\n\t            null,\n\t            _react2.default.createElement('moveTo', {\n\t              x: 20,\n\t              y: 10\n\t            }),\n\t            _react2.default.createElement('absArc', {\n\t              x: 10,\n\t              y: 10,\n\t              radius: 10,\n\t              startAngle: 0,\n\t              endAngle: Math.PI * 2,\n\t              clockwise: true\n\t            })\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          { resourceId: 'fish' },\n\t          _react2.default.createElement('moveTo', {\n\t            x: x,\n\t            y: y\n\t          }),\n\t          _react2.default.createElement('quadraticCurveTo', {\n\t            cpX: x + 50,\n\t            cpY: y - 80,\n\t            x: x + 90,\n\t            y: y - 10\n\t          }),\n\t          _react2.default.createElement('quadraticCurveTo', {\n\t            cpX: x + 100,\n\t            cpY: y - 10,\n\t            x: x + 115,\n\t            y: y - 40\n\t          }),\n\t          _react2.default.createElement('quadraticCurveTo', {\n\t            cpX: x + 115,\n\t            cpY: y,\n\t            x: x + 115,\n\t            y: y + 40\n\t          }),\n\t          _react2.default.createElement('quadraticCurveTo', {\n\t            cpX: x + 100,\n\t            cpY: y + 10,\n\t            x: x + 90,\n\t            y: y + 10\n\t          }),\n\t          _react2.default.createElement('quadraticCurveTo', {\n\t            cpX: x + 50,\n\t            cpY: y + 80,\n\t            x: x,\n\t            y: y\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'shape',\n\t          { resourceId: 'smiley' },\n\t          _react2.default.createElement('moveTo', {\n\t            x: 80,\n\t            y: 40\n\t          }),\n\t          _react2.default.createElement('absArc', {\n\t            x: 40,\n\t            y: 40,\n\t            radius: 40,\n\t            startAngle: 0,\n\t            endAngle: Math.PI * 2,\n\t            clockwise: false\n\t          }),\n\t          _react2.default.createElement(\n\t            'hole',\n\t            { key: 'eye1' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: 35,\n\t              y: 20\n\t            }),\n\t            _react2.default.createElement('absEllipse', {\n\t              x: 25,\n\t              y: 20,\n\t              xRadius: 10,\n\t              yRadius: 10,\n\t              startAngle: 0,\n\t              endAngle: Math.PI * 2,\n\t              clockwise: true\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'hole',\n\t            { key: 'eye2' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: 65,\n\t              y: 20\n\t            }),\n\t            _react2.default.createElement('absArc', {\n\t              x: 55,\n\t              y: 20,\n\t              radius: 10,\n\t              startAngle: 0,\n\t              endAngle: Math.PI * 2,\n\t              clockwise: true\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'hole',\n\t            { key: 'mouth' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: 20,\n\t              y: 40\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: 40,\n\t              cpY: 60,\n\t              x: 60,\n\t              y: 40\n\t            }),\n\t            _react2.default.createElement('bezierCurveTo', {\n\t              cp1X: 70,\n\t              cp1Y: 45,\n\t              cp2X: 70,\n\t              cp2Y: 50,\n\t              aX: 60,\n\t              aY: 60\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: 40,\n\t              cpY: 80,\n\t              x: 20,\n\t              y: 60\n\t            }),\n\t            _react2.default.createElement('quadraticCurveTo', {\n\t              cpX: 5,\n\t              cpY: 50,\n\t              x: 20,\n\t              y: 40\n\t            })\n\t          )\n\t        ),\n\t        function splineShape() {\n\t          var splinePoints = [];\n\t          splinePoints.push(new _three2.default.Vector2(70, 20));\n\t          splinePoints.push(new _three2.default.Vector2(80, 90));\n\t          splinePoints.push(new _three2.default.Vector2(-30, 70));\n\t          splinePoints.push(new _three2.default.Vector2(0, 0));\n\t\n\t          return _react2.default.createElement(\n\t            'shape',\n\t            { resourceId: 'spline' },\n\t            _react2.default.createElement('moveTo', {\n\t              x: 0,\n\t              y: 0\n\t            }),\n\t            _react2.default.createElement('splineThru', {\n\t              points: splinePoints\n\t            })\n\t          );\n\t        }()\n\t      );\n\t    }\n\t  }]);\n\t  return Resources;\n\t}(_react2.default.Component);\n\t\n\texports.default = Resources;\n\n/***/ },\n/* 351 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _ReactPropTypes = __webpack_require__(107);\n\t\n\tvar _ReactPropTypes2 = _interopRequireDefault(_ReactPropTypes);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction Rect(props) {\n\t  var width = props.width;\n\t  var length = props.length;\n\t  var resourceId = props.resourceId;\n\t\n\t  return _react2.default.createElement(\n\t    'shape',\n\t    { resourceId: resourceId },\n\t    _react2.default.createElement('moveTo', {\n\t      x: 0,\n\t      y: 0\n\t    }),\n\t    _react2.default.createElement('lineTo', {\n\t      x: 0,\n\t      y: width\n\t    }),\n\t    _react2.default.createElement('lineTo', {\n\t      x: length,\n\t      y: width\n\t    }),\n\t    _react2.default.createElement('lineTo', {\n\t      x: length,\n\t      y: 0\n\t    }),\n\t    _react2.default.createElement('lineTo', {\n\t      x: 0,\n\t      y: 0\n\t    })\n\t  );\n\t}\n\t\n\tRect.propTypes = {\n\t  width: _ReactPropTypes2.default.number.isRequired,\n\t  length: _ReactPropTypes2.default.number.isRequired,\n\t  resourceId: _ReactPropTypes2.default.string.isRequired\n\t};\n\t\n\texports.default = Rect;\n\n/***/ },\n/* 352 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Shape = __webpack_require__(353);\n\t\n\tvar _Shape2 = _interopRequireDefault(_Shape);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Shapes = function (_React$Component) {\n\t  (0, _inherits3.default)(Shapes, _React$Component);\n\t\n\t  function Shapes() {\n\t    (0, _classCallCheck3.default)(this, Shapes);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Shapes).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(Shapes, [{\n\t    key: 'shouldComponentUpdate',\n\t    value: function shouldComponentUpdate() {\n\t      return false;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        'group',\n\t        null,\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'california',\n\t          x: -300,\n\t          y: -100,\n\t          z: 0,\n\t          color: 0xf08000,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'triangle',\n\t          color: 0x8080f0,\n\t          x: -180,\n\t          y: 0,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'roundedRect',\n\t          x: -150,\n\t          y: 150,\n\t          z: 0,\n\t          color: 0x008000,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'track',\n\t          x: 200,\n\t          y: -100,\n\t          z: 0,\n\t          color: 0x008080,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'square',\n\t          color: 0x0040f0,\n\t          x: 150,\n\t          y: 100,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'heart',\n\t          color: 0xf00000,\n\t          x: 60,\n\t          y: 100,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: Math.PI,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'circle',\n\t          color: 0x00f000,\n\t          x: 120,\n\t          y: 250,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'fish',\n\t          color: 0x404040,\n\t          x: -60,\n\t          y: 200,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'smiley',\n\t          x: -200,\n\t          y: 250,\n\t          z: 0,\n\t          color: 0xf000f0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: Math.PI,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'arc',\n\t          color: 0x804000,\n\t          x: 150,\n\t          y: 0,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        }),\n\t        _react2.default.createElement(_Shape2.default, {\n\t          resourceId: 'spline',\n\t          color: 0x808080,\n\t          x: -50,\n\t          y: -100,\n\t          z: 0,\n\t          rx: 0,\n\t          ry: 0,\n\t          rz: 0,\n\t          s: 1\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return Shapes;\n\t}(_react2.default.Component);\n\t\n\texports.default = Shapes;\n\n/***/ },\n/* 353 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp2;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactPropTypes = __webpack_require__(107);\n\t\n\tvar _ReactPropTypes2 = _interopRequireDefault(_ReactPropTypes);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar extrudeSettings = {\n\t  amount: 8,\n\t  bevelEnabled: true,\n\t  bevelSegments: 2,\n\t  steps: 2,\n\t  bevelSize: 1,\n\t  bevelThickness: 1\n\t};\n\t\n\tvar Shape = (_temp2 = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(Shape, _React$Component);\n\t\n\t  function Shape() {\n\t    var _Object$getPrototypeO;\n\t\n\t    var _temp, _this, _ret;\n\t\n\t    (0, _classCallCheck3.default)(this, Shape);\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(Shape)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t\n\t  (0, _createClass3.default)(Shape, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var rx = _props.rx;\n\t      var ry = _props.ry;\n\t      var rz = _props.rz;\n\t      var s = _props.s;\n\t      var resourceId = _props.resourceId;\n\t      var color = _props.color;\n\t      var x = _props.x;\n\t      var y = _props.y;\n\t      var z = _props.z;\n\t\n\t      var rotation = new _three2.default.Euler(rx, ry, rz);\n\t      var scale = new _three2.default.Vector3(s, s, s);\n\t\n\t      return _react2.default.createElement(\n\t        'group',\n\t        null,\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            // flat shape with texture\n\t            position: new _three2.default.Vector3(x, y, z - 175),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'shape'\n\t          }),\n\t          _react2.default.createElement('materialResource', {\n\t            resourceId: 'phongMaterial'\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            // flat shape\n\t            position: new _three2.default.Vector3(x, y, z - 125),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'shape'\n\t          }),\n\t          _react2.default.createElement('meshPhongMaterial', {\n\t            color: color,\n\t            side: _three2.default.DoubleSide\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            // 3d shape\n\t            position: new _three2.default.Vector3(x, y, z - 75),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement(\n\t            'extrudeGeometry',\n\t            {\n\t              settings: extrudeSettings\n\t            },\n\t            _react2.default.createElement('shapeResource', {\n\t              resourceId: resourceId\n\t            })\n\t          ),\n\t          _react2.default.createElement('meshPhongMaterial', {\n\t            color: color\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'line',\n\t          {\n\t            // solid line\n\t            position: new _three2.default.Vector3(x, y, z - 25),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'points'\n\t          }),\n\t          _react2.default.createElement('lineBasicMaterial', {\n\t            color: color\n\t            // wireframe\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'points',\n\t          {\n\t            // vertices from real points\n\t            position: new _three2.default.Vector3(x, y, z + 25),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'points'\n\t          }),\n\t          _react2.default.createElement('pointsMaterial', {\n\t            color: color,\n\t            size: 4\n\t            // wireframe\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'line',\n\t          {\n\t            // line from equidistance sampled points\n\t            position: new _three2.default.Vector3(x, y, z + 75),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'spacedPoints',\n\t            divisions: 50\n\t          }),\n\t          _react2.default.createElement('lineBasicMaterial', {\n\t            color: color,\n\t            linewidth: 3\n\t            // wireframe\n\t          })\n\t        ),\n\t        _react2.default.createElement(\n\t          'points',\n\t          {\n\t            // equidistance sampled points\n\t            position: new _three2.default.Vector3(x, y, z + 125),\n\t            rotation: rotation,\n\t            scale: scale\n\t          },\n\t          _react2.default.createElement('shapeGeometryResource', {\n\t            resourceId: resourceId,\n\t            type: 'spacedPoints',\n\t            divisions: 50\n\t          }),\n\t          _react2.default.createElement('pointsMaterial', {\n\t            color: color,\n\t            size: 4\n\t            // wireframe\n\t          })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Shape;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  resourceId: _ReactPropTypes2.default.string.isRequired,\n\t  color: _ReactPropTypes2.default.any.isRequired,\n\t  x: _ReactPropTypes2.default.number.isRequired,\n\t  y: _ReactPropTypes2.default.number.isRequired,\n\t  z: _ReactPropTypes2.default.number.isRequired,\n\t  rx: _ReactPropTypes2.default.number.isRequired,\n\t  ry: _ReactPropTypes2.default.number.isRequired,\n\t  rz: _ReactPropTypes2.default.number.isRequired,\n\t  s: _ReactPropTypes2.default.number.isRequired\n\t}, _temp2);\n\texports.default = Shape;\n\n/***/ },\n/* 354 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _trackball = __webpack_require__(344);\n\t\n\tvar _trackball2 = _interopRequireDefault(_trackball);\n\t\n\tvar _MouseInput = __webpack_require__(355);\n\t\n\tvar _MouseInput2 = _interopRequireDefault(_MouseInput);\n\t\n\tvar _AllCubes = __webpack_require__(360);\n\t\n\tvar _AllCubes2 = _interopRequireDefault(_AllCubes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar DraggableCubes = function (_ExampleBase) {\n\t  (0, _inherits3.default)(DraggableCubes, _ExampleBase);\n\t\n\t  function DraggableCubes(props, context) {\n\t    (0, _classCallCheck3.default)(this, DraggableCubes);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DraggableCubes).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this._onAnimate = function () {\n\t      _this._onAnimateInternal();\n\t    };\n\t\n\t    _this._onCubesMounted = function (cubes) {\n\t      _this.cubes = cubes;\n\t    };\n\t\n\t    _this._onHoverStart = function () {\n\t      _this.setState({\n\t        hovering: true\n\t      });\n\t    };\n\t\n\t    _this._onHoverEnd = function () {\n\t      _this.setState({\n\t        hovering: false\n\t      });\n\t    };\n\t\n\t    _this._onDragStart = function () {\n\t      _this.setState({\n\t        dragging: true\n\t      });\n\t    };\n\t\n\t    _this._onDragEnd = function () {\n\t      _this.setState({\n\t        dragging: false\n\t      });\n\t    };\n\t\n\t    _this._onTrackballChange = function () {\n\t      _this.setState({\n\t        cameraPosition: _this.refs.camera.position.clone(),\n\t        cameraRotation: _this.refs.camera.rotation.clone()\n\t      });\n\t    };\n\t\n\t    _this.state = {\n\t      cameraPosition: new _three2.default.Vector3(0, 0, 1000),\n\t      cameraRotation: new _three2.default.Euler(),\n\t      mouseInput: null,\n\t      hovering: false,\n\t      dragging: false\n\t    };\n\t\n\t    _this._cursor = {\n\t      hovering: false,\n\t      dragging: false\n\t    };\n\t\n\t    _this.lightPosition = new _three2.default.Vector3(0, 500, 2000);\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(DraggableCubes, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      var _refs = this.refs;\n\t      var container = _refs.container;\n\t      var camera = _refs.camera;\n\t\n\t      container.appendChild(this.stats.domElement);\n\t\n\t      var controls = new _trackball2.default(camera);\n\t\n\t      controls.rotateSpeed = 1.0;\n\t      controls.zoomSpeed = 1.2;\n\t      controls.panSpeed = 0.8;\n\t      controls.noZoom = false;\n\t      controls.noPan = false;\n\t      controls.staticMoving = true;\n\t      controls.dynamicDampingFactor = 0.3;\n\t\n\t      this.controls = controls;\n\t\n\t      this.controls.addEventListener('change', this._onTrackballChange);\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate(newProps) {\n\t      var mouseInput = this.refs.mouseInput;\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t\n\t      if (width !== newProps.width || height !== newProps.height) {\n\t        mouseInput.containerResized();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      this.controls.removeEventListener('change', this._onTrackballChange);\n\t\n\t      this.controls.dispose();\n\t      delete this.controls;\n\t\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: '_onAnimateInternal',\n\t    value: function _onAnimateInternal() {\n\t      var _refs2 = this.refs;\n\t      var mouseInput = _refs2.mouseInput;\n\t      var camera = _refs2.camera;\n\t\n\t      if (!mouseInput.isReady()) {\n\t        var _refs3 = this.refs;\n\t        var scene = _refs3.scene;\n\t        var container = _refs3.container;\n\t\n\t        mouseInput.ready(scene, container, camera);\n\t        mouseInput.restrictIntersections(this.cubes);\n\t        mouseInput.setActive(false);\n\t      }\n\t\n\t      if (this.state.mouseInput !== mouseInput) {\n\t        this.setState({\n\t          mouseInput: mouseInput\n\t        });\n\t      }\n\t\n\t      if (this.state.camera !== camera) {\n\t        this.setState({\n\t          camera: camera\n\t        });\n\t      }\n\t\n\t      this.stats.update();\n\t      this.controls.update();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props2 = this.props;\n\t      var width = _props2.width;\n\t      var height = _props2.height;\n\t      var _state = this.state;\n\t      var cameraPosition = _state.cameraPosition;\n\t      var cameraRotation = _state.cameraRotation;\n\t      var mouseInput = _state.mouseInput;\n\t      var camera = _state.camera;\n\t      var hovering = _state.hovering;\n\t      var dragging = _state.dragging;\n\t\n\t      var style = {};\n\t\n\t      if (dragging) {\n\t        style.cursor = 'move';\n\t      } else if (hovering) {\n\t        style.cursor = 'pointer';\n\t      }\n\t\n\t      this._cursor.hovering = hovering;\n\t      this._cursor.dragging = dragging;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        {\n\t          ref: 'container',\n\t          style: style\n\t        },\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            width: width,\n\t            height: height,\n\t            antialias: true,\n\t            pixelRatio: window.devicePixelRatio,\n\t            mainCamera: 'mainCamera',\n\t            onAnimate: this._onAnimate,\n\t            sortObjects: false,\n\t            shadowMapEnabled: true,\n\t            shadowMapType: _three2.default.PCFShadowMap,\n\t            clearColor: 0xf0f0f0\n\t          },\n\t          _react2.default.createElement('module', {\n\t            ref: 'mouseInput',\n\t            descriptor: _MouseInput2.default\n\t          }),\n\t          _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            _react2.default.createElement('boxGeometry', {\n\t              resourceId: 'boxGeometry',\n\t\n\t              width: 40,\n\t              height: 40,\n\t              depth: 40\n\t            }),\n\t            _react2.default.createElement('meshBasicMaterial', {\n\t              resourceId: 'highlightMaterial',\n\t\n\t              color: 0xffff00,\n\t              wireframe: true\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            { ref: 'scene' },\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              fov: 70,\n\t              aspect: width / height,\n\t              near: 1,\n\t              far: 10000,\n\t              name: 'mainCamera',\n\t              ref: 'camera',\n\t              position: cameraPosition,\n\t              rotation: cameraRotation\n\t            }),\n\t            _react2.default.createElement('ambientLight', {\n\t              color: 0x505050\n\t            }),\n\t            _react2.default.createElement('spotLight', {\n\t              color: 0xffffff,\n\t              intensity: 1.5,\n\t              position: this.lightPosition,\n\t\n\t              castShadow: true,\n\t              shadowCameraNear: 200,\n\t              shadowCameraFar: 10000,\n\t              shadowCameraFov: 50,\n\t\n\t              shadowBias: -0.00022,\n\t\n\t              shadowMapWidth: 2048,\n\t              shadowMapHeight: 2048\n\t            }),\n\t            _react2.default.createElement(_AllCubes2.default, {\n\t              mouseInput: mouseInput,\n\t              camera: camera,\n\t\n\t              onCubesMounted: this._onCubesMounted,\n\t\n\t              onHoverStart: this._onHoverStart,\n\t              onHoverEnd: this._onHoverEnd,\n\t              onDragStart: this._onDragStart,\n\t              onDragEnd: this._onDragEnd,\n\t\n\t              cursor: this._cursor\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return DraggableCubes;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = DraggableCubes;\n\n/***/ },\n/* 355 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _keys = __webpack_require__(196);\n\t\n\tvar _keys2 = _interopRequireDefault(_keys);\n\t\n\tvar _values = __webpack_require__(356);\n\t\n\tvar _values2 = _interopRequireDefault(_values);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _get2 = __webpack_require__(226);\n\t\n\tvar _get3 = _interopRequireDefault(_get2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactUpdates = __webpack_require__(54);\n\t\n\tvar _ReactUpdates2 = _interopRequireDefault(_ReactUpdates);\n\t\n\tvar _SyntheticMouseEvent = __webpack_require__(86);\n\t\n\tvar _SyntheticMouseEvent2 = _interopRequireDefault(_SyntheticMouseEvent);\n\t\n\tvar _Module2 = __webpack_require__(218);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tvar _ReactPropTypes = __webpack_require__(107);\n\t\n\tvar _ReactPropTypes2 = _interopRequireDefault(_ReactPropTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar tempVector2 = new _three2.default.Vector2();\n\t\n\tvar listenerCallbackNames = {\n\t  mousedown: 'onMouseDown',\n\t  mouseup: 'onMouseUp'\n\t};\n\t\n\tvar mouseEvents = ['onMouseEnter', 'onMouseLeave', 'onMouseDown', 'onMouseUp', 'onClick'];\n\t\n\tvar boolProps = {\n\t  ignorePointerEvents: false\n\t};\n\t\n\tvar MouseInput = function (_Module) {\n\t  (0, _inherits3.default)(MouseInput, _Module);\n\t\n\t  function MouseInput() {\n\t    (0, _classCallCheck3.default)(this, MouseInput);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(MouseInput).call(this));\n\t\n\t    _this._onMouseDown = function (callbackName, mouseEvent) {\n\t      _ReactUpdates2.default.batchedUpdates(function () {\n\t        var _this$_intersectAndDi = _this._intersectAndDispatch(callbackName, mouseEvent);\n\t\n\t        var event = _this$_intersectAndDi.event;\n\t        var intersections = _this$_intersectAndDi.intersections;\n\t\n\t        if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n\t          _this._intersectionsForClick = null;\n\t        } else {\n\t          _this._intersectionsForClick = intersections;\n\t        }\n\t      });\n\t    };\n\t\n\t    _this._onMouseUp = function (callbackName, mouseEvent) {\n\t      _ReactUpdates2.default.batchedUpdates(function () {\n\t        var _this$_intersectAndDi2 = _this._intersectAndDispatch(callbackName, mouseEvent);\n\t\n\t        var event = _this$_intersectAndDi2.event;\n\t        var intersections = _this$_intersectAndDi2.intersections;\n\t\n\t        if (!(event.isDefaultPrevented() || event.isPropagationStopped())) {\n\t          if (_this._intersectionsForClick === null) {\n\t            return;\n\t          }\n\t\n\t          // intersect current intersections with the intersections for click\n\t          //   call xzibit ASAP we have a good one son\n\t          //     it wasn't that good\n\t\n\t          var intersectionUUIDMap = _this._intersectionsForClick.reduce(function (map, intersection) {\n\t            map[intersection.object.uuid] = intersection;\n\t\n\t            return map;\n\t          }, {});\n\t\n\t          for (var i = 0; i < intersections.length; ++i) {\n\t            if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n\t              return;\n\t            }\n\t\n\t            var intersection = intersections[i];\n\t\n\t            var object = intersection.object;\n\t\n\t            var uuid = object.uuid;\n\t\n\t            if (intersectionUUIDMap[uuid]) {\n\t              // oh boy oh boy here we go, we got a clicker\n\t\n\t              _reactThreeRenderer2.default.eventDispatcher.dispatchEvent(object, 'onClick', _this._createSyntheticMouseEvent('click', event), intersection);\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      _this._intersectionsForClick = null;\n\t    };\n\t\n\t    _this._isReady = false;\n\t    _this._active = true;\n\t    _this._restrictIntersections = false;\n\t    _this._objectsToIntersect = null;\n\t\n\t    _this._restrictedIntersectionRecursive = false;\n\t\n\t    _this._patchedDescriptors = [];\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(MouseInput, [{\n\t    key: 'setup',\n\t    value: function setup(react3RendererInstance) {\n\t      var _this2 = this;\n\t\n\t      (0, _get3.default)((0, _getPrototypeOf2.default)(MouseInput.prototype), 'setup', this).call(this, react3RendererInstance);\n\t\n\t      this._react3RendererInstance = react3RendererInstance;\n\t\n\t      var Object3DDescriptor = react3RendererInstance.threeElementDescriptors.object3D.constructor;\n\t\n\t      (0, _values2.default)(react3RendererInstance.threeElementDescriptors).forEach(function (elementDescriptor) {\n\t        if (elementDescriptor instanceof Object3DDescriptor) {\n\t          mouseEvents.forEach(function (eventName) {\n\t            elementDescriptor.hasEvent(eventName);\n\t          });\n\t\n\t          (0, _keys2.default)(boolProps).forEach(function (propName) {\n\t            elementDescriptor.hasProp(propName, {\n\t              type: _ReactPropTypes2.default.bool,\n\t              update: function update(threeObject, value, hasProp) {\n\t                if (hasProp) {\n\t                  threeObject.userData[propName] = value;\n\t                } else {\n\t                  threeObject.userData[propName] = boolProps[propName];\n\t                }\n\t              },\n\t\n\t              default: boolProps[propName]\n\t            });\n\t          });\n\t\n\t          _this2._patchedDescriptors.push(elementDescriptor);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'isReady',\n\t    value: function isReady() {\n\t      return this._isReady;\n\t    }\n\t  }, {\n\t    key: 'setActive',\n\t    value: function setActive(active) {\n\t      this._active = active;\n\t    }\n\t  }, {\n\t    key: 'restrictIntersections',\n\t    value: function restrictIntersections(objects) {\n\t      var recursive = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\t\n\t      this._restrictIntersections = true;\n\t      this._objectsToIntersect = objects;\n\t\n\t      this._restrictedIntersectionRecursive = recursive;\n\t    }\n\t  }, {\n\t    key: 'ready',\n\t    value: function ready(scene, container, camera) {\n\t      var _this3 = this;\n\t\n\t      this._isReady = true;\n\t\n\t      this._scene = scene;\n\t      this._container = container;\n\t      this._camera = camera;\n\t\n\t      this._raycaster = new _three2.default.Raycaster();\n\t      this._mouse = new _three2.default.Vector2();\n\t\n\t      this._onMouseMove = function (event) {\n\t        _this3._mouse.set(event.clientX, event.clientY);\n\t\n\t        if (!_this3._active) {\n\t          _this3._updateEnterLeave();\n\t        }\n\t      };\n\t\n\t      this._containerRect = this._container.getBoundingClientRect();\n\t\n\t      this._hoverObjectMap = {};\n\t\n\t      document.addEventListener('mousemove', this._onMouseMove, false);\n\t\n\t      this._intersectionsForClick = null;\n\t\n\t      this._caughtListenersCleanupFunctions = [];\n\t\n\t      (0, _keys2.default)(listenerCallbackNames).forEach(function (eventName) {\n\t        var boundListener = undefined;\n\t\n\t        var listenerCallbackName = listenerCallbackNames[eventName];\n\t        switch (eventName) {\n\t          case 'mousedown':\n\t            boundListener = _this3._onMouseDown.bind(_this3, listenerCallbackName);\n\t            break;\n\t          case 'mouseup':\n\t            boundListener = _this3._onMouseUp.bind(_this3, listenerCallbackName);\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t\n\t        if (boundListener) {\n\t          container.addEventListener(eventName, boundListener, true);\n\t\n\t          _this3._caughtListenersCleanupFunctions.push(function () {\n\t            container.removeEventListener(eventName, boundListener, true);\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: '_createSyntheticMouseEvent',\n\t    value: function _createSyntheticMouseEvent(eventType, prototype) {\n\t      return _SyntheticMouseEvent2.default.getPooled(null, null, new MouseEvent(eventType, prototype), prototype.target);\n\t    }\n\t  }, {\n\t    key: '_intersectAndDispatch',\n\t    value: function _intersectAndDispatch(callbackName, mouseEvent) {\n\t      var event = _SyntheticMouseEvent2.default.getPooled(null, null, mouseEvent, mouseEvent.target);\n\t\n\t      var intersections = this._getIntersections(tempVector2.set(event.clientX, event.clientY));\n\t\n\t      _ReactUpdates2.default.batchedUpdates(function () {\n\t        for (var i = 0; i < intersections.length; ++i) {\n\t          var intersection = intersections[i];\n\t\n\t          if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n\t            return;\n\t          }\n\t\n\t          var object = intersection.object;\n\t\n\t          _reactThreeRenderer2.default.eventDispatcher.dispatchEvent(object, callbackName, event, intersection);\n\t        }\n\t      });\n\t\n\t      return {\n\t        event: event,\n\t        intersections: intersections\n\t      };\n\t    }\n\t  }, {\n\t    key: '_getIntersections',\n\t    value: function _getIntersections(mouseCoords) {\n\t      var relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\n\t\n\t      this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\n\t\n\t      if (this._restrictIntersections) {\n\t        return this._raycaster.intersectObjects(this._objectsToIntersect, this._restrictedIntersectionRecursive);\n\t      }\n\t\n\t      return this._raycaster.intersectObject(this._scene, true);\n\t    }\n\t\n\t    // noinspection JSUnusedGlobalSymbols\n\t    /**\r\n\t     *\r\n\t     * @param {THREE.Vector2} mouseCoords usually an event's clientX and clientY\r\n\t     * @returns {THREE.Ray}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCameraRay',\n\t    value: function getCameraRay(mouseCoords) {\n\t      var relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\n\t\n\t      var originalRay = this._raycaster.ray.clone();\n\t\n\t      this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\n\t\n\t      var resultRay = this._raycaster.ray.clone();\n\t\n\t      this._raycaster.ray.copy(originalRay);\n\t\n\t      return resultRay;\n\t    }\n\t\n\t    // noinspection JSUnusedGlobalSymbols\n\t\n\t  }, {\n\t    key: 'intersectObject',\n\t    value: function intersectObject(mouseCoords, object) {\n\t      var recursive = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t\n\t      var relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\n\t\n\t      var originalRay = this._raycaster.ray.clone();\n\t\n\t      this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\n\t\n\t      var intersections = this._raycaster.intersectObject(object, recursive);\n\t\n\t      this._raycaster.ray.copy(originalRay);\n\t\n\t      return intersections;\n\t    }\n\t  }, {\n\t    key: 'containerResized',\n\t    value: function containerResized() {\n\t      this._containerRect = this._container.getBoundingClientRect();\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      if (!this._isReady) {\n\t        return;\n\t      }\n\t\n\t      if (this._active) {\n\t        this._updateEnterLeave();\n\t      }\n\t    }\n\t  }, {\n\t    key: '_updateEnterLeave',\n\t    value: function _updateEnterLeave() {\n\t      var intersections = this._getIntersections(this._mouse);\n\t\n\t      var hoverMapToUpdate = (0, _extends3.default)({}, this._hoverObjectMap);\n\t\n\t      var mouseEnterEvent = this._createSyntheticMouseEvent('mouseEnter', {\n\t        target: this._container,\n\t        clientX: this._mouse.x,\n\t        clientY: this._mouse.y\n\t      });\n\t\n\t      // find first intersection that does not ignore pointer events\n\t      for (var depth = 0; depth < intersections.length; ++depth) {\n\t        var intersection = intersections[depth];\n\t        var object = intersection.object;\n\t\n\t        if (object.userData && object.userData.ignorePointerEvents) {\n\t          continue;\n\t        }\n\t\n\t        var uuid = object.uuid;\n\t\n\t        if (this._hoverObjectMap[uuid]) {\n\t          delete hoverMapToUpdate[uuid];\n\t\n\t          // just update that intersection\n\t          this._hoverObjectMap[uuid].intersection = intersection;\n\t        } else {\n\t          this._hoverObjectMap[uuid] = {\n\t            object: object,\n\t            intersection: intersection\n\t          };\n\t\n\t          if (!(mouseEnterEvent.isDefaultPrevented() || mouseEnterEvent.isPropagationStopped())) {\n\t            _reactThreeRenderer2.default.eventDispatcher.dispatchEvent(object, 'onMouseEnter', mouseEnterEvent, intersection, depth);\n\t          }\n\t        }\n\t\n\t        // we have found the first solid intersection, don't go further\n\t        break;\n\t      }\n\t\n\t      var mouseLeaveEvent = this._createSyntheticMouseEvent('mouseLeave', {\n\t        target: this._container,\n\t        clientX: this._mouse.x,\n\t        clientY: this._mouse.y\n\t      });\n\t\n\t      // delete all unseen uuids in hover map\n\t      var unseenUUIDs = (0, _keys2.default)(hoverMapToUpdate);\n\t\n\t      for (var i = 0; i < unseenUUIDs.length; ++i) {\n\t        var uuid = unseenUUIDs[i];\n\t\n\t        if (!(mouseLeaveEvent.isDefaultPrevented() || mouseLeaveEvent.isPropagationStopped())) {\n\t          _reactThreeRenderer2.default.eventDispatcher.dispatchEvent(this._hoverObjectMap[uuid].object, 'onMouseLeave', mouseLeaveEvent);\n\t        }\n\t\n\t        delete this._hoverObjectMap[uuid];\n\t      }\n\t    }\n\t  }, {\n\t    key: '_getRelativeMouseCoords',\n\t    value: function _getRelativeMouseCoords(screenMouseCoords) {\n\t      var containerRect = this._containerRect;\n\t\n\t      var relativeMouseCoords = screenMouseCoords.clone().sub(tempVector2.set(containerRect.left, containerRect.top)).divide(tempVector2.set(containerRect.width, containerRect.height));\n\t\n\t      // mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t      // mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\t\n\t      relativeMouseCoords.x = relativeMouseCoords.x * 2 - 1;\n\t      relativeMouseCoords.y = -relativeMouseCoords.y * 2 + 1;\n\t\n\t      return relativeMouseCoords;\n\t    }\n\t  }, {\n\t    key: 'dispose',\n\t    value: function dispose() {\n\t      document.removeEventListener('mousemove', this._onMouseMove, false);\n\t\n\t      this._caughtListenersCleanupFunctions.forEach(function (cleanupFunction) {\n\t        return cleanupFunction();\n\t      });\n\t      delete this._caughtListenersCleanupFunctions;\n\t\n\t      delete this._onMouseMove;\n\t\n\t      this._patchedDescriptors.forEach(function (elementDescriptor) {\n\t        var allProps = (0, _keys2.default)(boolProps).concat(mouseEvents);\n\t\n\t        allProps.forEach(function (propName) {\n\t          elementDescriptor.removeProp(propName);\n\t        });\n\t      });\n\t    }\n\t  }]);\n\t  return MouseInput;\n\t}(_Module3.default);\n\t\n\texports.default = MouseInput;\n\n/***/ },\n/* 356 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(357), __esModule: true };\n\n/***/ },\n/* 357 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(358);\n\tmodule.exports = __webpack_require__(162).Object.values;\n\n/***/ },\n/* 358 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// http://goo.gl/XkBrjD\n\tvar $export = __webpack_require__(160)\n\t  , $values = __webpack_require__(359)(false);\n\t\n\t$export($export.S, 'Object', {\n\t  values: function values(it){\n\t    return $values(it);\n\t  }\n\t});\n\n/***/ },\n/* 359 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar $         = __webpack_require__(170)\n\t  , toIObject = __webpack_require__(181)\n\t  , isEnum    = $.isEnum;\n\tmodule.exports = function(isEntries){\n\t  return function(it){\n\t    var O      = toIObject(it)\n\t      , keys   = $.getKeys(O)\n\t      , length = keys.length\n\t      , i      = 0\n\t      , result = []\n\t      , key;\n\t    while(length > i)if(isEnum.call(O, key = keys[i++])){\n\t      result.push(isEntries ? [key, O[key]] : O[key]);\n\t    } return result;\n\t  };\n\t};\n\n/***/ },\n/* 360 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _DraggableCube = __webpack_require__(361);\n\t\n\tvar _DraggableCube2 = _interopRequireDefault(_DraggableCube);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tvar _MouseInput = __webpack_require__(355);\n\t\n\tvar _MouseInput2 = _interopRequireDefault(_MouseInput);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar AllCubes = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(AllCubes, _React$Component);\n\t\n\t  function AllCubes(props, context) {\n\t    (0, _classCallCheck3.default)(this, AllCubes);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AllCubes).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this._onCubeCreate = function (index, cube) {\n\t      _this.cubes[index] = cube;\n\t    };\n\t\n\t    _this._onCubeMouseEnter = function () {\n\t      if (_this._hoveredCubes === 0) {\n\t        var onHoverStart = _this.props.onHoverStart;\n\t\n\t        onHoverStart();\n\t      }\n\t\n\t      _this._hoveredCubes++;\n\t    };\n\t\n\t    _this._onCubeMouseLeave = function () {\n\t      _this._hoveredCubes--;\n\t\n\t      if (_this._hoveredCubes === 0) {\n\t        var onHoverEnd = _this.props.onHoverEnd;\n\t\n\t        onHoverEnd();\n\t      }\n\t    };\n\t\n\t    _this._onCubeDragStart = function () {\n\t      if (_this._draggingCubes === 0) {\n\t        var onDragStart = _this.props.onDragStart;\n\t\n\t        onDragStart();\n\t      }\n\t\n\t      _this._draggingCubes++;\n\t    };\n\t\n\t    _this._onCubeDragEnd = function () {\n\t      _this._draggingCubes--;\n\t\n\t      if (_this._draggingCubes === 0) {\n\t        var onDragEnd = _this.props.onDragEnd;\n\t\n\t        onDragEnd();\n\t      }\n\t    };\n\t\n\t    var cubePositions = [];\n\t    cubePositions.length = 200;\n\t\n\t    for (var i = 0; i < 200; ++i) {\n\t      cubePositions[i] = new _three2.default.Vector3(Math.random() * 1000 - 500, Math.random() * 600 - 300, Math.random() * 800 - 400);\n\t    }\n\t\n\t    var cubes = [];\n\t    cubes.length = cubePositions.length;\n\t    _this.cubes = cubes;\n\t\n\t    _this.cubePositions = cubePositions;\n\t\n\t    _this.mouse = new _three2.default.Vector2();\n\t    _this.offset = new _three2.default.Vector3();\n\t    _this.selected = null;\n\t\n\t    _this._hoveredCubes = 0;\n\t    _this._draggingCubes = 0;\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(AllCubes, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var onCubesMounted = this.props.onCubesMounted;\n\t\n\t      onCubesMounted(this.cubes);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var _props = this.props;\n\t      var mouseInput = _props.mouseInput;\n\t      var camera = _props.camera;\n\t      var cursor = _props.cursor;\n\t\n\t      return _react2.default.createElement(\n\t        'group',\n\t        null,\n\t        this.cubePositions.map(function (cubePosition, index) {\n\t          return _react2.default.createElement(_DraggableCube2.default, {\n\t            key: index,\n\t\n\t            mouseInput: mouseInput,\n\t            camera: camera,\n\t\n\t            initialPosition: cubePosition,\n\t            onCreate: _this2._onCubeCreate.bind(_this2, index),\n\t            onMouseEnter: _this2._onCubeMouseEnter,\n\t            onMouseLeave: _this2._onCubeMouseLeave,\n\t            onDragStart: _this2._onCubeDragStart,\n\t            onDragEnd: _this2._onCubeDragEnd,\n\t\n\t            cursor: cursor\n\t          });\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return AllCubes;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  mouseInput: PropTypes.instanceOf(_MouseInput2.default),\n\t  camera: PropTypes.instanceOf(_three2.default.PerspectiveCamera),\n\t\n\t  onCubesMounted: PropTypes.func.isRequired,\n\t  onHoverStart: PropTypes.func.isRequired,\n\t  onHoverEnd: PropTypes.func.isRequired,\n\t  onDragStart: PropTypes.func.isRequired,\n\t  onDragEnd: PropTypes.func.isRequired,\n\t\n\t  cursor: PropTypes.any\n\t}, _temp);\n\texports.default = AllCubes;\n\n/***/ },\n/* 361 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ReactComponentWithPureRenderMixin = __webpack_require__(328);\n\t\n\tvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\t\n\tvar _MouseInput = __webpack_require__(355);\n\t\n\tvar _MouseInput2 = _interopRequireDefault(_MouseInput);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\t\n\t// shared plane for dragging purposes\n\t// it's good to share because you can drag only one cube at a time\n\tvar dragPlane = new _three2.default.Plane();\n\t\n\tvar backVector = new _three2.default.Vector3(0, 0, -1);\n\t\n\tvar DraggableCube = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(DraggableCube, _React$Component);\n\t\n\t  function DraggableCube(props, context) {\n\t    (0, _classCallCheck3.default)(this, DraggableCube);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DraggableCube).call(this, props, context));\n\t\n\t    _this.shouldComponentUpdate = _ReactComponentWithPureRenderMixin2.default.shouldComponentUpdate;\n\t\n\t    _this._onMouseEnter = function () {\n\t      _this.setState({\n\t        'hovered': true\n\t      });\n\t\n\t      var onMouseEnter = _this.props.onMouseEnter;\n\t\n\t      onMouseEnter();\n\t    };\n\t\n\t    _this._onMouseDown = function (event, intersection) {\n\t      event.preventDefault();\n\t      event.stopPropagation();\n\t\n\t      var position = _this.state.position;\n\t      var _this$props = _this.props;\n\t      var onDragStart = _this$props.onDragStart;\n\t      var camera = _this$props.camera;\n\t\n\t      dragPlane.setFromNormalAndCoplanarPoint(backVector.clone().applyQuaternion(camera.quaternion), intersection.point);\n\t\n\t      _this._offset = intersection.point.clone().sub(position);\n\t\n\t      document.addEventListener('mouseup', _this._onDocumentMouseUp);\n\t      document.addEventListener('mousemove', _this._onDocumentMouseMove);\n\t\n\t      _this.setState({\n\t        'pressed': true\n\t      });\n\t\n\t      onDragStart();\n\t    };\n\t\n\t    _this._onDocumentMouseMove = function (event) {\n\t      event.preventDefault();\n\t\n\t      var mouseInput = _this.props.mouseInput;\n\t\n\t      var ray = mouseInput.getCameraRay(new _three2.default.Vector2(event.clientX, event.clientY));\n\t\n\t      var intersection = dragPlane.intersectLine(new _three2.default.Line3(ray.origin, ray.origin.clone().add(ray.direction.clone().multiplyScalar(10000))));\n\t      if (intersection) {\n\t        _this.setState({\n\t          position: intersection.sub(_this._offset)\n\t        });\n\t      }\n\t    };\n\t\n\t    _this._onDocumentMouseUp = function (event) {\n\t      event.preventDefault();\n\t\n\t      document.removeEventListener('mouseup', _this._onDocumentMouseUp);\n\t      document.removeEventListener('mousemove', _this._onDocumentMouseMove);\n\t\n\t      var onDragEnd = _this.props.onDragEnd;\n\t\n\t      onDragEnd();\n\t\n\t      _this.setState({\n\t        pressed: false\n\t      });\n\t    };\n\t\n\t    _this._onMouseLeave = function () {\n\t      if (_this.state.hovered) {\n\t        _this.setState({\n\t          'hovered': false\n\t        });\n\t      }\n\t\n\t      var onMouseLeave = _this.props.onMouseLeave;\n\t\n\t      onMouseLeave();\n\t    };\n\t\n\t    _this._ref = function (mesh) {\n\t      var onCreate = _this.props.onCreate;\n\t\n\t      onCreate(mesh);\n\t    };\n\t\n\t    _this.rotation = new _three2.default.Euler(Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI);\n\t\n\t    _this.scale = new _three2.default.Vector3(Math.random() * 2 + 1, Math.random() * 2 + 1, Math.random() * 2 + 1);\n\t\n\t    _this.color = new _three2.default.Color(Math.random() * 0xffffff);\n\t\n\t    var hsl = _this.color.getHSL();\n\t\n\t    hsl.s = Math.min(1, hsl.s * 1.1);\n\t    hsl.l = Math.min(1, hsl.l * 1.1);\n\t\n\t    var h = hsl.h;\n\t    var s = hsl.s;\n\t    var l = hsl.l;\n\t\n\t    _this.hoverColor = new _three2.default.Color().setHSL(h, s, l);\n\t    _this.pressedColor = 0xff0000;\n\t\n\t    var initialPosition = props.initialPosition;\n\t\n\t    _this.state = {\n\t      hovered: false,\n\t      pressed: false,\n\t      position: initialPosition\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(DraggableCube, [{\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      document.removeEventListener('mouseup', this._onDocumentMouseUp);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var rotation = this.rotation;\n\t      var scale = this.scale;\n\t      var dragging = this.props.cursor.dragging;\n\t      var _state = this.state;\n\t      var hovered = _state.hovered;\n\t      var pressed = _state.pressed;\n\t      var position = _state.position;\n\t\n\t      var color = undefined;\n\t\n\t      var hoverHighlight = hovered && !dragging;\n\t      if (pressed) {\n\t        color = this.pressedColor;\n\t      } else if (hoverHighlight) {\n\t        color = this.hoverColor;\n\t      } else {\n\t        color = this.color;\n\t      }\n\t\n\t      return _react2.default.createElement(\n\t        'group',\n\t        {\n\t          position: position,\n\t          rotation: rotation,\n\t          scale: scale\n\t        },\n\t        _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            castShadow: true,\n\t            receiveShadow: true,\n\t\n\t            onMouseEnter: this._onMouseEnter,\n\t            onMouseDown: this._onMouseDown,\n\t            onMouseLeave: this._onMouseLeave,\n\t\n\t            ref: this._ref\n\t          },\n\t          _react2.default.createElement('geometryResource', {\n\t            resourceId: 'boxGeometry'\n\t          }),\n\t          _react2.default.createElement('meshLambertMaterial', {\n\t            color: color\n\t          })\n\t        ),\n\t        hoverHighlight ? _react2.default.createElement(\n\t          'mesh',\n\t          {\n\t            ignorePointerEvents: true\n\t          },\n\t          _react2.default.createElement('geometryResource', {\n\t            resourceId: 'boxGeometry'\n\t          }),\n\t          _react2.default.createElement('materialResource', {\n\t            resourceId: 'highlightMaterial'\n\t          })\n\t        ) : null\n\t      );\n\t    }\n\t  }]);\n\t  return DraggableCube;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  initialPosition: PropTypes.instanceOf(_three2.default.Vector3).isRequired,\n\t\n\t  mouseInput: PropTypes.instanceOf(_MouseInput2.default),\n\t  camera: PropTypes.instanceOf(_three2.default.PerspectiveCamera),\n\t\n\t  onCreate: PropTypes.func.isRequired,\n\t\n\t  onMouseEnter: PropTypes.func.isRequired,\n\t  onMouseLeave: PropTypes.func.isRequired,\n\t  onDragStart: PropTypes.func.isRequired,\n\t  onDragEnd: PropTypes.func.isRequired,\n\t\n\t  cursor: PropTypes.any\n\t}, _temp);\n\texports.default = DraggableCube;\n\n/***/ },\n/* 362 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Cannon = __webpack_require__(363);\n\t\n\tvar _Cannon2 = _interopRequireDefault(_Cannon);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Physics = function (_ExampleBase) {\n\t  (0, _inherits3.default)(Physics, _ExampleBase);\n\t\n\t  function Physics(props, context) {\n\t    (0, _classCallCheck3.default)(this, Physics);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Physics).call(this, props, context));\n\t\n\t    var world = new _Cannon2.default.World();\n\t    _this.world = world;\n\t    world.gravity.set(0, 0, 0);\n\t    world.broadphase = new _Cannon2.default.NaiveBroadphase();\n\t    world.solver.iterations = 10;\n\t    var shape = new _Cannon2.default.Box(new _Cannon2.default.Vec3(1, 1, 1));\n\t    var mass = 1;\n\t    var body = new _Cannon2.default.Body({\n\t      mass: mass\n\t    });\n\t    body.addShape(shape);\n\t    body.angularVelocity.set(0, 10, 0);\n\t    body.angularDamping = 0.5;\n\t    world.addBody(body);\n\t\n\t    _this._onMouseDown = function () {\n\t      body.angularVelocity.y += 5;\n\t    };\n\t\n\t    _this.cameraPosition = new _three2.default.Vector3(0, 0, 5);\n\t\n\t    var timeStep = 1 / 60;\n\t\n\t    var updatePhysics = function updatePhysics() {\n\t      // Step the physics world\n\t      world.step(timeStep);\n\t      // Copy coordinates from Cannon.js to Three.js\n\t\n\t      _this.setState({\n\t        // need to call new THREE.* in order to ensure an update goes through\n\t        meshPosition: new _three2.default.Vector3().copy(body.position),\n\t        meshQuaternion: new _three2.default.Quaternion().copy(body.quaternion)\n\t      });\n\t    };\n\t\n\t    _this._onAnimate = function () {\n\t      updatePhysics();\n\t\n\t      _this.stats.update();\n\t    };\n\t\n\t    _this.state = {\n\t      meshPosition: new _three2.default.Vector3(),\n\t      meshQuaternion: new _three2.default.Quaternion()\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(Physics, [{\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      delete this.world;\n\t\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var container = this.refs.container;\n\t\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      container.appendChild(this.stats.domElement);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var _state = this.state;\n\t      var meshPosition = _state.meshPosition;\n\t      var meshQuaternion = _state.meshQuaternion;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        {\n\t          ref: 'container',\n\t\n\t          onMouseDown: this._onMouseDown\n\t        },\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            antialias: true,\n\t            mainCamera: 'camera',\n\t            width: width,\n\t            height: height,\n\t\n\t            onAnimate: this._onAnimate\n\t          },\n\t          _react2.default.createElement(\n\t            'scene',\n\t            null,\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              name: 'camera',\n\t              fov: 75,\n\t              aspect: width / height,\n\t              near: 1,\n\t              far: 100,\n\t\n\t              position: this.cameraPosition\n\t            }),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                position: meshPosition,\n\t                quaternion: meshQuaternion\n\t              },\n\t              _react2.default.createElement('boxGeometry', {\n\t                width: 2,\n\t                height: 2,\n\t                depth: 2\n\t              }),\n\t              _react2.default.createElement('meshBasicMaterial', {\n\t                color: 0x00ff00,\n\t                wireframe: true\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return Physics;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = Physics;\n\n/***/ },\n/* 363 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Export classes\n\tmodule.exports = {\n\t    version :                       __webpack_require__(364).version,\n\t\n\t    AABB :                          __webpack_require__(365),\n\t    ArrayCollisionMatrix :          __webpack_require__(369),\n\t    Body :                          __webpack_require__(370),\n\t    Box :                           __webpack_require__(375),\n\t    Broadphase :                    __webpack_require__(378),\n\t    Constraint :                    __webpack_require__(380),\n\t    ContactEquation :               __webpack_require__(381),\n\t    Narrowphase :                   __webpack_require__(384),\n\t    ConeTwistConstraint :           __webpack_require__(391),\n\t    ContactMaterial :               __webpack_require__(395),\n\t    ConvexPolyhedron :              __webpack_require__(376),\n\t    Cylinder :                      __webpack_require__(396),\n\t    DistanceConstraint :            __webpack_require__(397),\n\t    Equation :                      __webpack_require__(382),\n\t    EventTarget :                   __webpack_require__(371),\n\t    FrictionEquation :              __webpack_require__(390),\n\t    GSSolver :                      __webpack_require__(398),\n\t    GridBroadphase :                __webpack_require__(399),\n\t    Heightfield :                   __webpack_require__(400),\n\t    HingeConstraint :               __webpack_require__(401),\n\t    LockConstraint :                __webpack_require__(403),\n\t    Mat3 :                          __webpack_require__(367),\n\t    Material :                      __webpack_require__(374),\n\t    NaiveBroadphase :               __webpack_require__(404),\n\t    ObjectCollisionMatrix :         __webpack_require__(405),\n\t    Pool :                          __webpack_require__(389),\n\t    Particle :                      __webpack_require__(406),\n\t    Plane :                         __webpack_require__(379),\n\t    PointToPointConstraint :        __webpack_require__(392),\n\t    Quaternion :                    __webpack_require__(373),\n\t    Ray :                           __webpack_require__(385),\n\t    RaycastVehicle :                __webpack_require__(407),\n\t    RaycastResult :                 __webpack_require__(386),\n\t    RigidVehicle :                  __webpack_require__(409),\n\t    RotationalEquation :            __webpack_require__(394),\n\t    RotationalMotorEquation :       __webpack_require__(402),\n\t    SAPBroadphase :                 __webpack_require__(411),\n\t    SPHSystem :                     __webpack_require__(412),\n\t    Shape :                         __webpack_require__(372),\n\t    Solver :                        __webpack_require__(387),\n\t    Sphere :                        __webpack_require__(410),\n\t    SplitSolver :                   __webpack_require__(413),\n\t    Spring :                        __webpack_require__(414),\n\t    Trimesh :                       __webpack_require__(415),\n\t    Vec3 :                          __webpack_require__(366),\n\t    Vec3Pool :                      __webpack_require__(388),\n\t    World :                         __webpack_require__(417),\n\t};\n\n\n/***/ },\n/* 364 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"_args\": [\n\t\t\t[\n\t\t\t\t\"cannon@^0.6.2\",\n\t\t\t\t\"C:\\\\Users\\\\Firtina\\\\work\\\\react-three-renderer-example\"\n\t\t\t]\n\t\t],\n\t\t\"_from\": \"cannon@>=0.6.2 <0.7.0\",\n\t\t\"_id\": \"cannon@0.6.2\",\n\t\t\"_inCache\": true,\n\t\t\"_installable\": true,\n\t\t\"_location\": \"/cannon\",\n\t\t\"_npmUser\": {\n\t\t\t\"email\": \"schteppe@gmail.com\",\n\t\t\t\"name\": \"schteppe\"\n\t\t},\n\t\t\"_npmVersion\": \"1.4.3\",\n\t\t\"_phantomChildren\": {},\n\t\t\"_requested\": {\n\t\t\t\"name\": \"cannon\",\n\t\t\t\"raw\": \"cannon@^0.6.2\",\n\t\t\t\"rawSpec\": \"^0.6.2\",\n\t\t\t\"scope\": null,\n\t\t\t\"spec\": \">=0.6.2 <0.7.0\",\n\t\t\t\"type\": \"range\"\n\t\t},\n\t\t\"_requiredBy\": [\n\t\t\t\"/\"\n\t\t],\n\t\t\"_resolved\": \"https://registry.npmjs.org/cannon/-/cannon-0.6.2.tgz\",\n\t\t\"_shasum\": \"1e7bc72dd5841982f3c104c2bc578bfa4fb1c572\",\n\t\t\"_shrinkwrap\": null,\n\t\t\"_spec\": \"cannon@^0.6.2\",\n\t\t\"_where\": \"C:\\\\Users\\\\Firtina\\\\work\\\\react-three-renderer-example\",\n\t\t\"author\": {\n\t\t\t\"email\": \"schteppe@gmail.com\",\n\t\t\t\"name\": \"Stefan Hedman\",\n\t\t\t\"url\": \"http://steffe.se\"\n\t\t},\n\t\t\"bugs\": {\n\t\t\t\"url\": \"https://github.com/schteppe/cannon.js/issues\"\n\t\t},\n\t\t\"dependencies\": {},\n\t\t\"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n\t\t\"devDependencies\": {\n\t\t\t\"browserify\": \"*\",\n\t\t\t\"grunt\": \"~0.4.0\",\n\t\t\t\"grunt-browserify\": \"^2.1.4\",\n\t\t\t\"grunt-contrib-concat\": \"~0.1.3\",\n\t\t\t\"grunt-contrib-jshint\": \"~0.1.1\",\n\t\t\t\"grunt-contrib-nodeunit\": \"^0.4.1\",\n\t\t\t\"grunt-contrib-uglify\": \"^0.5.1\",\n\t\t\t\"grunt-contrib-yuidoc\": \"^0.5.2\",\n\t\t\t\"jshint\": \"latest\",\n\t\t\t\"nodeunit\": \"^0.9.0\",\n\t\t\t\"uglify-js\": \"latest\"\n\t\t},\n\t\t\"directories\": {},\n\t\t\"dist\": {\n\t\t\t\"shasum\": \"1e7bc72dd5841982f3c104c2bc578bfa4fb1c572\",\n\t\t\t\"tarball\": \"http://registry.npmjs.org/cannon/-/cannon-0.6.2.tgz\"\n\t\t},\n\t\t\"engines\": {\n\t\t\t\"node\": \"*\"\n\t\t},\n\t\t\"homepage\": \"https://github.com/schteppe/cannon.js\",\n\t\t\"keywords\": [\n\t\t\t\"3d\",\n\t\t\t\"cannon\",\n\t\t\t\"cannon.js\",\n\t\t\t\"engine\",\n\t\t\t\"physics\"\n\t\t],\n\t\t\"licenses\": [\n\t\t\t{\n\t\t\t\t\"type\": \"MIT\"\n\t\t\t}\n\t\t],\n\t\t\"main\": \"./build/cannon.js\",\n\t\t\"maintainers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"schteppe\",\n\t\t\t\t\"email\": \"schteppe@gmail.com\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"cannon\",\n\t\t\"optionalDependencies\": {},\n\t\t\"readme\": \"ERROR: No README data found!\",\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"git+https://github.com/schteppe/cannon.js.git\"\n\t\t},\n\t\t\"version\": \"0.6.2\"\n\t};\n\n/***/ },\n/* 365 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Vec3 = __webpack_require__(366);\n\tvar Utils = __webpack_require__(368);\n\t\n\tmodule.exports = AABB;\n\t\n\t/**\n\t * Axis aligned bounding box class.\n\t * @class AABB\n\t * @constructor\n\t * @param {Object} [options]\n\t * @param {Vec3}   [options.upperBound]\n\t * @param {Vec3}   [options.lowerBound]\n\t */\n\tfunction AABB(options){\n\t    options = options || {};\n\t\n\t    /**\n\t     * The lower bound of the bounding box.\n\t     * @property lowerBound\n\t     * @type {Vec3}\n\t     */\n\t    this.lowerBound = new Vec3();\n\t    if(options.lowerBound){\n\t        this.lowerBound.copy(options.lowerBound);\n\t    }\n\t\n\t    /**\n\t     * The upper bound of the bounding box.\n\t     * @property upperBound\n\t     * @type {Vec3}\n\t     */\n\t    this.upperBound = new Vec3();\n\t    if(options.upperBound){\n\t        this.upperBound.copy(options.upperBound);\n\t    }\n\t}\n\t\n\tvar tmp = new Vec3();\n\t\n\t/**\n\t * Set the AABB bounds from a set of points.\n\t * @method setFromPoints\n\t * @param {Array} points An array of Vec3's.\n\t * @param {Vec3} position\n\t * @param {Quaternion} quaternion\n\t * @param {number} skinSize\n\t * @return {AABB} The self object\n\t */\n\tAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n\t    var l = this.lowerBound,\n\t        u = this.upperBound,\n\t        q = quaternion;\n\t\n\t    // Set to the first point\n\t    l.copy(points[0]);\n\t    if(q){\n\t        q.vmult(l, l);\n\t    }\n\t    u.copy(l);\n\t\n\t    for(var i = 1; i<points.length; i++){\n\t        var p = points[i];\n\t\n\t        if(q){\n\t            q.vmult(p, tmp);\n\t            p = tmp;\n\t        }\n\t\n\t        if(p.x > u.x){ u.x = p.x; }\n\t        if(p.x < l.x){ l.x = p.x; }\n\t        if(p.y > u.y){ u.y = p.y; }\n\t        if(p.y < l.y){ l.y = p.y; }\n\t        if(p.z > u.z){ u.z = p.z; }\n\t        if(p.z < l.z){ l.z = p.z; }\n\t    }\n\t\n\t    // Add offset\n\t    if (position) {\n\t        position.vadd(l, l);\n\t        position.vadd(u, u);\n\t    }\n\t\n\t    if(skinSize){\n\t        l.x -= skinSize;\n\t        l.y -= skinSize;\n\t        l.z -= skinSize;\n\t        u.x += skinSize;\n\t        u.y += skinSize;\n\t        u.z += skinSize;\n\t    }\n\t\n\t    return this;\n\t};\n\t\n\t/**\n\t * Copy bounds from an AABB to this AABB\n\t * @method copy\n\t * @param  {AABB} aabb Source to copy from\n\t * @return {AABB} The this object, for chainability\n\t */\n\tAABB.prototype.copy = function(aabb){\n\t    this.lowerBound.copy(aabb.lowerBound);\n\t    this.upperBound.copy(aabb.upperBound);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Clone an AABB\n\t * @method clone\n\t */\n\tAABB.prototype.clone = function(){\n\t    return new AABB().copy(this);\n\t};\n\t\n\t/**\n\t * Extend this AABB so that it covers the given AABB too.\n\t * @method extend\n\t * @param  {AABB} aabb\n\t */\n\tAABB.prototype.extend = function(aabb){\n\t    // Extend lower bound\n\t    var l = aabb.lowerBound.x;\n\t    if(this.lowerBound.x > l){\n\t        this.lowerBound.x = l;\n\t    }\n\t\n\t    // Upper\n\t    var u = aabb.upperBound.x;\n\t    if(this.upperBound.x < u){\n\t        this.upperBound.x = u;\n\t    }\n\t\n\t    // Extend lower bound\n\t    var l = aabb.lowerBound.y;\n\t    if(this.lowerBound.y > l){\n\t        this.lowerBound.y = l;\n\t    }\n\t\n\t    // Upper\n\t    var u = aabb.upperBound.y;\n\t    if(this.upperBound.y < u){\n\t        this.upperBound.y = u;\n\t    }\n\t\n\t    // Extend lower bound\n\t    var l = aabb.lowerBound.z;\n\t    if(this.lowerBound.z > l){\n\t        this.lowerBound.z = l;\n\t    }\n\t\n\t    // Upper\n\t    var u = aabb.upperBound.z;\n\t    if(this.upperBound.z < u){\n\t        this.upperBound.z = u;\n\t    }\n\t};\n\t\n\t/**\n\t * Returns true if the given AABB overlaps this AABB.\n\t * @method overlaps\n\t * @param  {AABB} aabb\n\t * @return {Boolean}\n\t */\n\tAABB.prototype.overlaps = function(aabb){\n\t    var l1 = this.lowerBound,\n\t        u1 = this.upperBound,\n\t        l2 = aabb.lowerBound,\n\t        u2 = aabb.upperBound;\n\t\n\t    //      l2        u2\n\t    //      |---------|\n\t    // |--------|\n\t    // l1       u1\n\t\n\t    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n\t           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n\t           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n\t};\n\t\n\t/**\n\t * Returns true if the given AABB is fully contained in this AABB.\n\t * @method contains\n\t * @param {AABB} aabb\n\t * @return {Boolean}\n\t */\n\tAABB.prototype.contains = function(aabb){\n\t    var l1 = this.lowerBound,\n\t        u1 = this.upperBound,\n\t        l2 = aabb.lowerBound,\n\t        u2 = aabb.upperBound;\n\t\n\t    //      l2        u2\n\t    //      |---------|\n\t    // |---------------|\n\t    // l1              u1\n\t\n\t    return (\n\t        (l1.x <= l2.x && u1.x >= u2.x) &&\n\t        (l1.y <= l2.y && u1.y >= u2.y) &&\n\t        (l1.z <= l2.z && u1.z >= u2.z)\n\t    );\n\t};\n\t\n\t/**\n\t * @method getCorners\n\t * @param {Vec3} a\n\t * @param {Vec3} b\n\t * @param {Vec3} c\n\t * @param {Vec3} d\n\t * @param {Vec3} e\n\t * @param {Vec3} f\n\t * @param {Vec3} g\n\t * @param {Vec3} h\n\t */\n\tAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n\t    var l = this.lowerBound,\n\t        u = this.upperBound;\n\t\n\t    a.copy(l);\n\t    b.set( u.x, l.y, l.z );\n\t    c.set( u.x, u.y, l.z );\n\t    d.set( l.x, u.y, u.z );\n\t    e.set( u.x, l.y, l.z );\n\t    f.set( l.x, u.y, l.z );\n\t    g.set( l.x, l.y, u.z );\n\t    h.copy(u);\n\t};\n\t\n\tvar transformIntoFrame_corners = [\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3()\n\t];\n\t\n\t/**\n\t * Get the representation of an AABB in another frame.\n\t * @method toLocalFrame\n\t * @param  {Transform} frame\n\t * @param  {AABB} target\n\t * @return {AABB} The \"target\" AABB object.\n\t */\n\tAABB.prototype.toLocalFrame = function(frame, target){\n\t\n\t    var corners = transformIntoFrame_corners;\n\t    var a = corners[0];\n\t    var b = corners[1];\n\t    var c = corners[2];\n\t    var d = corners[3];\n\t    var e = corners[4];\n\t    var f = corners[5];\n\t    var g = corners[6];\n\t    var h = corners[7];\n\t\n\t    // Get corners in current frame\n\t    this.getCorners(a, b, c, d, e, f, g, h);\n\t\n\t    // Transform them to new local frame\n\t    for(var i=0; i !== 8; i++){\n\t        var corner = corners[i];\n\t        frame.pointToLocal(corner, corner);\n\t    }\n\t\n\t    return target.setFromPoints(corners);\n\t};\n\t\n\t/**\n\t * Get the representation of an AABB in the global frame.\n\t * @method toWorldFrame\n\t * @param  {Transform} frame\n\t * @param  {AABB} target\n\t * @return {AABB} The \"target\" AABB object.\n\t */\n\tAABB.prototype.toWorldFrame = function(frame, target){\n\t\n\t    var corners = transformIntoFrame_corners;\n\t    var a = corners[0];\n\t    var b = corners[1];\n\t    var c = corners[2];\n\t    var d = corners[3];\n\t    var e = corners[4];\n\t    var f = corners[5];\n\t    var g = corners[6];\n\t    var h = corners[7];\n\t\n\t    // Get corners in current frame\n\t    this.getCorners(a, b, c, d, e, f, g, h);\n\t\n\t    // Transform them to new local frame\n\t    for(var i=0; i !== 8; i++){\n\t        var corner = corners[i];\n\t        frame.pointToWorld(corner, corner);\n\t    }\n\t\n\t    return target.setFromPoints(corners);\n\t};\n\n\n/***/ },\n/* 366 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Vec3;\n\t\n\tvar Mat3 = __webpack_require__(367);\n\t\n\t/**\n\t * 3-dimensional vector\n\t * @class Vec3\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} z\n\t * @author schteppe\n\t * @example\n\t *     var v = new Vec3(1, 2, 3);\n\t *     console.log('x=' + v.x); // x=1\n\t */\n\tfunction Vec3(x,y,z){\n\t    /**\n\t     * @property x\n\t     * @type {Number}\n\t     */\n\t    this.x = x||0.0;\n\t\n\t    /**\n\t     * @property y\n\t     * @type {Number}\n\t     */\n\t    this.y = y||0.0;\n\t\n\t    /**\n\t     * @property z\n\t     * @type {Number}\n\t     */\n\t    this.z = z||0.0;\n\t}\n\t\n\t/**\n\t * @static\n\t * @property {Vec3} ZERO\n\t */\n\tVec3.ZERO = new Vec3(0, 0, 0);\n\t\n\t/**\n\t * @static\n\t * @property {Vec3} UNIT_X\n\t */\n\tVec3.UNIT_X = new Vec3(1, 0, 0);\n\t\n\t/**\n\t * @static\n\t * @property {Vec3} UNIT_Y\n\t */\n\tVec3.UNIT_Y = new Vec3(0, 1, 0);\n\t\n\t/**\n\t * @static\n\t * @property {Vec3} UNIT_Z\n\t */\n\tVec3.UNIT_Z = new Vec3(0, 0, 1);\n\t\n\t/**\n\t * Vector cross product\n\t * @method cross\n\t * @param {Vec3} v\n\t * @param {Vec3} target Optional. Target to save in.\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.cross = function(v,target){\n\t    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n\t    target = target || new Vec3();\n\t\n\t    target.x = (y * vz) - (z * vy);\n\t    target.y = (z * vx) - (x * vz);\n\t    target.z = (x * vy) - (y * vx);\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Set the vectors' 3 elements\n\t * @method set\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} z\n\t * @return Vec3\n\t */\n\tVec3.prototype.set = function(x,y,z){\n\t    this.x = x;\n\t    this.y = y;\n\t    this.z = z;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Set all components of the vector to zero.\n\t * @method setZero\n\t */\n\tVec3.prototype.setZero = function(){\n\t    this.x = this.y = this.z = 0;\n\t};\n\t\n\t/**\n\t * Vector addition\n\t * @method vadd\n\t * @param {Vec3} v\n\t * @param {Vec3} target Optional.\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.vadd = function(v,target){\n\t    if(target){\n\t        target.x = v.x + this.x;\n\t        target.y = v.y + this.y;\n\t        target.z = v.z + this.z;\n\t    } else {\n\t        return new Vec3(this.x + v.x,\n\t                               this.y + v.y,\n\t                               this.z + v.z);\n\t    }\n\t};\n\t\n\t/**\n\t * Vector subtraction\n\t * @method vsub\n\t * @param {Vec3} v\n\t * @param {Vec3} target Optional. Target to save in.\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.vsub = function(v,target){\n\t    if(target){\n\t        target.x = this.x - v.x;\n\t        target.y = this.y - v.y;\n\t        target.z = this.z - v.z;\n\t    } else {\n\t        return new Vec3(this.x-v.x,\n\t                               this.y-v.y,\n\t                               this.z-v.z);\n\t    }\n\t};\n\t\n\t/**\n\t * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n\t * @method crossmat\n\t * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n\t * @return {Mat3}\n\t */\n\tVec3.prototype.crossmat = function(){\n\t    return new Mat3([     0,  -this.z,   this.y,\n\t                            this.z,        0,  -this.x,\n\t                           -this.y,   this.x,        0]);\n\t};\n\t\n\t/**\n\t * Normalize the vector. Note that this changes the values in the vector.\n\t * @method normalize\n\t * @return {Number} Returns the norm of the vector\n\t */\n\tVec3.prototype.normalize = function(){\n\t    var x=this.x, y=this.y, z=this.z;\n\t    var n = Math.sqrt(x*x + y*y + z*z);\n\t    if(n>0.0){\n\t        var invN = 1/n;\n\t        this.x *= invN;\n\t        this.y *= invN;\n\t        this.z *= invN;\n\t    } else {\n\t        // Make something up\n\t        this.x = 0;\n\t        this.y = 0;\n\t        this.z = 0;\n\t    }\n\t    return n;\n\t};\n\t\n\t/**\n\t * Get the version of this vector that is of length 1.\n\t * @method unit\n\t * @param {Vec3} target Optional target to save in\n\t * @return {Vec3} Returns the unit vector\n\t */\n\tVec3.prototype.unit = function(target){\n\t    target = target || new Vec3();\n\t    var x=this.x, y=this.y, z=this.z;\n\t    var ninv = Math.sqrt(x*x + y*y + z*z);\n\t    if(ninv>0.0){\n\t        ninv = 1.0/ninv;\n\t        target.x = x * ninv;\n\t        target.y = y * ninv;\n\t        target.z = z * ninv;\n\t    } else {\n\t        target.x = 1;\n\t        target.y = 0;\n\t        target.z = 0;\n\t    }\n\t    return target;\n\t};\n\t\n\t/**\n\t * Get the length of the vector\n\t * @method norm\n\t * @return {Number}\n\t * @deprecated Use .length() instead\n\t */\n\tVec3.prototype.norm = function(){\n\t    var x=this.x, y=this.y, z=this.z;\n\t    return Math.sqrt(x*x + y*y + z*z);\n\t};\n\t\n\t/**\n\t * Get the length of the vector\n\t * @method length\n\t * @return {Number}\n\t */\n\tVec3.prototype.length = Vec3.prototype.norm;\n\t\n\t/**\n\t * Get the squared length of the vector\n\t * @method norm2\n\t * @return {Number}\n\t * @deprecated Use .lengthSquared() instead.\n\t */\n\tVec3.prototype.norm2 = function(){\n\t    return this.dot(this);\n\t};\n\t\n\t/**\n\t * Get the squared length of the vector.\n\t * @method lengthSquared\n\t * @return {Number}\n\t */\n\tVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\t\n\t/**\n\t * Get distance from this point to another point\n\t * @method distanceTo\n\t * @param  {Vec3} p\n\t * @return {Number}\n\t */\n\tVec3.prototype.distanceTo = function(p){\n\t    var x=this.x, y=this.y, z=this.z;\n\t    var px=p.x, py=p.y, pz=p.z;\n\t    return Math.sqrt((px-x)*(px-x)+\n\t                     (py-y)*(py-y)+\n\t                     (pz-z)*(pz-z));\n\t};\n\t\n\t/**\n\t * Get squared distance from this point to another point\n\t * @method distanceSquared\n\t * @param  {Vec3} p\n\t * @return {Number}\n\t */\n\tVec3.prototype.distanceSquared = function(p){\n\t    var x=this.x, y=this.y, z=this.z;\n\t    var px=p.x, py=p.y, pz=p.z;\n\t    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n\t};\n\t\n\t/**\n\t * Multiply all the components of the vector with a scalar.\n\t * @deprecated Use .scale instead\n\t * @method mult\n\t * @param {Number} scalar\n\t * @param {Vec3} target The vector to save the result in.\n\t * @return {Vec3}\n\t * @deprecated Use .scale() instead\n\t */\n\tVec3.prototype.mult = function(scalar,target){\n\t    target = target || new Vec3();\n\t    var x = this.x,\n\t        y = this.y,\n\t        z = this.z;\n\t    target.x = scalar * x;\n\t    target.y = scalar * y;\n\t    target.z = scalar * z;\n\t    return target;\n\t};\n\t\n\t/**\n\t * Multiply the vector with a scalar.\n\t * @method scale\n\t * @param {Number} scalar\n\t * @param {Vec3} target\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.scale = Vec3.prototype.mult;\n\t\n\t/**\n\t * Calculate dot product\n\t * @method dot\n\t * @param {Vec3} v\n\t * @return {Number}\n\t */\n\tVec3.prototype.dot = function(v){\n\t    return this.x * v.x + this.y * v.y + this.z * v.z;\n\t};\n\t\n\t/**\n\t * @method isZero\n\t * @return bool\n\t */\n\tVec3.prototype.isZero = function(){\n\t    return this.x===0 && this.y===0 && this.z===0;\n\t};\n\t\n\t/**\n\t * Make the vector point in the opposite direction.\n\t * @method negate\n\t * @param {Vec3} target Optional target to save in\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.negate = function(target){\n\t    target = target || new Vec3();\n\t    target.x = -this.x;\n\t    target.y = -this.y;\n\t    target.z = -this.z;\n\t    return target;\n\t};\n\t\n\t/**\n\t * Compute two artificial tangents to the vector\n\t * @method tangents\n\t * @param {Vec3} t1 Vector object to save the first tangent in\n\t * @param {Vec3} t2 Vector object to save the second tangent in\n\t */\n\tvar Vec3_tangents_n = new Vec3();\n\tvar Vec3_tangents_randVec = new Vec3();\n\tVec3.prototype.tangents = function(t1,t2){\n\t    var norm = this.norm();\n\t    if(norm>0.0){\n\t        var n = Vec3_tangents_n;\n\t        var inorm = 1/norm;\n\t        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n\t        var randVec = Vec3_tangents_randVec;\n\t        if(Math.abs(n.x) < 0.9){\n\t            randVec.set(1,0,0);\n\t            n.cross(randVec,t1);\n\t        } else {\n\t            randVec.set(0,1,0);\n\t            n.cross(randVec,t1);\n\t        }\n\t        n.cross(t1,t2);\n\t    } else {\n\t        // The normal length is zero, make something up\n\t        t1.set(1, 0, 0);\n\t        t2.set(0, 1, 0);\n\t    }\n\t};\n\t\n\t/**\n\t * Converts to a more readable format\n\t * @method toString\n\t * @return string\n\t */\n\tVec3.prototype.toString = function(){\n\t    return this.x+\",\"+this.y+\",\"+this.z;\n\t};\n\t\n\t/**\n\t * Converts to an array\n\t * @method toArray\n\t * @return Array\n\t */\n\tVec3.prototype.toArray = function(){\n\t    return [this.x, this.y, this.z];\n\t};\n\t\n\t/**\n\t * Copies value of source to this vector.\n\t * @method copy\n\t * @param {Vec3} source\n\t * @return {Vec3} this\n\t */\n\tVec3.prototype.copy = function(source){\n\t    this.x = source.x;\n\t    this.y = source.y;\n\t    this.z = source.z;\n\t    return this;\n\t};\n\t\n\t\n\t/**\n\t * Do a linear interpolation between two vectors\n\t * @method lerp\n\t * @param {Vec3} v\n\t * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n\t * @param {Vec3} target\n\t */\n\tVec3.prototype.lerp = function(v,t,target){\n\t    var x=this.x, y=this.y, z=this.z;\n\t    target.x = x + (v.x-x)*t;\n\t    target.y = y + (v.y-y)*t;\n\t    target.z = z + (v.z-z)*t;\n\t};\n\t\n\t/**\n\t * Check if a vector equals is almost equal to another one.\n\t * @method almostEquals\n\t * @param {Vec3} v\n\t * @param {Number} precision\n\t * @return bool\n\t */\n\tVec3.prototype.almostEquals = function(v,precision){\n\t    if(precision===undefined){\n\t        precision = 1e-6;\n\t    }\n\t    if( Math.abs(this.x-v.x)>precision ||\n\t        Math.abs(this.y-v.y)>precision ||\n\t        Math.abs(this.z-v.z)>precision){\n\t        return false;\n\t    }\n\t    return true;\n\t};\n\t\n\t/**\n\t * Check if a vector is almost zero\n\t * @method almostZero\n\t * @param {Number} precision\n\t */\n\tVec3.prototype.almostZero = function(precision){\n\t    if(precision===undefined){\n\t        precision = 1e-6;\n\t    }\n\t    if( Math.abs(this.x)>precision ||\n\t        Math.abs(this.y)>precision ||\n\t        Math.abs(this.z)>precision){\n\t        return false;\n\t    }\n\t    return true;\n\t};\n\t\n\tvar antip_neg = new Vec3();\n\t\n\t/**\n\t * Check if the vector is anti-parallel to another vector.\n\t * @method isAntiparallelTo\n\t * @param  {Vec3}  v\n\t * @param  {Number}  precision Set to zero for exact comparisons\n\t * @return {Boolean}\n\t */\n\tVec3.prototype.isAntiparallelTo = function(v,precision){\n\t    this.negate(antip_neg);\n\t    return antip_neg.almostEquals(v,precision);\n\t};\n\t\n\t/**\n\t * Clone the vector\n\t * @method clone\n\t * @return {Vec3}\n\t */\n\tVec3.prototype.clone = function(){\n\t    return new Vec3(this.x, this.y, this.z);\n\t};\n\n/***/ },\n/* 367 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Mat3;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * A 3x3 matrix.\n\t * @class Mat3\n\t * @constructor\n\t * @param array elements Array of nine elements. Optional.\n\t * @author schteppe / http://github.com/schteppe\n\t */\n\tfunction Mat3(elements){\n\t    /**\n\t     * A vector of length 9, containing all matrix elements\n\t     * @property {Array} elements\n\t     */\n\t    if(elements){\n\t        this.elements = elements;\n\t    } else {\n\t        this.elements = [0,0,0,0,0,0,0,0,0];\n\t    }\n\t}\n\t\n\t/**\n\t * Sets the matrix to identity\n\t * @method identity\n\t * @todo Should perhaps be renamed to setIdentity() to be more clear.\n\t * @todo Create another function that immediately creates an identity matrix eg. eye()\n\t */\n\tMat3.prototype.identity = function(){\n\t    var e = this.elements;\n\t    e[0] = 1;\n\t    e[1] = 0;\n\t    e[2] = 0;\n\t\n\t    e[3] = 0;\n\t    e[4] = 1;\n\t    e[5] = 0;\n\t\n\t    e[6] = 0;\n\t    e[7] = 0;\n\t    e[8] = 1;\n\t};\n\t\n\t/**\n\t * Set all elements to zero\n\t * @method setZero\n\t */\n\tMat3.prototype.setZero = function(){\n\t    var e = this.elements;\n\t    e[0] = 0;\n\t    e[1] = 0;\n\t    e[2] = 0;\n\t    e[3] = 0;\n\t    e[4] = 0;\n\t    e[5] = 0;\n\t    e[6] = 0;\n\t    e[7] = 0;\n\t    e[8] = 0;\n\t};\n\t\n\t/**\n\t * Sets the matrix diagonal elements from a Vec3\n\t * @method setTrace\n\t * @param {Vec3} vec3\n\t */\n\tMat3.prototype.setTrace = function(vec3){\n\t    var e = this.elements;\n\t    e[0] = vec3.x;\n\t    e[4] = vec3.y;\n\t    e[8] = vec3.z;\n\t};\n\t\n\t/**\n\t * Gets the matrix diagonal elements\n\t * @method getTrace\n\t * @return {Vec3}\n\t */\n\tMat3.prototype.getTrace = function(target){\n\t    var target = target || new Vec3();\n\t    var e = this.elements;\n\t    target.x = e[0];\n\t    target.y = e[4];\n\t    target.z = e[8];\n\t};\n\t\n\t/**\n\t * Matrix-Vector multiplication\n\t * @method vmult\n\t * @param {Vec3} v The vector to multiply with\n\t * @param {Vec3} target Optional, target to save the result in.\n\t */\n\tMat3.prototype.vmult = function(v,target){\n\t    target = target || new Vec3();\n\t\n\t    var e = this.elements,\n\t        x = v.x,\n\t        y = v.y,\n\t        z = v.z;\n\t    target.x = e[0]*x + e[1]*y + e[2]*z;\n\t    target.y = e[3]*x + e[4]*y + e[5]*z;\n\t    target.z = e[6]*x + e[7]*y + e[8]*z;\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Matrix-scalar multiplication\n\t * @method smult\n\t * @param {Number} s\n\t */\n\tMat3.prototype.smult = function(s){\n\t    for(var i=0; i<this.elements.length; i++){\n\t        this.elements[i] *= s;\n\t    }\n\t};\n\t\n\t/**\n\t * Matrix multiplication\n\t * @method mmult\n\t * @param {Mat3} m Matrix to multiply with from left side.\n\t * @return {Mat3} The result.\n\t */\n\tMat3.prototype.mmult = function(m,target){\n\t    var r = target || new Mat3();\n\t    for(var i=0; i<3; i++){\n\t        for(var j=0; j<3; j++){\n\t            var sum = 0.0;\n\t            for(var k=0; k<3; k++){\n\t                sum += m.elements[i+k*3] * this.elements[k+j*3];\n\t            }\n\t            r.elements[i+j*3] = sum;\n\t        }\n\t    }\n\t    return r;\n\t};\n\t\n\t/**\n\t * Scale each column of the matrix\n\t * @method scale\n\t * @param {Vec3} v\n\t * @return {Mat3} The result.\n\t */\n\tMat3.prototype.scale = function(v,target){\n\t    target = target || new Mat3();\n\t    var e = this.elements,\n\t        t = target.elements;\n\t    for(var i=0; i!==3; i++){\n\t        t[3*i + 0] = v.x * e[3*i + 0];\n\t        t[3*i + 1] = v.y * e[3*i + 1];\n\t        t[3*i + 2] = v.z * e[3*i + 2];\n\t    }\n\t    return target;\n\t};\n\t\n\t/**\n\t * Solve Ax=b\n\t * @method solve\n\t * @param {Vec3} b The right hand side\n\t * @param {Vec3} target Optional. Target vector to save in.\n\t * @return {Vec3} The solution x\n\t * @todo should reuse arrays\n\t */\n\tMat3.prototype.solve = function(b,target){\n\t    target = target || new Vec3();\n\t\n\t    // Construct equations\n\t    var nr = 3; // num rows\n\t    var nc = 4; // num cols\n\t    var eqns = [];\n\t    for(var i=0; i<nr*nc; i++){\n\t        eqns.push(0);\n\t    }\n\t    var i,j;\n\t    for(i=0; i<3; i++){\n\t        for(j=0; j<3; j++){\n\t            eqns[i+nc*j] = this.elements[i+3*j];\n\t        }\n\t    }\n\t    eqns[3+4*0] = b.x;\n\t    eqns[3+4*1] = b.y;\n\t    eqns[3+4*2] = b.z;\n\t\n\t    // Compute right upper triangular version of the matrix - Gauss elimination\n\t    var n = 3, k = n, np;\n\t    var kp = 4; // num rows\n\t    var p, els;\n\t    do {\n\t        i = k - n;\n\t        if (eqns[i+nc*i] === 0) {\n\t            // the pivot is null, swap lines\n\t            for (j = i + 1; j < k; j++) {\n\t                if (eqns[i+nc*j] !== 0) {\n\t                    np = kp;\n\t                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n\t                        p = kp - np;\n\t                        eqns[p+nc*i] += eqns[p+nc*j];\n\t                    } while (--np);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (eqns[i+nc*i] !== 0) {\n\t            for (j = i + 1; j < k; j++) {\n\t                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n\t                np = kp;\n\t                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n\t                    p = kp - np;\n\t                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n\t                } while (--np);\n\t            }\n\t        }\n\t    } while (--n);\n\t\n\t    // Get the solution\n\t    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n\t    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n\t    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\t\n\t    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n\t        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n\t    }\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Get an element in the matrix by index. Index starts at 0, not 1!!!\n\t * @method e\n\t * @param {Number} row\n\t * @param {Number} column\n\t * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n\t * @return {Number}\n\t */\n\tMat3.prototype.e = function( row , column ,value){\n\t    if(value===undefined){\n\t        return this.elements[column+3*row];\n\t    } else {\n\t        // Set value\n\t        this.elements[column+3*row] = value;\n\t    }\n\t};\n\t\n\t/**\n\t * Copy another matrix into this matrix object.\n\t * @method copy\n\t * @param {Mat3} source\n\t * @return {Mat3} this\n\t */\n\tMat3.prototype.copy = function(source){\n\t    for(var i=0; i < source.elements.length; i++){\n\t        this.elements[i] = source.elements[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a string representation of the matrix.\n\t * @method toString\n\t * @return string\n\t */\n\tMat3.prototype.toString = function(){\n\t    var r = \"\";\n\t    var sep = \",\";\n\t    for(var i=0; i<9; i++){\n\t        r += this.elements[i] + sep;\n\t    }\n\t    return r;\n\t};\n\t\n\t/**\n\t * reverse the matrix\n\t * @method reverse\n\t * @param {Mat3} target Optional. Target matrix to save in.\n\t * @return {Mat3} The solution x\n\t */\n\tMat3.prototype.reverse = function(target){\n\t\n\t    target = target || new Mat3();\n\t\n\t    // Construct equations\n\t    var nr = 3; // num rows\n\t    var nc = 6; // num cols\n\t    var eqns = [];\n\t    for(var i=0; i<nr*nc; i++){\n\t        eqns.push(0);\n\t    }\n\t    var i,j;\n\t    for(i=0; i<3; i++){\n\t        for(j=0; j<3; j++){\n\t            eqns[i+nc*j] = this.elements[i+3*j];\n\t        }\n\t    }\n\t    eqns[3+6*0] = 1;\n\t    eqns[3+6*1] = 0;\n\t    eqns[3+6*2] = 0;\n\t    eqns[4+6*0] = 0;\n\t    eqns[4+6*1] = 1;\n\t    eqns[4+6*2] = 0;\n\t    eqns[5+6*0] = 0;\n\t    eqns[5+6*1] = 0;\n\t    eqns[5+6*2] = 1;\n\t\n\t    // Compute right upper triangular version of the matrix - Gauss elimination\n\t    var n = 3, k = n, np;\n\t    var kp = nc; // num rows\n\t    var p;\n\t    do {\n\t        i = k - n;\n\t        if (eqns[i+nc*i] === 0) {\n\t            // the pivot is null, swap lines\n\t            for (j = i + 1; j < k; j++) {\n\t                if (eqns[i+nc*j] !== 0) {\n\t                    np = kp;\n\t                    do { // do line( i ) = line( i ) + line( k )\n\t                        p = kp - np;\n\t                        eqns[p+nc*i] += eqns[p+nc*j];\n\t                    } while (--np);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (eqns[i+nc*i] !== 0) {\n\t            for (j = i + 1; j < k; j++) {\n\t                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n\t                np = kp;\n\t                do { // do line( k ) = line( k ) - multiplier * line( i )\n\t                    p = kp - np;\n\t                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n\t                } while (--np);\n\t            }\n\t        }\n\t    } while (--n);\n\t\n\t    // eliminate the upper left triangle of the matrix\n\t    i = 2;\n\t    do {\n\t        j = i-1;\n\t        do {\n\t            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n\t            np = nc;\n\t            do {\n\t                p = nc - np;\n\t                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n\t            } while (--np);\n\t        } while (j--);\n\t    } while (--i);\n\t\n\t    // operations on the diagonal\n\t    i = 2;\n\t    do {\n\t        var multiplier = 1 / eqns[i+nc*i];\n\t        np = nc;\n\t        do {\n\t            p = nc - np;\n\t            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n\t        } while (--np);\n\t    } while (i--);\n\t\n\t    i = 2;\n\t    do {\n\t        j = 2;\n\t        do {\n\t            p = eqns[nr+j+nc*i];\n\t            if( isNaN( p ) || p ===Infinity ){\n\t                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n\t            }\n\t            target.e( i , j , p );\n\t        } while (j--);\n\t    } while (i--);\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Set the matrix from a quaterion\n\t * @method setRotationFromQuaternion\n\t * @param {Quaternion} q\n\t */\n\tMat3.prototype.setRotationFromQuaternion = function( q ) {\n\t    var x = q.x, y = q.y, z = q.z, w = q.w,\n\t        x2 = x + x, y2 = y + y, z2 = z + z,\n\t        xx = x * x2, xy = x * y2, xz = x * z2,\n\t        yy = y * y2, yz = y * z2, zz = z * z2,\n\t        wx = w * x2, wy = w * y2, wz = w * z2,\n\t        e = this.elements;\n\t\n\t    e[3*0 + 0] = 1 - ( yy + zz );\n\t    e[3*0 + 1] = xy - wz;\n\t    e[3*0 + 2] = xz + wy;\n\t\n\t    e[3*1 + 0] = xy + wz;\n\t    e[3*1 + 1] = 1 - ( xx + zz );\n\t    e[3*1 + 2] = yz - wx;\n\t\n\t    e[3*2 + 0] = xz - wy;\n\t    e[3*2 + 1] = yz + wx;\n\t    e[3*2 + 2] = 1 - ( xx + yy );\n\t\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transpose the matrix\n\t * @method transpose\n\t * @param  {Mat3} target Where to store the result.\n\t * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n\t */\n\tMat3.prototype.transpose = function( target ) {\n\t    target = target || new Mat3();\n\t\n\t    var Mt = target.elements,\n\t        M = this.elements;\n\t\n\t    for(var i=0; i!==3; i++){\n\t        for(var j=0; j!==3; j++){\n\t            Mt[3*i + j] = M[3*j + i];\n\t        }\n\t    }\n\t\n\t    return target;\n\t};\n\n\n/***/ },\n/* 368 */\n/***/ function(module, exports) {\n\n\tfunction Utils(){}\n\t\n\tmodule.exports = Utils;\n\t\n\t/**\n\t * Extend an options object with default values.\n\t * @static\n\t * @method defaults\n\t * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n\t * @param  {object} defaults An object containing default values.\n\t * @return {object} The modified options object.\n\t */\n\tUtils.defaults = function(options, defaults){\n\t    options = options || {};\n\t\n\t    for(var key in defaults){\n\t        if(!(key in options)){\n\t            options[key] = defaults[key];\n\t        }\n\t    }\n\t\n\t    return options;\n\t};\n\n\n/***/ },\n/* 369 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ArrayCollisionMatrix;\n\t\n\t/**\n\t * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n\t * @class ArrayCollisionMatrix\n\t * @constructor\n\t */\n\tfunction ArrayCollisionMatrix() {\n\t\n\t    /**\n\t     * The matrix storage\n\t     * @property matrix\n\t     * @type {Array}\n\t     */\n\t\tthis.matrix = [];\n\t}\n\t\n\t/**\n\t * Get an element\n\t * @method get\n\t * @param  {Number} i\n\t * @param  {Number} j\n\t * @return {Number}\n\t */\n\tArrayCollisionMatrix.prototype.get = function(i, j) {\n\t\ti = i.index;\n\t\tj = j.index;\n\t    if (j > i) {\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t    }\n\t\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n\t};\n\t\n\t/**\n\t * Set an element\n\t * @method set\n\t * @param {Number} i\n\t * @param {Number} j\n\t * @param {Number} value\n\t */\n\tArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\t\ti = i.index;\n\t\tj = j.index;\n\t    if (j > i) {\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t    }\n\t\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n\t};\n\t\n\t/**\n\t * Sets all elements to zero\n\t * @method reset\n\t */\n\tArrayCollisionMatrix.prototype.reset = function() {\n\t\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\t\tthis.matrix[i]=0;\n\t\t}\n\t};\n\t\n\t/**\n\t * Sets the max number of objects\n\t * @method setNumObjects\n\t * @param {Number} n\n\t */\n\tArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\t\tthis.matrix.length = n*(n-1)>>1;\n\t};\n\n\n/***/ },\n/* 370 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Body;\n\t\n\tvar EventTarget = __webpack_require__(371);\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Material = __webpack_require__(374);\n\tvar AABB = __webpack_require__(365);\n\tvar Box = __webpack_require__(375);\n\t\n\t/**\n\t * Base class for all body types.\n\t * @class Body\n\t * @constructor\n\t * @extends EventTarget\n\t * @param {object} [options]\n\t * @param {Vec3} [options.position]\n\t * @param {Vec3} [options.velocity]\n\t * @param {Vec3} [options.angularVelocity]\n\t * @param {Quaternion} [options.quaternion]\n\t * @param {number} [options.mass]\n\t * @param {Material} [options.material]\n\t * @param {number} [options.type]\n\t * @param {number} [options.linearDamping=0.01]\n\t * @param {number} [options.angularDamping=0.01]\n\t * @param {boolean} [options.allowSleep=true]\n\t * @param {number} [options.sleepSpeedLimit=0.1]\n\t * @param {number} [options.sleepTimeLimit=1]\n\t * @param {number} [options.collisionFilterGroup=1]\n\t * @param {number} [options.collisionFilterMask=1]\n\t * @param {boolean} [options.fixedRotation=false]\n\t * @param {Body} [options.shape]\n\t * @example\n\t *     var body = new Body({\n\t *         mass: 1\n\t *     });\n\t *     var shape = new Sphere(1);\n\t *     body.addShape(shape);\n\t *     world.add(body);\n\t */\n\tfunction Body(options){\n\t    options = options || {};\n\t\n\t    EventTarget.apply(this);\n\t\n\t    this.id = Body.idCounter++;\n\t\n\t    /**\n\t     * Reference to the world the body is living in\n\t     * @property world\n\t     * @type {World}\n\t     */\n\t    this.world = null;\n\t\n\t    /**\n\t     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n\t     * @property preStep\n\t     * @type {Function}\n\t     * @deprecated Use World events instead\n\t     */\n\t    this.preStep = null;\n\t\n\t    /**\n\t     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n\t     * @property postStep\n\t     * @type {Function}\n\t     * @deprecated Use World events instead\n\t     */\n\t    this.postStep = null;\n\t\n\t    this.vlambda = new Vec3();\n\t\n\t    /**\n\t     * @property {Number} collisionFilterGroup\n\t     */\n\t    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\t\n\t    /**\n\t     * @property {Number} collisionFilterMask\n\t     */\n\t    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\t\n\t    /**\n\t     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n\t     * @property {Number} collisionResponse\n\t     */\n\t\tthis.collisionResponse = true;\n\t\n\t    /**\n\t     * @property position\n\t     * @type {Vec3}\n\t     */\n\t    this.position = new Vec3();\n\t\n\t    if(options.position){\n\t        this.position.copy(options.position);\n\t    }\n\t\n\t    /**\n\t     * @property {Vec3} previousPosition\n\t     */\n\t    this.previousPosition = new Vec3();\n\t\n\t    /**\n\t     * Initial position of the body\n\t     * @property initPosition\n\t     * @type {Vec3}\n\t     */\n\t    this.initPosition = new Vec3();\n\t\n\t    /**\n\t     * @property velocity\n\t     * @type {Vec3}\n\t     */\n\t    this.velocity = new Vec3();\n\t\n\t    if(options.velocity){\n\t        this.velocity.copy(options.velocity);\n\t    }\n\t\n\t    /**\n\t     * @property initVelocity\n\t     * @type {Vec3}\n\t     */\n\t    this.initVelocity = new Vec3();\n\t\n\t    /**\n\t     * Linear force on the body\n\t     * @property force\n\t     * @type {Vec3}\n\t     */\n\t    this.force = new Vec3();\n\t\n\t    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\t\n\t    /**\n\t     * @property mass\n\t     * @type {Number}\n\t     * @default 0\n\t     */\n\t    this.mass = mass;\n\t\n\t    /**\n\t     * @property invMass\n\t     * @type {Number}\n\t     */\n\t    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\t\n\t    /**\n\t     * @property material\n\t     * @type {Material}\n\t     */\n\t    this.material = options.material || null;\n\t\n\t    /**\n\t     * @property linearDamping\n\t     * @type {Number}\n\t     */\n\t    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\t\n\t    /**\n\t     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n\t     * @property type\n\t     * @type {Number}\n\t     */\n\t    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n\t    if(typeof(options.type) === typeof(Body.STATIC)){\n\t        this.type = options.type;\n\t    }\n\t\n\t    /**\n\t     * If true, the body will automatically fall to sleep.\n\t     * @property allowSleep\n\t     * @type {Boolean}\n\t     * @default true\n\t     */\n\t    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\t\n\t    /**\n\t     * Current sleep state.\n\t     * @property sleepState\n\t     * @type {Number}\n\t     */\n\t    this.sleepState = 0;\n\t\n\t    /**\n\t     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n\t     * @property sleepSpeedLimit\n\t     * @type {Number}\n\t     * @default 0.1\n\t     */\n\t    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\t\n\t    /**\n\t     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n\t     * @property sleepTimeLimit\n\t     * @type {Number}\n\t     * @default 1\n\t     */\n\t    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\t\n\t    this.timeLastSleepy = 0;\n\t\n\t    this._wakeUpAfterNarrowphase = false;\n\t\n\t\n\t    /**\n\t     * Rotational force on the body, around center of mass\n\t     * @property {Vec3} torque\n\t     */\n\t    this.torque = new Vec3();\n\t\n\t    /**\n\t     * Orientation of the body\n\t     * @property quaternion\n\t     * @type {Quaternion}\n\t     */\n\t    this.quaternion = new Quaternion();\n\t\n\t    if(options.quaternion){\n\t        this.quaternion.copy(options.quaternion);\n\t    }\n\t\n\t    /**\n\t     * @property initQuaternion\n\t     * @type {Quaternion}\n\t     */\n\t    this.initQuaternion = new Quaternion();\n\t\n\t    /**\n\t     * @property angularVelocity\n\t     * @type {Vec3}\n\t     */\n\t    this.angularVelocity = new Vec3();\n\t\n\t    if(options.angularVelocity){\n\t        this.angularVelocity.copy(options.angularVelocity);\n\t    }\n\t\n\t    /**\n\t     * @property initAngularVelocity\n\t     * @type {Vec3}\n\t     */\n\t    this.initAngularVelocity = new Vec3();\n\t\n\t    this.interpolatedPosition = new Vec3();\n\t    this.interpolatedQuaternion = new Quaternion();\n\t\n\t    /**\n\t     * @property shapes\n\t     * @type {array}\n\t     */\n\t    this.shapes = [];\n\t\n\t    /**\n\t     * @property shapeOffsets\n\t     * @type {array}\n\t     */\n\t    this.shapeOffsets = [];\n\t\n\t    /**\n\t     * @property shapeOrientations\n\t     * @type {array}\n\t     */\n\t    this.shapeOrientations = [];\n\t\n\t    /**\n\t     * @property inertia\n\t     * @type {Vec3}\n\t     */\n\t    this.inertia = new Vec3();\n\t\n\t    /**\n\t     * @property {Vec3} invInertia\n\t     */\n\t    this.invInertia = new Vec3();\n\t\n\t    /**\n\t     * @property {Mat3} invInertiaWorld\n\t     */\n\t    this.invInertiaWorld = new Mat3();\n\t\n\t    this.invMassSolve = 0;\n\t\n\t    /**\n\t     * @property {Vec3} invInertiaSolve\n\t     */\n\t    this.invInertiaSolve = new Vec3();\n\t\n\t    /**\n\t     * @property {Mat3} invInertiaWorldSolve\n\t     */\n\t    this.invInertiaWorldSolve = new Mat3();\n\t\n\t    /**\n\t     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n\t     * @property {Boolean} fixedRotation\n\t     * @default false\n\t     */\n\t    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\t\n\t    /**\n\t     * @property {Number} angularDamping\n\t     */\n\t    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\t\n\t    /**\n\t     * @property aabb\n\t     * @type {AABB}\n\t     */\n\t    this.aabb = new AABB();\n\t\n\t    /**\n\t     * Indicates if the AABB needs to be updated before use.\n\t     * @property aabbNeedsUpdate\n\t     * @type {Boolean}\n\t     */\n\t    this.aabbNeedsUpdate = true;\n\t\n\t    this.wlambda = new Vec3();\n\t\n\t    if(options.shape){\n\t        this.addShape(options.shape);\n\t    }\n\t\n\t    this.updateMassProperties();\n\t}\n\tBody.prototype = new EventTarget();\n\tBody.prototype.constructor = Body;\n\t\n\t/**\n\t * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n\t * @static\n\t * @property DYNAMIC\n\t * @type {Number}\n\t */\n\tBody.DYNAMIC = 1;\n\t\n\t/**\n\t * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n\t * @static\n\t * @property STATIC\n\t * @type {Number}\n\t */\n\tBody.STATIC = 2;\n\t\n\t/**\n\t * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n\t * @static\n\t * @property KINEMATIC\n\t * @type {Number}\n\t */\n\tBody.KINEMATIC = 4;\n\t\n\t\n\t\n\t/**\n\t * @static\n\t * @property AWAKE\n\t * @type {number}\n\t */\n\tBody.AWAKE = 0;\n\t\n\t/**\n\t * @static\n\t * @property SLEEPY\n\t * @type {number}\n\t */\n\tBody.SLEEPY = 1;\n\t\n\t/**\n\t * @static\n\t * @property SLEEPING\n\t * @type {number}\n\t */\n\tBody.SLEEPING = 2;\n\t\n\tBody.idCounter = 0;\n\t\n\t/**\n\t * Wake the body up.\n\t * @method wakeUp\n\t */\n\tBody.prototype.wakeUp = function(){\n\t    var s = this.sleepState;\n\t    this.sleepState = 0;\n\t    if(s === Body.SLEEPING){\n\t        this.dispatchEvent({type:\"wakeup\"});\n\t    }\n\t};\n\t\n\t/**\n\t * Force body sleep\n\t * @method sleep\n\t */\n\tBody.prototype.sleep = function(){\n\t    this.sleepState = Body.SLEEPING;\n\t    this.velocity.set(0,0,0);\n\t    this.angularVelocity.set(0,0,0);\n\t};\n\t\n\tBody.sleepyEvent = {\n\t    type: \"sleepy\"\n\t};\n\t\n\tBody.sleepEvent = {\n\t    type: \"sleep\"\n\t};\n\t\n\t/**\n\t * Called every timestep to update internal sleep timer and change sleep state if needed.\n\t * @method sleepTick\n\t * @param {Number} time The world time in seconds\n\t */\n\tBody.prototype.sleepTick = function(time){\n\t    if(this.allowSleep){\n\t        var sleepState = this.sleepState;\n\t        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n\t        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n\t        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n\t            this.sleepState = Body.SLEEPY; // Sleepy\n\t            this.timeLastSleepy = time;\n\t            this.dispatchEvent(Body.sleepyEvent);\n\t        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n\t            this.wakeUp(); // Wake up\n\t        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n\t            this.sleep(); // Sleeping\n\t            this.dispatchEvent(Body.sleepEvent);\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n\t * @method updateSolveMassProperties\n\t */\n\tBody.prototype.updateSolveMassProperties = function(){\n\t    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n\t        this.invMassSolve = 0;\n\t        this.invInertiaSolve.setZero();\n\t        this.invInertiaWorldSolve.setZero();\n\t    } else {\n\t        this.invMassSolve = this.invMass;\n\t        this.invInertiaSolve.copy(this.invInertia);\n\t        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n\t    }\n\t};\n\t\n\t/**\n\t * Convert a world point to local body frame.\n\t * @method pointToLocalFrame\n\t * @param  {Vec3} worldPoint\n\t * @param  {Vec3} result\n\t * @return {Vec3}\n\t */\n\tBody.prototype.pointToLocalFrame = function(worldPoint,result){\n\t    var result = result || new Vec3();\n\t    worldPoint.vsub(this.position,result);\n\t    this.quaternion.conjugate().vmult(result,result);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Convert a world vector to local body frame.\n\t * @method vectorToLocalFrame\n\t * @param  {Vec3} worldPoint\n\t * @param  {Vec3} result\n\t * @return {Vec3}\n\t */\n\tBody.prototype.vectorToLocalFrame = function(worldVector, result){\n\t    var result = result || new Vec3();\n\t    this.quaternion.conjugate().vmult(worldVector,result);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Convert a local body point to world frame.\n\t * @method pointToWorldFrame\n\t * @param  {Vec3} localPoint\n\t * @param  {Vec3} result\n\t * @return {Vec3}\n\t */\n\tBody.prototype.pointToWorldFrame = function(localPoint,result){\n\t    var result = result || new Vec3();\n\t    this.quaternion.vmult(localPoint,result);\n\t    result.vadd(this.position,result);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Convert a local body point to world frame.\n\t * @method vectorToWorldFrame\n\t * @param  {Vec3} localVector\n\t * @param  {Vec3} result\n\t * @return {Vec3}\n\t */\n\tBody.prototype.vectorToWorldFrame = function(localVector, result){\n\t    var result = result || new Vec3();\n\t    this.quaternion.vmult(localVector, result);\n\t    return result;\n\t};\n\t\n\tvar tmpVec = new Vec3();\n\tvar tmpQuat = new Quaternion();\n\t\n\t/**\n\t * Add a shape to the body with a local offset and orientation.\n\t * @method addShape\n\t * @param {Shape} shape\n\t * @param {Vec3} offset\n\t * @param {Quaternion} quaternion\n\t * @return {Body} The body object, for chainability.\n\t */\n\tBody.prototype.addShape = function(shape, _offset, _orientation){\n\t    var offset = new Vec3();\n\t    var orientation = new Quaternion();\n\t\n\t    if(_offset){\n\t        offset.copy(_offset);\n\t    }\n\t    if(_orientation){\n\t        orientation.copy(_orientation);\n\t    }\n\t\n\t    this.shapes.push(shape);\n\t    this.shapeOffsets.push(offset);\n\t    this.shapeOrientations.push(orientation);\n\t    this.updateMassProperties();\n\t    this.updateBoundingRadius();\n\t\n\t    this.aabbNeedsUpdate = true;\n\t\n\t    return this;\n\t};\n\t\n\t/**\n\t * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n\t * @method updateBoundingRadius\n\t */\n\tBody.prototype.updateBoundingRadius = function(){\n\t    var shapes = this.shapes,\n\t        shapeOffsets = this.shapeOffsets,\n\t        N = shapes.length,\n\t        radius = 0;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        var shape = shapes[i];\n\t        shape.updateBoundingSphereRadius();\n\t        var offset = shapeOffsets[i].norm(),\n\t            r = shape.boundingSphereRadius;\n\t        if(offset + r > radius){\n\t            radius = offset + r;\n\t        }\n\t    }\n\t\n\t    this.boundingRadius = radius;\n\t};\n\t\n\tvar computeAABB_shapeAABB = new AABB();\n\t\n\t/**\n\t * Updates the .aabb\n\t * @method computeAABB\n\t * @todo rename to updateAABB()\n\t */\n\tBody.prototype.computeAABB = function(){\n\t    var shapes = this.shapes,\n\t        shapeOffsets = this.shapeOffsets,\n\t        shapeOrientations = this.shapeOrientations,\n\t        N = shapes.length,\n\t        offset = tmpVec,\n\t        orientation = tmpQuat,\n\t        bodyQuat = this.quaternion,\n\t        aabb = this.aabb,\n\t        shapeAABB = computeAABB_shapeAABB;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        var shape = shapes[i];\n\t\n\t        // Get shape world quaternion\n\t        shapeOrientations[i].mult(bodyQuat, orientation);\n\t\n\t        // Get shape world position\n\t        orientation.vmult(shapeOffsets[i], offset);\n\t        offset.vadd(this.position, offset);\n\t\n\t        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n\t        // vec2.add(offset, offset, this.position);\n\t\n\t        // Get shape AABB\n\t        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\t\n\t        if(i === 0){\n\t            aabb.copy(shapeAABB);\n\t        } else {\n\t            aabb.extend(shapeAABB);\n\t        }\n\t    }\n\t\n\t    this.aabbNeedsUpdate = false;\n\t};\n\t\n\tvar uiw_m1 = new Mat3(),\n\t    uiw_m2 = new Mat3(),\n\t    uiw_m3 = new Mat3();\n\t\n\t/**\n\t * Update .inertiaWorld and .invInertiaWorld\n\t * @method updateInertiaWorld\n\t */\n\tBody.prototype.updateInertiaWorld = function(force){\n\t    var I = this.invInertia;\n\t    if (I.x === I.y && I.y === I.z && !force) {\n\t        // If inertia M = s*I, where I is identity and s a scalar, then\n\t        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n\t        // where R is the rotation matrix.\n\t        // In other words, we don't have to transform the inertia if all\n\t        // inertia diagonal entries are equal.\n\t    } else {\n\t        var m1 = uiw_m1,\n\t            m2 = uiw_m2,\n\t            m3 = uiw_m3;\n\t        m1.setRotationFromQuaternion(this.quaternion);\n\t        m1.transpose(m2);\n\t        m1.scale(I,m1);\n\t        m1.mmult(m2,this.invInertiaWorld);\n\t        //m3.getTrace(this.invInertiaWorld);\n\t    }\n\t\n\t    /*\n\t    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n\t    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n\t    */\n\t};\n\t\n\t/**\n\t * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n\t * @method applyForce\n\t * @param  {Vec3} force The amount of force to add.\n\t * @param  {Vec3} worldPoint A world point to apply the force on.\n\t */\n\tvar Body_applyForce_r = new Vec3();\n\tvar Body_applyForce_rotForce = new Vec3();\n\tBody.prototype.applyForce = function(force,worldPoint){\n\t    if(this.type !== Body.DYNAMIC){\n\t        return;\n\t    }\n\t\n\t    // Compute point position relative to the body center\n\t    var r = Body_applyForce_r;\n\t    worldPoint.vsub(this.position,r);\n\t\n\t    // Compute produced rotational force\n\t    var rotForce = Body_applyForce_rotForce;\n\t    r.cross(force,rotForce);\n\t\n\t    // Add linear force\n\t    this.force.vadd(force,this.force);\n\t\n\t    // Add rotational force\n\t    this.torque.vadd(rotForce,this.torque);\n\t};\n\t\n\t/**\n\t * Apply force to a local point in the body.\n\t * @method applyLocalForce\n\t * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n\t * @param  {Vec3} localPoint A local point in the body to apply the force on.\n\t */\n\tvar Body_applyLocalForce_worldForce = new Vec3();\n\tvar Body_applyLocalForce_worldPoint = new Vec3();\n\tBody.prototype.applyLocalForce = function(localForce, localPoint){\n\t    if(this.type !== Body.DYNAMIC){\n\t        return;\n\t    }\n\t\n\t    var worldForce = Body_applyLocalForce_worldForce;\n\t    var worldPoint = Body_applyLocalForce_worldPoint;\n\t\n\t    // Transform the force vector to world space\n\t    this.vectorToWorldFrame(localForce, worldForce);\n\t    this.pointToWorldFrame(localPoint, worldPoint);\n\t\n\t    this.applyForce(worldForce, worldPoint);\n\t};\n\t\n\t/**\n\t * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n\t * @method applyImpulse\n\t * @param  {Vec3} impulse The amount of impulse to add.\n\t * @param  {Vec3} worldPoint A world point to apply the force on.\n\t */\n\tvar Body_applyImpulse_r = new Vec3();\n\tvar Body_applyImpulse_velo = new Vec3();\n\tvar Body_applyImpulse_rotVelo = new Vec3();\n\tBody.prototype.applyImpulse = function(impulse, worldPoint){\n\t    if(this.type !== Body.DYNAMIC){\n\t        return;\n\t    }\n\t\n\t    // Compute point position relative to the body center\n\t    var r = Body_applyImpulse_r;\n\t    worldPoint.vsub(this.position,r);\n\t\n\t    // Compute produced central impulse velocity\n\t    var velo = Body_applyImpulse_velo;\n\t    velo.copy(impulse);\n\t    velo.mult(this.invMass,velo);\n\t\n\t    // Add linear impulse\n\t    this.velocity.vadd(velo, this.velocity);\n\t\n\t    // Compute produced rotational impulse velocity\n\t    var rotVelo = Body_applyImpulse_rotVelo;\n\t    r.cross(impulse,rotVelo);\n\t\n\t    /*\n\t    rotVelo.x *= this.invInertia.x;\n\t    rotVelo.y *= this.invInertia.y;\n\t    rotVelo.z *= this.invInertia.z;\n\t    */\n\t    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\t\n\t    // Add rotational Impulse\n\t    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n\t};\n\t\n\t/**\n\t * Apply locally-defined impulse to a local point in the body.\n\t * @method applyLocalImpulse\n\t * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n\t * @param  {Vec3} localPoint A local point in the body to apply the force on.\n\t */\n\tvar Body_applyLocalImpulse_worldImpulse = new Vec3();\n\tvar Body_applyLocalImpulse_worldPoint = new Vec3();\n\tBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n\t    if(this.type !== Body.DYNAMIC){\n\t        return;\n\t    }\n\t\n\t    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n\t    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\t\n\t    // Transform the force vector to world space\n\t    this.vectorToWorldFrame(localImpulse, worldImpulse);\n\t    this.pointToWorldFrame(localPoint, worldPoint);\n\t\n\t    this.applyImpulse(worldImpulse, worldPoint);\n\t};\n\t\n\tvar Body_updateMassProperties_halfExtents = new Vec3();\n\t\n\t/**\n\t * Should be called whenever you change the body shape or mass.\n\t * @method updateMassProperties\n\t */\n\tBody.prototype.updateMassProperties = function(){\n\t    var halfExtents = Body_updateMassProperties_halfExtents;\n\t\n\t    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n\t    var I = this.inertia;\n\t    var fixed = this.fixedRotation;\n\t\n\t    // Approximate with AABB box\n\t    this.computeAABB();\n\t    halfExtents.set(\n\t        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n\t        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n\t        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n\t    );\n\t    Box.calculateInertia(halfExtents, this.mass, I);\n\t\n\t    this.invInertia.set(\n\t        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n\t        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n\t        I.z > 0 && !fixed ? 1.0 / I.z : 0\n\t    );\n\t    this.updateInertiaWorld(true);\n\t};\n\t\n\t/**\n\t * Get world velocity of a point in the body.\n\t * @method getVelocityAtWorldPoint\n\t * @param  {Vec3} worldPoint\n\t * @param  {Vec3} result\n\t * @return {Vec3} The result vector.\n\t */\n\tBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n\t    var r = new Vec3();\n\t    worldPoint.vsub(this.position, r);\n\t    this.angularVelocity.cross(r, result);\n\t    this.velocity.vadd(result, result);\n\t    return result;\n\t};\n\n\n/***/ },\n/* 371 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Base class for objects that dispatches events.\n\t * @class EventTarget\n\t * @constructor\n\t */\n\tvar EventTarget = function () {\n\t\n\t};\n\t\n\tmodule.exports = EventTarget;\n\t\n\tEventTarget.prototype = {\n\t    constructor: EventTarget,\n\t\n\t    /**\n\t     * Add an event listener\n\t     * @method addEventListener\n\t     * @param  {String} type\n\t     * @param  {Function} listener\n\t     * @return {EventTarget} The self object, for chainability.\n\t     */\n\t    addEventListener: function ( type, listener ) {\n\t        if ( this._listeners === undefined ){ this._listeners = {}; }\n\t        var listeners = this._listeners;\n\t        if ( listeners[ type ] === undefined ) {\n\t            listeners[ type ] = [];\n\t        }\n\t        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t            listeners[ type ].push( listener );\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Check if an event listener is added\n\t     * @method hasEventListener\n\t     * @param  {String} type\n\t     * @param  {Function} listener\n\t     * @return {Boolean}\n\t     */\n\t    hasEventListener: function ( type, listener ) {\n\t        if ( this._listeners === undefined ){ return false; }\n\t        var listeners = this._listeners;\n\t        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t            return true;\n\t        }\n\t        return false;\n\t    },\n\t\n\t    /**\n\t     * Remove an event listener\n\t     * @method removeEventListener\n\t     * @param  {String} type\n\t     * @param  {Function} listener\n\t     * @return {EventTarget} The self object, for chainability.\n\t     */\n\t    removeEventListener: function ( type, listener ) {\n\t        if ( this._listeners === undefined ){ return this; }\n\t        var listeners = this._listeners;\n\t        if ( listeners[type] === undefined ){ return this; }\n\t        var index = listeners[ type ].indexOf( listener );\n\t        if ( index !== - 1 ) {\n\t            listeners[ type ].splice( index, 1 );\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Emit an event.\n\t     * @method dispatchEvent\n\t     * @param  {Object} event\n\t     * @param  {String} event.type\n\t     * @return {EventTarget} The self object, for chainability.\n\t     */\n\t    dispatchEvent: function ( event ) {\n\t        if ( this._listeners === undefined ){ return this; }\n\t        var listeners = this._listeners;\n\t        var listenerArray = listeners[ event.type ];\n\t        if ( listenerArray !== undefined ) {\n\t            event.target = this;\n\t            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n\t                listenerArray[ i ].call( this, event );\n\t            }\n\t        }\n\t        return this;\n\t    }\n\t};\n\n\n/***/ },\n/* 372 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Shape;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Material = __webpack_require__(374);\n\t\n\t/**\n\t * Base class for shapes\n\t * @class Shape\n\t * @constructor\n\t * @author schteppe\n\t * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n\t */\n\tfunction Shape(){\n\t\n\t    /**\n\t     * Identifyer of the Shape.\n\t     * @property {number} id\n\t     */\n\t    this.id = Shape.idCounter++;\n\t\n\t    /**\n\t     * The type of this shape. Must be set to an int > 0 by subclasses.\n\t     * @property type\n\t     * @type {Number}\n\t     * @see Shape.types\n\t     */\n\t    this.type = 0;\n\t\n\t    /**\n\t     * The local bounding sphere radius of this shape.\n\t     * @property {Number} boundingSphereRadius\n\t     */\n\t    this.boundingSphereRadius = 0;\n\t\n\t    /**\n\t     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n\t     * @property {boolean} collisionResponse\n\t     */\n\t    this.collisionResponse = true;\n\t\n\t    /**\n\t     * @property {Material} material\n\t     */\n\t    this.material = null;\n\t}\n\tShape.prototype.constructor = Shape;\n\t\n\t/**\n\t * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n\t * @method updateBoundingSphereRadius\n\t * @return {Number}\n\t */\n\tShape.prototype.updateBoundingSphereRadius = function(){\n\t    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n\t};\n\t\n\t/**\n\t * Get the volume of this shape\n\t * @method volume\n\t * @return {Number}\n\t */\n\tShape.prototype.volume = function(){\n\t    throw \"volume() not implemented for shape type \"+this.type;\n\t};\n\t\n\t/**\n\t * Calculates the inertia in the local frame for this shape.\n\t * @method calculateLocalInertia\n\t * @return {Vec3}\n\t * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n\t */\n\tShape.prototype.calculateLocalInertia = function(mass,target){\n\t    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n\t};\n\t\n\tShape.idCounter = 0;\n\t\n\t/**\n\t * The available shape types.\n\t * @static\n\t * @property types\n\t * @type {Object}\n\t */\n\tShape.types = {\n\t    SPHERE:1,\n\t    PLANE:2,\n\t    BOX:4,\n\t    COMPOUND:8,\n\t    CONVEXPOLYHEDRON:16,\n\t    HEIGHTFIELD:32,\n\t    PARTICLE:64,\n\t    CYLINDER:128,\n\t    TRIMESH:256\n\t};\n\t\n\n\n/***/ },\n/* 373 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Quaternion;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n\t * @class Quaternion\n\t * @constructor\n\t * @param {Number} x Multiplier of the imaginary basis vector i.\n\t * @param {Number} y Multiplier of the imaginary basis vector j.\n\t * @param {Number} z Multiplier of the imaginary basis vector k.\n\t * @param {Number} w Multiplier of the real part.\n\t * @see http://en.wikipedia.org/wiki/Quaternion\n\t */\n\tfunction Quaternion(x,y,z,w){\n\t    /**\n\t     * @property {Number} x\n\t     */\n\t    this.x = x!==undefined ? x : 0;\n\t\n\t    /**\n\t     * @property {Number} y\n\t     */\n\t    this.y = y!==undefined ? y : 0;\n\t\n\t    /**\n\t     * @property {Number} z\n\t     */\n\t    this.z = z!==undefined ? z : 0;\n\t\n\t    /**\n\t     * The multiplier of the real quaternion basis vector.\n\t     * @property {Number} w\n\t     */\n\t    this.w = w!==undefined ? w : 1;\n\t}\n\t\n\t/**\n\t * Set the value of the quaternion.\n\t * @method set\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} z\n\t * @param {Number} w\n\t */\n\tQuaternion.prototype.set = function(x,y,z,w){\n\t    this.x = x;\n\t    this.y = y;\n\t    this.z = z;\n\t    this.w = w;\n\t};\n\t\n\t/**\n\t * Convert to a readable format\n\t * @method toString\n\t * @return string\n\t */\n\tQuaternion.prototype.toString = function(){\n\t    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n\t};\n\t\n\t/**\n\t * Convert to an Array\n\t * @method toArray\n\t * @return Array\n\t */\n\tQuaternion.prototype.toArray = function(){\n\t    return [this.x, this.y, this.z, this.w];\n\t};\n\t\n\t/**\n\t * Set the quaternion components given an axis and an angle.\n\t * @method setFromAxisAngle\n\t * @param {Vec3} axis\n\t * @param {Number} angle in radians\n\t */\n\tQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n\t    var s = Math.sin(angle*0.5);\n\t    this.x = axis.x * s;\n\t    this.y = axis.y * s;\n\t    this.z = axis.z * s;\n\t    this.w = Math.cos(angle*0.5);\n\t};\n\t\n\t/**\n\t * Converts the quaternion to axis/angle representation.\n\t * @method toAxisAngle\n\t * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n\t * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n\t */\n\tQuaternion.prototype.toAxisAngle = function(targetAxis){\n\t    targetAxis = targetAxis || new Vec3();\n\t    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\t    var angle = 2 * Math.acos(this.w);\n\t    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\t    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n\t        // if s close to zero then direction of axis not important\n\t        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\t        targetAxis.y = this.y;\n\t        targetAxis.z = this.z;\n\t    } else {\n\t        targetAxis.x = this.x / s; // normalise axis\n\t        targetAxis.y = this.y / s;\n\t        targetAxis.z = this.z / s;\n\t    }\n\t    return [targetAxis,angle];\n\t};\n\t\n\tvar sfv_t1 = new Vec3(),\n\t    sfv_t2 = new Vec3();\n\t\n\t/**\n\t * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n\t * @method setFromVectors\n\t * @param {Vec3} u\n\t * @param {Vec3} v\n\t */\n\tQuaternion.prototype.setFromVectors = function(u,v){\n\t    if(u.isAntiparallelTo(v)){\n\t        var t1 = sfv_t1;\n\t        var t2 = sfv_t2;\n\t\n\t        u.tangents(t1,t2);\n\t        this.setFromAxisAngle(t1,Math.PI);\n\t    } else {\n\t        var a = u.cross(v);\n\t        this.x = a.x;\n\t        this.y = a.y;\n\t        this.z = a.z;\n\t        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n\t        this.normalize();\n\t    }\n\t};\n\t\n\t/**\n\t * Quaternion multiplication\n\t * @method mult\n\t * @param {Quaternion} q\n\t * @param {Quaternion} target Optional.\n\t * @return {Quaternion}\n\t */\n\tvar Quaternion_mult_va = new Vec3();\n\tvar Quaternion_mult_vb = new Vec3();\n\tvar Quaternion_mult_vaxvb = new Vec3();\n\tQuaternion.prototype.mult = function(q,target){\n\t    target = target || new Quaternion();\n\t    var w = this.w,\n\t        va = Quaternion_mult_va,\n\t        vb = Quaternion_mult_vb,\n\t        vaxvb = Quaternion_mult_vaxvb;\n\t\n\t    va.set(this.x,this.y,this.z);\n\t    vb.set(q.x,q.y,q.z);\n\t    target.w = w*q.w - va.dot(vb);\n\t    va.cross(vb,vaxvb);\n\t\n\t    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n\t    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n\t    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Get the inverse quaternion rotation.\n\t * @method inverse\n\t * @param {Quaternion} target\n\t * @return {Quaternion}\n\t */\n\tQuaternion.prototype.inverse = function(target){\n\t    var x = this.x, y = this.y, z = this.z, w = this.w;\n\t    target = target || new Quaternion();\n\t\n\t    this.conjugate(target);\n\t    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n\t    target.x *= inorm2;\n\t    target.y *= inorm2;\n\t    target.z *= inorm2;\n\t    target.w *= inorm2;\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Get the quaternion conjugate\n\t * @method conjugate\n\t * @param {Quaternion} target\n\t * @return {Quaternion}\n\t */\n\tQuaternion.prototype.conjugate = function(target){\n\t    target = target || new Quaternion();\n\t\n\t    target.x = -this.x;\n\t    target.y = -this.y;\n\t    target.z = -this.z;\n\t    target.w = this.w;\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Normalize the quaternion. Note that this changes the values of the quaternion.\n\t * @method normalize\n\t */\n\tQuaternion.prototype.normalize = function(){\n\t    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n\t    if ( l === 0 ) {\n\t        this.x = 0;\n\t        this.y = 0;\n\t        this.z = 0;\n\t        this.w = 0;\n\t    } else {\n\t        l = 1 / l;\n\t        this.x *= l;\n\t        this.y *= l;\n\t        this.z *= l;\n\t        this.w *= l;\n\t    }\n\t};\n\t\n\t/**\n\t * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n\t * @method normalizeFast\n\t * @see http://jsperf.com/fast-quaternion-normalization\n\t * @author unphased, https://github.com/unphased\n\t */\n\tQuaternion.prototype.normalizeFast = function () {\n\t    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n\t    if ( f === 0 ) {\n\t        this.x = 0;\n\t        this.y = 0;\n\t        this.z = 0;\n\t        this.w = 0;\n\t    } else {\n\t        this.x *= f;\n\t        this.y *= f;\n\t        this.z *= f;\n\t        this.w *= f;\n\t    }\n\t};\n\t\n\t/**\n\t * Multiply the quaternion by a vector\n\t * @method vmult\n\t * @param {Vec3} v\n\t * @param {Vec3} target Optional\n\t * @return {Vec3}\n\t */\n\tQuaternion.prototype.vmult = function(v,target){\n\t    target = target || new Vec3();\n\t\n\t    var x = v.x,\n\t        y = v.y,\n\t        z = v.z;\n\t\n\t    var qx = this.x,\n\t        qy = this.y,\n\t        qz = this.z,\n\t        qw = this.w;\n\t\n\t    // q*v\n\t    var ix =  qw * x + qy * z - qz * y,\n\t    iy =  qw * y + qz * x - qx * z,\n\t    iz =  qw * z + qx * y - qy * x,\n\t    iw = -qx * x - qy * y - qz * z;\n\t\n\t    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\n\t    return target;\n\t};\n\t\n\t/**\n\t * Copies value of source to this quaternion.\n\t * @method copy\n\t * @param {Quaternion} source\n\t * @return {Quaternion} this\n\t */\n\tQuaternion.prototype.copy = function(source){\n\t    this.x = source.x;\n\t    this.y = source.y;\n\t    this.z = source.z;\n\t    this.w = source.w;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n\t * @method toEuler\n\t * @param {Vec3} target\n\t * @param string order Three-character string e.g. \"YZX\", which also is default.\n\t */\n\tQuaternion.prototype.toEuler = function(target,order){\n\t    order = order || \"YZX\";\n\t\n\t    var heading, attitude, bank;\n\t    var x = this.x, y = this.y, z = this.z, w = this.w;\n\t\n\t    switch(order){\n\t    case \"YZX\":\n\t        var test = x*y + z*w;\n\t        if (test > 0.499) { // singularity at north pole\n\t            heading = 2 * Math.atan2(x,w);\n\t            attitude = Math.PI/2;\n\t            bank = 0;\n\t        }\n\t        if (test < -0.499) { // singularity at south pole\n\t            heading = -2 * Math.atan2(x,w);\n\t            attitude = - Math.PI/2;\n\t            bank = 0;\n\t        }\n\t        if(isNaN(heading)){\n\t            var sqx = x*x;\n\t            var sqy = y*y;\n\t            var sqz = z*z;\n\t            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n\t            attitude = Math.asin(2*test); // attitude\n\t            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n\t        }\n\t        break;\n\t    default:\n\t        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n\t    }\n\t\n\t    target.y = heading;\n\t    target.z = attitude;\n\t    target.x = bank;\n\t};\n\t\n\t/**\n\t * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n\t * @method setFromEuler\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} z\n\t * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n\t */\n\tQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n\t    order = order || \"XYZ\";\n\t\n\t    var c1 = Math.cos( x / 2 );\n\t    var c2 = Math.cos( y / 2 );\n\t    var c3 = Math.cos( z / 2 );\n\t    var s1 = Math.sin( x / 2 );\n\t    var s2 = Math.sin( y / 2 );\n\t    var s3 = Math.sin( z / 2 );\n\t\n\t    if ( order === 'XYZ' ) {\n\t\n\t        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    } else if ( order === 'YXZ' ) {\n\t\n\t        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    } else if ( order === 'ZXY' ) {\n\t\n\t        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    } else if ( order === 'ZYX' ) {\n\t\n\t        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    } else if ( order === 'YZX' ) {\n\t\n\t        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t    } else if ( order === 'XZY' ) {\n\t\n\t        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n\t        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n\t        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n\t        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t    }\n\t\n\t    return this;\n\t\n\t};\n\t\n\tQuaternion.prototype.clone = function(){\n\t    return new Quaternion(this.x, this.y, this.z, this.w);\n\t};\n\n/***/ },\n/* 374 */\n/***/ function(module, exports) {\n\n\tmodule.exports = Material;\n\t\n\t/**\n\t * Defines a physics material.\n\t * @class Material\n\t * @constructor\n\t * @param {object} [options]\n\t * @author schteppe\n\t */\n\tfunction Material(options){\n\t    var name = '';\n\t    options = options || {};\n\t\n\t    // Backwards compatibility fix\n\t    if(typeof(options) === 'string'){\n\t        name = options;\n\t        options = {};\n\t    } else if(typeof(options) === 'object') {\n\t        name = '';\n\t    }\n\t\n\t    /**\n\t     * @property name\n\t     * @type {String}\n\t     */\n\t    this.name = name;\n\t\n\t    /**\n\t     * material id.\n\t     * @property id\n\t     * @type {number}\n\t     */\n\t    this.id = Material.idCounter++;\n\t\n\t    /**\n\t     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n\t     * @property {number} friction\n\t     */\n\t    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\t\n\t    /**\n\t     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n\t     * @property {number} restitution\n\t     */\n\t    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n\t}\n\t\n\tMaterial.idCounter = 0;\n\n\n/***/ },\n/* 375 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Box;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar ConvexPolyhedron = __webpack_require__(376);\n\t\n\t/**\n\t * A 3d box shape.\n\t * @class Box\n\t * @constructor\n\t * @param {Vec3} halfExtents\n\t * @author schteppe\n\t * @extends Shape\n\t */\n\tfunction Box(halfExtents){\n\t    Shape.call(this);\n\t\n\t    this.type = Shape.types.BOX;\n\t\n\t    /**\n\t     * @property halfExtents\n\t     * @type {Vec3}\n\t     */\n\t    this.halfExtents = halfExtents;\n\t\n\t    /**\n\t     * Used by the contact generator to make contacts with other convex polyhedra for example\n\t     * @property convexPolyhedronRepresentation\n\t     * @type {ConvexPolyhedron}\n\t     */\n\t    this.convexPolyhedronRepresentation = null;\n\t\n\t    this.updateConvexPolyhedronRepresentation();\n\t    this.updateBoundingSphereRadius();\n\t}\n\tBox.prototype = new Shape();\n\tBox.prototype.constructor = Box;\n\t\n\t/**\n\t * Updates the local convex polyhedron representation used for some collisions.\n\t * @method updateConvexPolyhedronRepresentation\n\t */\n\tBox.prototype.updateConvexPolyhedronRepresentation = function(){\n\t    var sx = this.halfExtents.x;\n\t    var sy = this.halfExtents.y;\n\t    var sz = this.halfExtents.z;\n\t    var V = Vec3;\n\t\n\t    var vertices = [\n\t        new V(-sx,-sy,-sz),\n\t        new V( sx,-sy,-sz),\n\t        new V( sx, sy,-sz),\n\t        new V(-sx, sy,-sz),\n\t        new V(-sx,-sy, sz),\n\t        new V( sx,-sy, sz),\n\t        new V( sx, sy, sz),\n\t        new V(-sx, sy, sz)\n\t    ];\n\t\n\t    var indices = [\n\t        [3,2,1,0], // -z\n\t        [4,5,6,7], // +z\n\t        [5,4,0,1], // -y\n\t        [2,3,7,6], // +y\n\t        [0,4,7,3], // -x\n\t        [1,2,6,5], // +x\n\t    ];\n\t\n\t    var axes = [\n\t        new V(0, 0, 1),\n\t        new V(0, 1, 0),\n\t        new V(1, 0, 0)\n\t    ];\n\t\n\t    var h = new ConvexPolyhedron(vertices, indices);\n\t    this.convexPolyhedronRepresentation = h;\n\t    h.material = this.material;\n\t};\n\t\n\t/**\n\t * @method calculateLocalInertia\n\t * @param  {Number} mass\n\t * @param  {Vec3} target\n\t * @return {Vec3}\n\t */\n\tBox.prototype.calculateLocalInertia = function(mass,target){\n\t    target = target || new Vec3();\n\t    Box.calculateInertia(this.halfExtents, mass, target);\n\t    return target;\n\t};\n\t\n\tBox.calculateInertia = function(halfExtents,mass,target){\n\t    var e = halfExtents;\n\t    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n\t    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n\t    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n\t};\n\t\n\t/**\n\t * Get the box 6 side normals\n\t * @method getSideNormals\n\t * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n\t * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n\t * @return {array}\n\t */\n\tBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n\t    var sides = sixTargetVectors;\n\t    var ex = this.halfExtents;\n\t    sides[0].set(  ex.x,     0,     0);\n\t    sides[1].set(     0,  ex.y,     0);\n\t    sides[2].set(     0,     0,  ex.z);\n\t    sides[3].set( -ex.x,     0,     0);\n\t    sides[4].set(     0, -ex.y,     0);\n\t    sides[5].set(     0,     0, -ex.z);\n\t\n\t    if(quat!==undefined){\n\t        for(var i=0; i!==sides.length; i++){\n\t            quat.vmult(sides[i],sides[i]);\n\t        }\n\t    }\n\t\n\t    return sides;\n\t};\n\t\n\tBox.prototype.volume = function(){\n\t    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n\t};\n\t\n\tBox.prototype.updateBoundingSphereRadius = function(){\n\t    this.boundingSphereRadius = this.halfExtents.norm();\n\t};\n\t\n\tvar worldCornerTempPos = new Vec3();\n\tvar worldCornerTempNeg = new Vec3();\n\tBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\t\n\t    var e = this.halfExtents;\n\t    var corners = [[  e.x,  e.y,  e.z],\n\t                   [ -e.x,  e.y,  e.z],\n\t                   [ -e.x, -e.y,  e.z],\n\t                   [ -e.x, -e.y, -e.z],\n\t                   [  e.x, -e.y, -e.z],\n\t                   [  e.x,  e.y, -e.z],\n\t                   [ -e.x,  e.y, -e.z],\n\t                   [  e.x, -e.y,  e.z]];\n\t    for(var i=0; i<corners.length; i++){\n\t        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n\t        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n\t        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n\t        callback(worldCornerTempPos.x,\n\t                 worldCornerTempPos.y,\n\t                 worldCornerTempPos.z);\n\t    }\n\t};\n\t\n\tvar worldCornersTemp = [\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3(),\n\t    new Vec3()\n\t];\n\tBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\t\n\t    var e = this.halfExtents;\n\t    worldCornersTemp[0].set(e.x, e.y, e.z);\n\t    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n\t    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n\t    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n\t    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n\t    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n\t    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n\t    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\t\n\t    var wc = worldCornersTemp[0];\n\t    quat.vmult(wc, wc);\n\t    pos.vadd(wc, wc);\n\t    max.copy(wc);\n\t    min.copy(wc);\n\t    for(var i=1; i<8; i++){\n\t        var wc = worldCornersTemp[i];\n\t        quat.vmult(wc, wc);\n\t        pos.vadd(wc, wc);\n\t        var x = wc.x;\n\t        var y = wc.y;\n\t        var z = wc.z;\n\t        if(x > max.x){\n\t            max.x = x;\n\t        }\n\t        if(y > max.y){\n\t            max.y = y;\n\t        }\n\t        if(z > max.z){\n\t            max.z = z;\n\t        }\n\t\n\t        if(x < min.x){\n\t            min.x = x;\n\t        }\n\t        if(y < min.y){\n\t            min.y = y;\n\t        }\n\t        if(z < min.z){\n\t            min.z = z;\n\t        }\n\t    }\n\t\n\t    // Get each axis max\n\t    // min.set(Infinity,Infinity,Infinity);\n\t    // max.set(-Infinity,-Infinity,-Infinity);\n\t    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n\t    //     if(x > max.x){\n\t    //         max.x = x;\n\t    //     }\n\t    //     if(y > max.y){\n\t    //         max.y = y;\n\t    //     }\n\t    //     if(z > max.z){\n\t    //         max.z = z;\n\t    //     }\n\t\n\t    //     if(x < min.x){\n\t    //         min.x = x;\n\t    //     }\n\t    //     if(y < min.y){\n\t    //         min.y = y;\n\t    //     }\n\t    //     if(z < min.z){\n\t    //         min.z = z;\n\t    //     }\n\t    // });\n\t};\n\n\n/***/ },\n/* 376 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = ConvexPolyhedron;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Transform = __webpack_require__(377);\n\t\n\t/**\n\t * A set of polygons describing a convex shape.\n\t * @class ConvexPolyhedron\n\t * @constructor\n\t * @extends Shape\n\t * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n\t * in the same 3D plane), instead these should be merged into one polygon.\n\t *\n\t * @param {array} points An array of Vec3's\n\t * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n\t *\n\t * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n\t * @author schteppe / https://github.com/schteppe\n\t * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n\t * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n\t *\n\t * @todo Move the clipping functions to ContactGenerator?\n\t * @todo Automatically merge coplanar polygons in constructor.\n\t */\n\tfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n\t    var that = this;\n\t    Shape.call(this);\n\t    this.type = Shape.types.CONVEXPOLYHEDRON;\n\t\n\t    /**\n\t     * Array of Vec3\n\t     * @property vertices\n\t     * @type {Array}\n\t     */\n\t    this.vertices = points||[];\n\t\n\t    this.worldVertices = []; // World transformed version of .vertices\n\t    this.worldVerticesNeedsUpdate = true;\n\t\n\t    /**\n\t     * Array of integer arrays, indicating which vertices each face consists of\n\t     * @property faces\n\t     * @type {Array}\n\t     */\n\t    this.faces = faces||[];\n\t\n\t    /**\n\t     * Array of Vec3\n\t     * @property faceNormals\n\t     * @type {Array}\n\t     */\n\t    this.faceNormals = [];\n\t    this.computeNormals();\n\t\n\t    this.worldFaceNormalsNeedsUpdate = true;\n\t    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\t\n\t    /**\n\t     * Array of Vec3\n\t     * @property uniqueEdges\n\t     * @type {Array}\n\t     */\n\t    this.uniqueEdges = [];\n\t\n\t    /**\n\t     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n\t     * @property {Array} uniqueAxes\n\t     */\n\t    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\t\n\t    this.computeEdges();\n\t    this.updateBoundingSphereRadius();\n\t}\n\tConvexPolyhedron.prototype = new Shape();\n\tConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\t\n\tvar computeEdges_tmpEdge = new Vec3();\n\t/**\n\t * Computes uniqueEdges\n\t * @method computeEdges\n\t */\n\tConvexPolyhedron.prototype.computeEdges = function(){\n\t    var faces = this.faces;\n\t    var vertices = this.vertices;\n\t    var nv = vertices.length;\n\t    var edges = this.uniqueEdges;\n\t\n\t    edges.length = 0;\n\t\n\t    var edge = computeEdges_tmpEdge;\n\t\n\t    for(var i=0; i !== faces.length; i++){\n\t        var face = faces[i];\n\t        var numVertices = face.length;\n\t        for(var j = 0; j !== numVertices; j++){\n\t            var k = ( j+1 ) % numVertices;\n\t            vertices[face[j]].vsub(vertices[face[k]], edge);\n\t            edge.normalize();\n\t            var found = false;\n\t            for(var p=0; p !== edges.length; p++){\n\t                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n\t                    found = true;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            if (!found){\n\t                edges.push(edge.clone());\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n\t * @method computeNormals\n\t */\n\tConvexPolyhedron.prototype.computeNormals = function(){\n\t    this.faceNormals.length = this.faces.length;\n\t\n\t    // Generate normals\n\t    for(var i=0; i<this.faces.length; i++){\n\t\n\t        // Check so all vertices exists for this face\n\t        for(var j=0; j<this.faces[i].length; j++){\n\t            if(!this.vertices[this.faces[i][j]]){\n\t                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n\t            }\n\t        }\n\t\n\t        var n = this.faceNormals[i] || new Vec3();\n\t        this.getFaceNormal(i,n);\n\t        n.negate(n);\n\t        this.faceNormals[i] = n;\n\t        var vertex = this.vertices[this.faces[i][0]];\n\t        if(n.dot(vertex) < 0){\n\t            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n\t            for(var j=0; j<this.faces[i].length; j++){\n\t                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Get face normal given 3 vertices\n\t * @static\n\t * @method getFaceNormal\n\t * @param {Vec3} va\n\t * @param {Vec3} vb\n\t * @param {Vec3} vc\n\t * @param {Vec3} target\n\t */\n\tvar cb = new Vec3();\n\tvar ab = new Vec3();\n\tConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n\t    vb.vsub(va,ab);\n\t    vc.vsub(vb,cb);\n\t    cb.cross(ab,target);\n\t    if ( !target.isZero() ) {\n\t        target.normalize();\n\t    }\n\t};\n\t\n\t/**\n\t * Compute the normal of a face from its vertices\n\t * @method getFaceNormal\n\t * @param  {Number} i\n\t * @param  {Vec3} target\n\t */\n\tConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n\t    var f = this.faces[i];\n\t    var va = this.vertices[f[0]];\n\t    var vb = this.vertices[f[1]];\n\t    var vc = this.vertices[f[2]];\n\t    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n\t};\n\t\n\t/**\n\t * @method clipAgainstHull\n\t * @param {Vec3} posA\n\t * @param {Quaternion} quatA\n\t * @param {ConvexPolyhedron} hullB\n\t * @param {Vec3} posB\n\t * @param {Quaternion} quatB\n\t * @param {Vec3} separatingNormal\n\t * @param {Number} minDist Clamp distance\n\t * @param {Number} maxDist\n\t * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n\t * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n\t */\n\tvar cah_WorldNormal = new Vec3();\n\tConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n\t    var WorldNormal = cah_WorldNormal;\n\t    var hullA = this;\n\t    var curMaxDist = maxDist;\n\t    var closestFaceB = -1;\n\t    var dmax = -Number.MAX_VALUE;\n\t    for(var face=0; face < hullB.faces.length; face++){\n\t        WorldNormal.copy(hullB.faceNormals[face]);\n\t        quatB.vmult(WorldNormal,WorldNormal);\n\t        //posB.vadd(WorldNormal,WorldNormal);\n\t        var d = WorldNormal.dot(separatingNormal);\n\t        if (d > dmax){\n\t            dmax = d;\n\t            closestFaceB = face;\n\t        }\n\t    }\n\t    var worldVertsB1 = [];\n\t    var polyB = hullB.faces[closestFaceB];\n\t    var numVertices = polyB.length;\n\t    for(var e0=0; e0<numVertices; e0++){\n\t        var b = hullB.vertices[polyB[e0]];\n\t        var worldb = new Vec3();\n\t        worldb.copy(b);\n\t        quatB.vmult(worldb,worldb);\n\t        posB.vadd(worldb,worldb);\n\t        worldVertsB1.push(worldb);\n\t    }\n\t\n\t    if (closestFaceB>=0){\n\t        this.clipFaceAgainstHull(separatingNormal,\n\t                                 posA,\n\t                                 quatA,\n\t                                 worldVertsB1,\n\t                                 minDist,\n\t                                 maxDist,\n\t                                 result);\n\t    }\n\t};\n\t\n\t/**\n\t * Find the separating axis between this hull and another\n\t * @method findSeparatingAxis\n\t * @param {ConvexPolyhedron} hullB\n\t * @param {Vec3} posA\n\t * @param {Quaternion} quatA\n\t * @param {Vec3} posB\n\t * @param {Quaternion} quatB\n\t * @param {Vec3} target The target vector to save the axis in\n\t * @return {bool} Returns false if a separation is found, else true\n\t */\n\tvar fsa_faceANormalWS3 = new Vec3(),\n\t    fsa_Worldnormal1 = new Vec3(),\n\t    fsa_deltaC = new Vec3(),\n\t    fsa_worldEdge0 = new Vec3(),\n\t    fsa_worldEdge1 = new Vec3(),\n\t    fsa_Cross = new Vec3();\n\tConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n\t    var faceANormalWS3 = fsa_faceANormalWS3,\n\t        Worldnormal1 = fsa_Worldnormal1,\n\t        deltaC = fsa_deltaC,\n\t        worldEdge0 = fsa_worldEdge0,\n\t        worldEdge1 = fsa_worldEdge1,\n\t        Cross = fsa_Cross;\n\t\n\t    var dmin = Number.MAX_VALUE;\n\t    var hullA = this;\n\t    var curPlaneTests=0;\n\t\n\t    if(!hullA.uniqueAxes){\n\t\n\t        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\t\n\t        // Test face normals from hullA\n\t        for(var i=0; i<numFacesA; i++){\n\t            var fi = faceListA ? faceListA[i] : i;\n\t\n\t            // Get world face normal\n\t            faceANormalWS3.copy(hullA.faceNormals[fi]);\n\t            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\t\n\t            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\t            if(d===false){\n\t                return false;\n\t            }\n\t\n\t            if(d<dmin){\n\t                dmin = d;\n\t                target.copy(faceANormalWS3);\n\t            }\n\t        }\n\t\n\t    } else {\n\t\n\t        // Test unique axes\n\t        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\t\n\t            // Get world axis\n\t            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\t\n\t            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\t            if(d===false){\n\t                return false;\n\t            }\n\t\n\t            if(d<dmin){\n\t                dmin = d;\n\t                target.copy(faceANormalWS3);\n\t            }\n\t        }\n\t    }\n\t\n\t    if(!hullB.uniqueAxes){\n\t\n\t        // Test face normals from hullB\n\t        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\t        for(var i=0;i<numFacesB;i++){\n\t\n\t            var fi = faceListB ? faceListB[i] : i;\n\t\n\t            Worldnormal1.copy(hullB.faceNormals[fi]);\n\t            quatB.vmult(Worldnormal1,Worldnormal1);\n\t            curPlaneTests++;\n\t            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n\t            if(d===false){\n\t                return false;\n\t            }\n\t\n\t            if(d<dmin){\n\t                dmin = d;\n\t                target.copy(Worldnormal1);\n\t            }\n\t        }\n\t    } else {\n\t\n\t        // Test unique axes in B\n\t        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n\t            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\t\n\t            curPlaneTests++;\n\t            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n\t            if(d===false){\n\t                return false;\n\t            }\n\t\n\t            if(d<dmin){\n\t                dmin = d;\n\t                target.copy(Worldnormal1);\n\t            }\n\t        }\n\t    }\n\t\n\t    // Test edges\n\t    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\t\n\t        // Get world edge\n\t        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\t\n\t        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\t\n\t            // Get world edge 2\n\t            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n\t            worldEdge0.cross(worldEdge1,Cross);\n\t\n\t            if(!Cross.almostZero()){\n\t                Cross.normalize();\n\t                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\t                if(dist === false){\n\t                    return false;\n\t                }\n\t                if(dist < dmin){\n\t                    dmin = dist;\n\t                    target.copy(Cross);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    posB.vsub(posA,deltaC);\n\t    if((deltaC.dot(target))>0.0){\n\t        target.negate(target);\n\t    }\n\t\n\t    return true;\n\t};\n\t\n\tvar maxminA=[], maxminB=[];\n\t\n\t/**\n\t * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n\t * @method testSepAxis\n\t * @param {Vec3} axis\n\t * @param {ConvexPolyhedron} hullB\n\t * @param {Vec3} posA\n\t * @param {Quaternion} quatA\n\t * @param {Vec3} posB\n\t * @param {Quaternion} quatB\n\t * @return {number} The overlap depth, or FALSE if no penetration.\n\t */\n\tConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n\t    var hullA=this;\n\t    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n\t    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n\t    var maxA = maxminA[0];\n\t    var minA = maxminA[1];\n\t    var maxB = maxminB[0];\n\t    var minB = maxminB[1];\n\t    if(maxA<minB || maxB<minA){\n\t        return false; // Separated\n\t    }\n\t    var d0 = maxA - minB;\n\t    var d1 = maxB - minA;\n\t    var depth = d0<d1 ? d0:d1;\n\t    return depth;\n\t};\n\t\n\tvar cli_aabbmin = new Vec3(),\n\t    cli_aabbmax = new Vec3();\n\t\n\t/**\n\t * @method calculateLocalInertia\n\t * @param  {Number} mass\n\t * @param  {Vec3} target\n\t */\n\tConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n\t    // Approximate with box inertia\n\t    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n\t    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n\t    var x = cli_aabbmax.x - cli_aabbmin.x,\n\t        y = cli_aabbmax.y - cli_aabbmin.y,\n\t        z = cli_aabbmax.z - cli_aabbmin.z;\n\t    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n\t    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n\t    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n\t};\n\t\n\t/**\n\t * @method getPlaneConstantOfFace\n\t * @param  {Number} face_i Index of the face\n\t * @return {Number}\n\t */\n\tConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n\t    var f = this.faces[face_i];\n\t    var n = this.faceNormals[face_i];\n\t    var v = this.vertices[f[0]];\n\t    var c = -n.dot(v);\n\t    return c;\n\t};\n\t\n\t/**\n\t * Clip a face against a hull.\n\t * @method clipFaceAgainstHull\n\t * @param {Vec3} separatingNormal\n\t * @param {Vec3} posA\n\t * @param {Quaternion} quatA\n\t * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n\t * @param {Number} minDist Distance clamping\n\t * @param {Number} maxDist\n\t * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n\t */\n\tvar cfah_faceANormalWS = new Vec3(),\n\t    cfah_edge0 = new Vec3(),\n\t    cfah_WorldEdge0 = new Vec3(),\n\t    cfah_worldPlaneAnormal1 = new Vec3(),\n\t    cfah_planeNormalWS1 = new Vec3(),\n\t    cfah_worldA1 = new Vec3(),\n\t    cfah_localPlaneNormal = new Vec3(),\n\t    cfah_planeNormalWS = new Vec3();\n\tConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n\t    var faceANormalWS = cfah_faceANormalWS,\n\t        edge0 = cfah_edge0,\n\t        WorldEdge0 = cfah_WorldEdge0,\n\t        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n\t        planeNormalWS1 = cfah_planeNormalWS1,\n\t        worldA1 = cfah_worldA1,\n\t        localPlaneNormal = cfah_localPlaneNormal,\n\t        planeNormalWS = cfah_planeNormalWS;\n\t\n\t    var hullA = this;\n\t    var worldVertsB2 = [];\n\t    var pVtxIn = worldVertsB1;\n\t    var pVtxOut = worldVertsB2;\n\t    // Find the face with normal closest to the separating axis\n\t    var closestFaceA = -1;\n\t    var dmin = Number.MAX_VALUE;\n\t    for(var face=0; face<hullA.faces.length; face++){\n\t        faceANormalWS.copy(hullA.faceNormals[face]);\n\t        quatA.vmult(faceANormalWS,faceANormalWS);\n\t        //posA.vadd(faceANormalWS,faceANormalWS);\n\t        var d = faceANormalWS.dot(separatingNormal);\n\t        if (d < dmin){\n\t            dmin = d;\n\t            closestFaceA = face;\n\t        }\n\t    }\n\t    if (closestFaceA < 0){\n\t        // console.log(\"--- did not find any closest face... ---\");\n\t        return;\n\t    }\n\t    //console.log(\"closest A: \",closestFaceA);\n\t    // Get the face and construct connected faces\n\t    var polyA = hullA.faces[closestFaceA];\n\t    polyA.connectedFaces = [];\n\t    for(var i=0; i<hullA.faces.length; i++){\n\t        for(var j=0; j<hullA.faces[i].length; j++){\n\t            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n\t                polyA.connectedFaces.push(i);\n\t            }\n\t        }\n\t    }\n\t    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n\t    var numContacts = pVtxIn.length;\n\t    var numVerticesA = polyA.length;\n\t    var res = [];\n\t    for(var e0=0; e0<numVerticesA; e0++){\n\t        var a = hullA.vertices[polyA[e0]];\n\t        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n\t        a.vsub(b,edge0);\n\t        WorldEdge0.copy(edge0);\n\t        quatA.vmult(WorldEdge0,WorldEdge0);\n\t        posA.vadd(WorldEdge0,WorldEdge0);\n\t        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n\t        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n\t        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n\t        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n\t        planeNormalWS1.negate(planeNormalWS1);\n\t        worldA1.copy(a);\n\t        quatA.vmult(worldA1,worldA1);\n\t        posA.vadd(worldA1,worldA1);\n\t        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n\t        var planeEqWS;\n\t        if(true){\n\t            var otherFace = polyA.connectedFaces[e0];\n\t            localPlaneNormal.copy(this.faceNormals[otherFace]);\n\t            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\t\n\t            planeNormalWS.copy(localPlaneNormal);\n\t            quatA.vmult(planeNormalWS,planeNormalWS);\n\t            //posA.vadd(planeNormalWS,planeNormalWS);\n\t            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\t        } else  {\n\t            planeNormalWS.copy(planeNormalWS1);\n\t            planeEqWS = planeEqWS1;\n\t        }\n\t\n\t        // Clip face against our constructed plane\n\t        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\t\n\t        // Throw away all clipped points, but save the reamining until next clip\n\t        while(pVtxIn.length){\n\t            pVtxIn.shift();\n\t        }\n\t        while(pVtxOut.length){\n\t            pVtxIn.push(pVtxOut.shift());\n\t        }\n\t    }\n\t\n\t    //console.log(\"Resulting points after clip:\",pVtxIn);\n\t\n\t    // only keep contact points that are behind the witness face\n\t    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\t\n\t    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n\t    planeNormalWS.copy(localPlaneNormal);\n\t    quatA.vmult(planeNormalWS,planeNormalWS);\n\t\n\t    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\t    for (var i=0; i<pVtxIn.length; i++){\n\t        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n\t        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n\t        if (depth <=minDist){\n\t            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n\t            depth = minDist;\n\t        }\n\t\n\t        if (depth <=maxDist){\n\t            var point = pVtxIn[i];\n\t            if(depth<=0){\n\t                /*console.log(\"Got contact point \",point.toString(),\n\t                  \", depth=\",depth,\n\t                  \"contact normal=\",separatingNormal.toString(),\n\t                  \"plane\",planeNormalWS.toString(),\n\t                  \"planeConstant\",planeEqWS);*/\n\t                var p = {\n\t                    point:point,\n\t                    normal:planeNormalWS,\n\t                    depth: depth,\n\t                };\n\t                result.push(p);\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Clip a face in a hull against the back of a plane.\n\t * @method clipFaceAgainstPlane\n\t * @param {Array} inVertices\n\t * @param {Array} outVertices\n\t * @param {Vec3} planeNormal\n\t * @param {Number} planeConstant The constant in the mathematical plane equation\n\t */\n\tConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n\t    var n_dot_first, n_dot_last;\n\t    var numVerts = inVertices.length;\n\t\n\t    if(numVerts < 2){\n\t        return outVertices;\n\t    }\n\t\n\t    var firstVertex = inVertices[inVertices.length-1],\n\t        lastVertex =   inVertices[0];\n\t\n\t    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\t\n\t    for(var vi = 0; vi < numVerts; vi++){\n\t        lastVertex = inVertices[vi];\n\t        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\t        if(n_dot_first < 0){\n\t            if(n_dot_last < 0){\n\t                // Start < 0, end < 0, so output lastVertex\n\t                var newv = new Vec3();\n\t                newv.copy(lastVertex);\n\t                outVertices.push(newv);\n\t            } else {\n\t                // Start < 0, end >= 0, so output intersection\n\t                var newv = new Vec3();\n\t                firstVertex.lerp(lastVertex,\n\t                                 n_dot_first / (n_dot_first - n_dot_last),\n\t                                 newv);\n\t                outVertices.push(newv);\n\t            }\n\t        } else {\n\t            if(n_dot_last<0){\n\t                // Start >= 0, end < 0 so output intersection and end\n\t                var newv = new Vec3();\n\t                firstVertex.lerp(lastVertex,\n\t                                 n_dot_first / (n_dot_first - n_dot_last),\n\t                                 newv);\n\t                outVertices.push(newv);\n\t                outVertices.push(lastVertex);\n\t            }\n\t        }\n\t        firstVertex = lastVertex;\n\t        n_dot_first = n_dot_last;\n\t    }\n\t    return outVertices;\n\t};\n\t\n\t// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n\tConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n\t    var N = this.vertices.length;\n\t    while(this.worldVertices.length < N){\n\t        this.worldVertices.push( new Vec3() );\n\t    }\n\t\n\t    var verts = this.vertices,\n\t        worldVerts = this.worldVertices;\n\t    for(var i=0; i!==N; i++){\n\t        quat.vmult( verts[i] , worldVerts[i] );\n\t        position.vadd( worldVerts[i] , worldVerts[i] );\n\t    }\n\t\n\t    this.worldVerticesNeedsUpdate = false;\n\t};\n\t\n\tvar computeLocalAABB_worldVert = new Vec3();\n\tConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n\t    var n = this.vertices.length,\n\t        vertices = this.vertices,\n\t        worldVert = computeLocalAABB_worldVert;\n\t\n\t    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n\t    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\t\n\t    for(var i=0; i<n; i++){\n\t        var v = vertices[i];\n\t        if     (v.x < aabbmin.x){\n\t            aabbmin.x = v.x;\n\t        } else if(v.x > aabbmax.x){\n\t            aabbmax.x = v.x;\n\t        }\n\t        if     (v.y < aabbmin.y){\n\t            aabbmin.y = v.y;\n\t        } else if(v.y > aabbmax.y){\n\t            aabbmax.y = v.y;\n\t        }\n\t        if     (v.z < aabbmin.z){\n\t            aabbmin.z = v.z;\n\t        } else if(v.z > aabbmax.z){\n\t            aabbmax.z = v.z;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n\t * @method computeWorldFaceNormals\n\t * @param  {Quaternion} quat\n\t */\n\tConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n\t    var N = this.faceNormals.length;\n\t    while(this.worldFaceNormals.length < N){\n\t        this.worldFaceNormals.push( new Vec3() );\n\t    }\n\t\n\t    var normals = this.faceNormals,\n\t        worldNormals = this.worldFaceNormals;\n\t    for(var i=0; i!==N; i++){\n\t        quat.vmult( normals[i] , worldNormals[i] );\n\t    }\n\t\n\t    this.worldFaceNormalsNeedsUpdate = false;\n\t};\n\t\n\t/**\n\t * @method updateBoundingSphereRadius\n\t */\n\tConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n\t    // Assume points are distributed with local (0,0,0) as center\n\t    var max2 = 0;\n\t    var verts = this.vertices;\n\t    for(var i=0, N=verts.length; i!==N; i++) {\n\t        var norm2 = verts[i].norm2();\n\t        if(norm2 > max2){\n\t            max2 = norm2;\n\t        }\n\t    }\n\t    this.boundingSphereRadius = Math.sqrt(max2);\n\t};\n\t\n\tvar tempWorldVertex = new Vec3();\n\t\n\t/**\n\t * @method calculateWorldAABB\n\t * @param {Vec3}        pos\n\t * @param {Quaternion}  quat\n\t * @param {Vec3}        min\n\t * @param {Vec3}        max\n\t */\n\tConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\t    var n = this.vertices.length, verts = this.vertices;\n\t    var minx,miny,minz,maxx,maxy,maxz;\n\t    for(var i=0; i<n; i++){\n\t        tempWorldVertex.copy(verts[i]);\n\t        quat.vmult(tempWorldVertex,tempWorldVertex);\n\t        pos.vadd(tempWorldVertex,tempWorldVertex);\n\t        var v = tempWorldVertex;\n\t        if     (v.x < minx || minx===undefined){\n\t            minx = v.x;\n\t        } else if(v.x > maxx || maxx===undefined){\n\t            maxx = v.x;\n\t        }\n\t\n\t        if     (v.y < miny || miny===undefined){\n\t            miny = v.y;\n\t        } else if(v.y > maxy || maxy===undefined){\n\t            maxy = v.y;\n\t        }\n\t\n\t        if     (v.z < minz || minz===undefined){\n\t            minz = v.z;\n\t        } else if(v.z > maxz || maxz===undefined){\n\t            maxz = v.z;\n\t        }\n\t    }\n\t    min.set(minx,miny,minz);\n\t    max.set(maxx,maxy,maxz);\n\t};\n\t\n\t/**\n\t * Get approximate convex volume\n\t * @method volume\n\t * @return {Number}\n\t */\n\tConvexPolyhedron.prototype.volume = function(){\n\t    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n\t};\n\t\n\t/**\n\t * Get an average of all the vertices positions\n\t * @method getAveragePointLocal\n\t * @param  {Vec3} target\n\t * @return {Vec3}\n\t */\n\tConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n\t    target = target || new Vec3();\n\t    var n = this.vertices.length,\n\t        verts = this.vertices;\n\t    for(var i=0; i<n; i++){\n\t        target.vadd(verts[i],target);\n\t    }\n\t    target.mult(1/n,target);\n\t    return target;\n\t};\n\t\n\t/**\n\t * Transform all local points. Will change the .vertices\n\t * @method transformAllPoints\n\t * @param  {Vec3} offset\n\t * @param  {Quaternion} quat\n\t */\n\tConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n\t    var n = this.vertices.length,\n\t        verts = this.vertices;\n\t\n\t    // Apply rotation\n\t    if(quat){\n\t        // Rotate vertices\n\t        for(var i=0; i<n; i++){\n\t            var v = verts[i];\n\t            quat.vmult(v,v);\n\t        }\n\t        // Rotate face normals\n\t        for(var i=0; i<this.faceNormals.length; i++){\n\t            var v = this.faceNormals[i];\n\t            quat.vmult(v,v);\n\t        }\n\t        /*\n\t        // Rotate edges\n\t        for(var i=0; i<this.uniqueEdges.length; i++){\n\t            var v = this.uniqueEdges[i];\n\t            quat.vmult(v,v);\n\t        }*/\n\t    }\n\t\n\t    // Apply offset\n\t    if(offset){\n\t        for(var i=0; i<n; i++){\n\t            var v = verts[i];\n\t            v.vadd(offset,v);\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n\t * @method pointIsInside\n\t * @param  {Vec3} p      A point given in local coordinates\n\t * @return {Boolean}\n\t */\n\tvar ConvexPolyhedron_pointIsInside = new Vec3();\n\tvar ConvexPolyhedron_vToP = new Vec3();\n\tvar ConvexPolyhedron_vToPointInside = new Vec3();\n\tConvexPolyhedron.prototype.pointIsInside = function(p){\n\t    var n = this.vertices.length,\n\t        verts = this.vertices,\n\t        faces = this.faces,\n\t        normals = this.faceNormals;\n\t    var positiveResult = null;\n\t    var N = this.faces.length;\n\t    var pointInside = ConvexPolyhedron_pointIsInside;\n\t    this.getAveragePointLocal(pointInside);\n\t    for(var i=0; i<N; i++){\n\t        var numVertices = this.faces[i].length;\n\t        var n = normals[i];\n\t        var v = verts[faces[i][0]]; // We only need one point in the face\n\t\n\t        // This dot product determines which side of the edge the point is\n\t        var vToP = ConvexPolyhedron_vToP;\n\t        p.vsub(v,vToP);\n\t        var r1 = n.dot(vToP);\n\t\n\t        var vToPointInside = ConvexPolyhedron_vToPointInside;\n\t        pointInside.vsub(v,vToPointInside);\n\t        var r2 = n.dot(vToPointInside);\n\t\n\t        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n\t            return false; // Encountered some other sign. Exit.\n\t        } else {\n\t        }\n\t    }\n\t\n\t    // If we got here, all dot products were of the same sign.\n\t    return positiveResult ? 1 : -1;\n\t};\n\t\n\t/**\n\t * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n\t * @static\n\t * @method project\n\t * @param {ConvexPolyhedron} hull\n\t * @param {Vec3} axis\n\t * @param {Vec3} pos\n\t * @param {Quaternion} quat\n\t * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n\t */\n\tvar project_worldVertex = new Vec3();\n\tvar project_localAxis = new Vec3();\n\tvar project_localOrigin = new Vec3();\n\tConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n\t    var n = hull.vertices.length,\n\t        worldVertex = project_worldVertex,\n\t        localAxis = project_localAxis,\n\t        max = 0,\n\t        min = 0,\n\t        localOrigin = project_localOrigin,\n\t        vs = hull.vertices;\n\t\n\t    localOrigin.setZero();\n\t\n\t    // Transform the axis to local\n\t    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n\t    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n\t    var add = localOrigin.dot(localAxis);\n\t\n\t    min = max = vs[0].dot(localAxis);\n\t\n\t    for(var i = 1; i < n; i++){\n\t        var val = vs[i].dot(localAxis);\n\t\n\t        if(val > max){\n\t            max = val;\n\t        }\n\t\n\t        if(val < min){\n\t            min = val;\n\t        }\n\t    }\n\t\n\t    min -= add;\n\t    max -= add;\n\t\n\t    if(min > max){\n\t        // Inconsistent - swap\n\t        var temp = min;\n\t        min = max;\n\t        max = temp;\n\t    }\n\t    // Output\n\t    result[0] = max;\n\t    result[1] = min;\n\t};\n\n\n/***/ },\n/* 377 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\t\n\tmodule.exports = Transform;\n\t\n\t/**\n\t * @class Transform\n\t * @constructor\n\t */\n\tfunction Transform(options) {\n\t    options = options || {};\n\t\n\t\t/**\n\t\t * @property {Vec3} position\n\t\t */\n\t\tthis.position = new Vec3();\n\t    if(options.position){\n\t        this.position.copy(options.position);\n\t    }\n\t\n\t\t/**\n\t\t * @property {Quaternion} quaternion\n\t\t */\n\t\tthis.quaternion = new Quaternion();\n\t    if(options.quaternion){\n\t        this.quaternion.copy(options.quaternion);\n\t    }\n\t}\n\t\n\tvar tmpQuat = new Quaternion();\n\t\n\t/**\n\t * @static\n\t * @method pointToLocaFrame\n\t * @param {Vec3} position\n\t * @param {Quaternion} quaternion\n\t * @param {Vec3} worldPoint\n\t * @param {Vec3} result\n\t */\n\tTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n\t    var result = result || new Vec3();\n\t    worldPoint.vsub(position, result);\n\t    quaternion.conjugate(tmpQuat);\n\t    tmpQuat.vmult(result, result);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Get a global point in local transform coordinates.\n\t * @method pointToLocal\n\t * @param  {Vec3} point\n\t * @param  {Vec3} result\n\t * @return {Vec3} The \"result\" vector object\n\t */\n\tTransform.prototype.pointToLocal = function(worldPoint, result){\n\t    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n\t};\n\t\n\t/**\n\t * @static\n\t * @method pointToWorldFrame\n\t * @param {Vec3} position\n\t * @param {Vec3} quaternion\n\t * @param {Vec3} localPoint\n\t * @param {Vec3} result\n\t */\n\tTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n\t    var result = result || new Vec3();\n\t    quaternion.vmult(localPoint, result);\n\t    result.vadd(position, result);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Get a local point in global transform coordinates.\n\t * @method pointToWorld\n\t * @param  {Vec3} point\n\t * @param  {Vec3} result\n\t * @return {Vec3} The \"result\" vector object\n\t */\n\tTransform.prototype.pointToWorld = function(localPoint, result){\n\t    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n\t};\n\t\n\t\n\tTransform.prototype.vectorToWorldFrame = function(localVector, result){\n\t    var result = result || new Vec3();\n\t    this.quaternion.vmult(localVector, result);\n\t    return result;\n\t};\n\t\n\tTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n\t    quaternion.vmult(localVector, result);\n\t    return result;\n\t};\n\t\n\tTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n\t    var result = result || new Vec3();\n\t    quaternion.w *= -1;\n\t    quaternion.vmult(worldVector, result);\n\t    quaternion.w *= -1;\n\t    return result;\n\t};\n\n\n/***/ },\n/* 378 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Body = __webpack_require__(370);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Shape = __webpack_require__(372);\n\tvar Plane = __webpack_require__(379);\n\t\n\tmodule.exports = Broadphase;\n\t\n\t/**\n\t * Base class for broadphase implementations\n\t * @class Broadphase\n\t * @constructor\n\t * @author schteppe\n\t */\n\tfunction Broadphase(){\n\t    /**\n\t    * The world to search for collisions in.\n\t    * @property world\n\t    * @type {World}\n\t    */\n\t    this.world = null;\n\t\n\t    /**\n\t     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n\t     * @property useBoundingBoxes\n\t     * @type {Boolean}\n\t     */\n\t    this.useBoundingBoxes = false;\n\t\n\t    /**\n\t     * Set to true if the objects in the world moved.\n\t     * @property {Boolean} dirty\n\t     */\n\t    this.dirty = true;\n\t}\n\t\n\t/**\n\t * Get the collision pairs from the world\n\t * @method collisionPairs\n\t * @param {World} world The world to search in\n\t * @param {Array} p1 Empty array to be filled with body objects\n\t * @param {Array} p2 Empty array to be filled with body objects\n\t */\n\tBroadphase.prototype.collisionPairs = function(world,p1,p2){\n\t    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n\t};\n\t\n\t/**\n\t * Check if a body pair needs to be intersection tested at all.\n\t * @method needBroadphaseCollision\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @return {bool}\n\t */\n\tvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\n\tBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\t\n\t    // Check collision filter masks\n\t    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n\t        return false;\n\t    }\n\t\n\t    // Check types\n\t    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n\t       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n\t        // Both bodies are static, kinematic or sleeping. Skip.\n\t        return false;\n\t    }\n\t\n\t    return true;\n\t};\n\t\n\t/**\n\t * Check if the bounding volumes of two bodies intersect.\n\t * @method intersectionTest\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {array} pairs1\n\t * @param {array} pairs2\n\t  */\n\tBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n\t    if(this.useBoundingBoxes){\n\t        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n\t    } else {\n\t        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n\t    }\n\t};\n\t\n\t/**\n\t * Check if the bounding spheres of two bodies are intersecting.\n\t * @method doBoundingSphereBroadphase\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Array} pairs1 bodyA is appended to this array if intersection\n\t * @param {Array} pairs2 bodyB is appended to this array if intersection\n\t */\n\tvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n\t    Broadphase_collisionPairs_normal =  new Vec3(),\n\t    Broadphase_collisionPairs_quat =  new Quaternion(),\n\t    Broadphase_collisionPairs_relpos  =  new Vec3();\n\tBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n\t    var r = Broadphase_collisionPairs_r;\n\t    bodyB.position.vsub(bodyA.position,r);\n\t    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n\t    var norm2 = r.norm2();\n\t    if(norm2 < boundingRadiusSum2){\n\t        pairs1.push(bodyA);\n\t        pairs2.push(bodyB);\n\t    }\n\t};\n\t\n\t/**\n\t * Check if the bounding boxes of two bodies are intersecting.\n\t * @method doBoundingBoxBroadphase\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Array} pairs1\n\t * @param {Array} pairs2\n\t */\n\tBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n\t    if(bodyA.aabbNeedsUpdate){\n\t        bodyA.computeAABB();\n\t    }\n\t    if(bodyB.aabbNeedsUpdate){\n\t        bodyB.computeAABB();\n\t    }\n\t\n\t    // Check AABB / AABB\n\t    if(bodyA.aabb.overlaps(bodyB.aabb)){\n\t        pairs1.push(bodyA);\n\t        pairs2.push(bodyB);\n\t    }\n\t};\n\t\n\t/**\n\t * Removes duplicate pairs from the pair arrays.\n\t * @method makePairsUnique\n\t * @param {Array} pairs1\n\t * @param {Array} pairs2\n\t */\n\tvar Broadphase_makePairsUnique_temp = { keys:[] },\n\t    Broadphase_makePairsUnique_p1 = [],\n\t    Broadphase_makePairsUnique_p2 = [];\n\tBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n\t    var t = Broadphase_makePairsUnique_temp,\n\t        p1 = Broadphase_makePairsUnique_p1,\n\t        p2 = Broadphase_makePairsUnique_p2,\n\t        N = pairs1.length;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        p1[i] = pairs1[i];\n\t        p2[i] = pairs2[i];\n\t    }\n\t\n\t    pairs1.length = 0;\n\t    pairs2.length = 0;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        var id1 = p1[i].id,\n\t            id2 = p2[i].id;\n\t        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n\t        t[key] = i;\n\t        t.keys.push(key);\n\t    }\n\t\n\t    for(var i=0; i!==t.keys.length; i++){\n\t        var key = t.keys.pop(),\n\t            pairIndex = t[key];\n\t        pairs1.push(p1[pairIndex]);\n\t        pairs2.push(p2[pairIndex]);\n\t        delete t[key];\n\t    }\n\t};\n\t\n\t/**\n\t * To be implemented by subcasses\n\t * @method setWorld\n\t * @param {World} world\n\t */\n\tBroadphase.prototype.setWorld = function(world){\n\t};\n\t\n\t/**\n\t * Check if the bounding spheres of two bodies overlap.\n\t * @method boundingSphereCheck\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @return {boolean}\n\t */\n\tvar bsc_dist = new Vec3();\n\tBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n\t    var dist = bsc_dist;\n\t    bodyA.position.vsub(bodyB.position,dist);\n\t    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n\t};\n\t\n\t/**\n\t * Returns all the bodies within the AABB.\n\t * @method aabbQuery\n\t * @param  {World} world\n\t * @param  {AABB} aabb\n\t * @param  {array} result An array to store resulting bodies in.\n\t * @return {array}\n\t */\n\tBroadphase.prototype.aabbQuery = function(world, aabb, result){\n\t    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n\t    return [];\n\t};\n\n/***/ },\n/* 379 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Plane;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n\t * @class Plane\n\t * @constructor\n\t * @extends Shape\n\t * @author schteppe\n\t */\n\tfunction Plane(){\n\t    Shape.call(this);\n\t    this.type = Shape.types.PLANE;\n\t\n\t    // World oriented normal\n\t    this.worldNormal = new Vec3();\n\t    this.worldNormalNeedsUpdate = true;\n\t\n\t    this.boundingSphereRadius = Number.MAX_VALUE;\n\t}\n\tPlane.prototype = new Shape();\n\tPlane.prototype.constructor = Plane;\n\t\n\tPlane.prototype.computeWorldNormal = function(quat){\n\t    var n = this.worldNormal;\n\t    n.set(0,0,1);\n\t    quat.vmult(n,n);\n\t    this.worldNormalNeedsUpdate = false;\n\t};\n\t\n\tPlane.prototype.calculateLocalInertia = function(mass,target){\n\t    target = target || new Vec3();\n\t    return target;\n\t};\n\t\n\tPlane.prototype.volume = function(){\n\t    return Number.MAX_VALUE; // The plane is infinite...\n\t};\n\t\n\tvar tempNormal = new Vec3();\n\tPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n\t    // The plane AABB is infinite, except if the normal is pointing along any axis\n\t    tempNormal.set(0,0,1); // Default plane normal is z\n\t    quat.vmult(tempNormal,tempNormal);\n\t    var maxVal = Number.MAX_VALUE;\n\t    min.set(-maxVal, -maxVal, -maxVal);\n\t    max.set(maxVal, maxVal, maxVal);\n\t\n\t    if(tempNormal.x === 1){ max.x = pos.x; }\n\t    if(tempNormal.y === 1){ max.y = pos.y; }\n\t    if(tempNormal.z === 1){ max.z = pos.z; }\n\t\n\t    if(tempNormal.x === -1){ min.x = pos.x; }\n\t    if(tempNormal.y === -1){ min.y = pos.y; }\n\t    if(tempNormal.z === -1){ min.z = pos.z; }\n\t};\n\t\n\tPlane.prototype.updateBoundingSphereRadius = function(){\n\t    this.boundingSphereRadius = Number.MAX_VALUE;\n\t};\n\n/***/ },\n/* 380 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Constraint;\n\t\n\tvar Utils = __webpack_require__(368);\n\t\n\t/**\n\t * Constraint base class\n\t * @class Constraint\n\t * @author schteppe\n\t * @constructor\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {object} [options]\n\t * @param {boolean} [options.collideConnected=true]\n\t * @param {boolean} [options.wakeUpBodies=true]\n\t */\n\tfunction Constraint(bodyA, bodyB, options){\n\t    options = Utils.defaults(options,{\n\t        collideConnected : true,\n\t        wakeUpBodies : true,\n\t    });\n\t\n\t    /**\n\t     * Equations to be solved in this constraint\n\t     * @property equations\n\t     * @type {Array}\n\t     */\n\t    this.equations = [];\n\t\n\t    /**\n\t     * @property {Body} bodyA\n\t     */\n\t    this.bodyA = bodyA;\n\t\n\t    /**\n\t     * @property {Body} bodyB\n\t     */\n\t    this.bodyB = bodyB;\n\t\n\t    /**\n\t     * @property {Number} id\n\t     */\n\t    this.id = Constraint.idCounter++;\n\t\n\t    /**\n\t     * Set to true if you want the bodies to collide when they are connected.\n\t     * @property collideConnected\n\t     * @type {boolean}\n\t     */\n\t    this.collideConnected = options.collideConnected;\n\t\n\t    if(options.wakeUpBodies){\n\t        if(bodyA){\n\t            bodyA.wakeUp();\n\t        }\n\t        if(bodyB){\n\t            bodyB.wakeUp();\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * Update all the equations with data.\n\t * @method update\n\t */\n\tConstraint.prototype.update = function(){\n\t    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n\t};\n\t\n\t/**\n\t * Enables all equations in the constraint.\n\t * @method enable\n\t */\n\tConstraint.prototype.enable = function(){\n\t    var eqs = this.equations;\n\t    for(var i=0; i<eqs.length; i++){\n\t        eqs[i].enabled = true;\n\t    }\n\t};\n\t\n\t/**\n\t * Disables all equations in the constraint.\n\t * @method disable\n\t */\n\tConstraint.prototype.disable = function(){\n\t    var eqs = this.equations;\n\t    for(var i=0; i<eqs.length; i++){\n\t        eqs[i].enabled = false;\n\t    }\n\t};\n\t\n\tConstraint.idCounter = 0;\n\n\n/***/ },\n/* 381 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = ContactEquation;\n\t\n\tvar Equation = __webpack_require__(382);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\t\n\t/**\n\t * Contact/non-penetration constraint equation\n\t * @class ContactEquation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @extends Equation\n\t */\n\tfunction ContactEquation(bodyA, bodyB, maxForce){\n\t    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\t    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\t\n\t    /**\n\t     * @property restitution\n\t     * @type {Number}\n\t     */\n\t    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\t\n\t    /**\n\t     * World-oriented vector that goes from the center of bi to the contact point.\n\t     * @property {Vec3} ri\n\t     */\n\t    this.ri = new Vec3();\n\t\n\t    /**\n\t     * World-oriented vector that starts in body j position and goes to the contact point.\n\t     * @property {Vec3} rj\n\t     */\n\t    this.rj = new Vec3();\n\t\n\t    /**\n\t     * Contact normal, pointing out of body i.\n\t     * @property {Vec3} ni\n\t     */\n\t    this.ni = new Vec3();\n\t}\n\t\n\tContactEquation.prototype = new Equation();\n\tContactEquation.prototype.constructor = ContactEquation;\n\t\n\tvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\tvar ContactEquation_computeB_temp2 = new Vec3();\n\tvar ContactEquation_computeB_temp3 = new Vec3();\n\tContactEquation.prototype.computeB = function(h){\n\t    var a = this.a,\n\t        b = this.b,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        ri = this.ri,\n\t        rj = this.rj,\n\t        rixn = ContactEquation_computeB_temp1,\n\t        rjxn = ContactEquation_computeB_temp2,\n\t\n\t        vi = bi.velocity,\n\t        wi = bi.angularVelocity,\n\t        fi = bi.force,\n\t        taui = bi.torque,\n\t\n\t        vj = bj.velocity,\n\t        wj = bj.angularVelocity,\n\t        fj = bj.force,\n\t        tauj = bj.torque,\n\t\n\t        penetrationVec = ContactEquation_computeB_temp3,\n\t\n\t        GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t\n\t        n = this.ni;\n\t\n\t    // Caluclate cross products\n\t    ri.cross(n,rixn);\n\t    rj.cross(n,rjxn);\n\t\n\t    // g = xj+rj -(xi+ri)\n\t    // G = [ -ni  -rixn  ni  rjxn ]\n\t    n.negate(GA.spatial);\n\t    rixn.negate(GA.rotational);\n\t    GB.spatial.copy(n);\n\t    GB.rotational.copy(rjxn);\n\t\n\t    // Calculate the penetration vector\n\t    penetrationVec.copy(bj.position);\n\t    penetrationVec.vadd(rj,penetrationVec);\n\t    penetrationVec.vsub(bi.position,penetrationVec);\n\t    penetrationVec.vsub(ri,penetrationVec);\n\t\n\t    var g = n.dot(penetrationVec);\n\t\n\t    // Compute iteration\n\t    var ePlusOne = this.restitution + 1;\n\t    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n\t    var GiMf = this.computeGiMf();\n\t\n\t    var B = - g * a - GW * b - h*GiMf;\n\t\n\t    return B;\n\t};\n\t\n\tvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\n\tvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\n\tvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\n\tvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\n\tvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\t\n\t/**\n\t * Get the current relative velocity in the contact point.\n\t * @method getImpactVelocityAlongNormal\n\t * @return {number}\n\t */\n\tContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n\t    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n\t    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n\t    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n\t    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n\t    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\t\n\t    this.bi.position.vadd(this.ri, xi);\n\t    this.bj.position.vadd(this.rj, xj);\n\t\n\t    this.bi.getVelocityAtWorldPoint(xi, vi);\n\t    this.bj.getVelocityAtWorldPoint(xj, vj);\n\t\n\t    vi.vsub(vj, relVel);\n\t\n\t    return this.ni.dot(relVel);\n\t};\n\t\n\n\n/***/ },\n/* 382 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Equation;\n\t\n\tvar JacobianElement = __webpack_require__(383),\n\t    Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Equation base class\n\t * @class Equation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bi\n\t * @param {Body} bj\n\t * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n\t * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n\t */\n\tfunction Equation(bi,bj,minForce,maxForce){\n\t    this.id = Equation.id++;\n\t\n\t    /**\n\t     * @property {number} minForce\n\t     */\n\t    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\t\n\t    /**\n\t     * @property {number} maxForce\n\t     */\n\t    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\t\n\t    /**\n\t     * @property bi\n\t     * @type {Body}\n\t     */\n\t    this.bi = bi;\n\t\n\t    /**\n\t     * @property bj\n\t     * @type {Body}\n\t     */\n\t    this.bj = bj;\n\t\n\t    /**\n\t     * SPOOK parameter\n\t     * @property {number} a\n\t     */\n\t    this.a = 0.0;\n\t\n\t    /**\n\t     * SPOOK parameter\n\t     * @property {number} b\n\t     */\n\t    this.b = 0.0;\n\t\n\t    /**\n\t     * SPOOK parameter\n\t     * @property {number} eps\n\t     */\n\t    this.eps = 0.0;\n\t\n\t    /**\n\t     * @property {JacobianElement} jacobianElementA\n\t     */\n\t    this.jacobianElementA = new JacobianElement();\n\t\n\t    /**\n\t     * @property {JacobianElement} jacobianElementB\n\t     */\n\t    this.jacobianElementB = new JacobianElement();\n\t\n\t    /**\n\t     * @property {boolean} enabled\n\t     * @default true\n\t     */\n\t    this.enabled = true;\n\t\n\t    // Set typical spook params\n\t    this.setSpookParams(1e7,4,1/60);\n\t}\n\tEquation.prototype.constructor = Equation;\n\t\n\tEquation.id = 0;\n\t\n\t/**\n\t * Recalculates a,b,eps.\n\t * @method setSpookParams\n\t */\n\tEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n\t    var d = relaxation,\n\t        k = stiffness,\n\t        h = timeStep;\n\t    this.a = 4.0 / (h * (1 + 4 * d));\n\t    this.b = (4.0 * d) / (1 + 4 * d);\n\t    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n\t};\n\t\n\t/**\n\t * Computes the RHS of the SPOOK equation\n\t * @method computeB\n\t * @return {Number}\n\t */\n\tEquation.prototype.computeB = function(a,b,h){\n\t    var GW = this.computeGW(),\n\t        Gq = this.computeGq(),\n\t        GiMf = this.computeGiMf();\n\t    return - Gq * a - GW * b - GiMf*h;\n\t};\n\t\n\t/**\n\t * Computes G*q, where q are the generalized body coordinates\n\t * @method computeGq\n\t * @return {Number}\n\t */\n\tEquation.prototype.computeGq = function(){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        xi = bi.position,\n\t        xj = bj.position;\n\t    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n\t};\n\t\n\tvar zero = new Vec3();\n\t\n\t/**\n\t * Computes G*W, where W are the body velocities\n\t * @method computeGW\n\t * @return {Number}\n\t */\n\tEquation.prototype.computeGW = function(){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        vi = bi.velocity,\n\t        vj = bj.velocity,\n\t        wi = bi.angularVelocity || zero,\n\t        wj = bj.angularVelocity || zero;\n\t    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n\t};\n\t\n\t\n\t/**\n\t * Computes G*Wlambda, where W are the body velocities\n\t * @method computeGWlambda\n\t * @return {Number}\n\t */\n\tEquation.prototype.computeGWlambda = function(){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        vi = bi.vlambda,\n\t        vj = bj.vlambda,\n\t        wi = bi.wlambda || zero,\n\t        wj = bj.wlambda || zero;\n\t    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n\t};\n\t\n\t/**\n\t * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n\t * @method computeGiMf\n\t * @return {Number}\n\t */\n\tvar iMfi = new Vec3(),\n\t    iMfj = new Vec3(),\n\t    invIi_vmult_taui = new Vec3(),\n\t    invIj_vmult_tauj = new Vec3();\n\tEquation.prototype.computeGiMf = function(){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        fi = bi.force,\n\t        ti = bi.torque,\n\t        fj = bj.force,\n\t        tj = bj.torque,\n\t        invMassi = bi.invMassSolve,\n\t        invMassj = bj.invMassSolve;\n\t\n\t    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n\t    else { invIi_vmult_taui.set(0,0,0); }\n\t    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n\t    else { invIj_vmult_tauj.set(0,0,0); }\n\t\n\t    fi.mult(invMassi,iMfi);\n\t    fj.mult(invMassj,iMfj);\n\t\n\t    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n\t};\n\t\n\t/**\n\t * Computes G*inv(M)*G'\n\t * @method computeGiMGt\n\t * @return {Number}\n\t */\n\tvar tmp = new Vec3();\n\tEquation.prototype.computeGiMGt = function(){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        invMassi = bi.invMassSolve,\n\t        invMassj = bj.invMassSolve,\n\t        invIi = bi.invInertiaWorldSolve,\n\t        invIj = bj.invInertiaWorldSolve,\n\t        result = invMassi + invMassj;\n\t\n\t    if(invIi){\n\t        invIi.vmult(GA.rotational,tmp);\n\t        result += tmp.dot(GA.rotational);\n\t    }\n\t\n\t    if(invIj){\n\t        invIj.vmult(GB.rotational,tmp);\n\t        result += tmp.dot(GB.rotational);\n\t    }\n\t\n\t    return  result;\n\t};\n\t\n\tvar addToWlambda_temp = new Vec3(),\n\t    addToWlambda_Gi = new Vec3(),\n\t    addToWlambda_Gj = new Vec3(),\n\t    addToWlambda_ri = new Vec3(),\n\t    addToWlambda_rj = new Vec3(),\n\t    addToWlambda_Mdiag = new Vec3();\n\t\n\t/**\n\t * Add constraint velocity to the bodies.\n\t * @method addToWlambda\n\t * @param {Number} deltalambda\n\t */\n\tEquation.prototype.addToWlambda = function(deltalambda){\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        temp = addToWlambda_temp;\n\t\n\t    // Add to linear velocity\n\t    // v_lambda += inv(M) * delta_lamba * G\n\t    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n\t    bi.vlambda.vadd(temp, bi.vlambda);\n\t\n\t    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n\t    bj.vlambda.vadd(temp, bj.vlambda);\n\t\n\t    // Add to angular velocity\n\t    if(bi.invInertiaWorldSolve){\n\t        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n\t        temp.mult(deltalambda,temp);\n\t        bi.wlambda.vadd(temp,bi.wlambda);\n\t    }\n\t\n\t    if(bj.invInertiaWorldSolve){\n\t        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n\t        temp.mult(deltalambda,temp);\n\t        bj.wlambda.vadd(temp,bj.wlambda);\n\t    }\n\t};\n\t\n\t/**\n\t * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n\t * @method computeInvC\n\t * @param  {Number} eps\n\t * @return {Number}\n\t */\n\tEquation.prototype.computeC = function(){\n\t    return this.computeGiMGt() + this.eps;\n\t};\n\n\n/***/ },\n/* 383 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = JacobianElement;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n\t * @class JacobianElement\n\t * @constructor\n\t */\n\tfunction JacobianElement(){\n\t\n\t    /**\n\t     * @property {Vec3} spatial\n\t     */\n\t    this.spatial = new Vec3();\n\t\n\t    /**\n\t     * @property {Vec3} rotational\n\t     */\n\t    this.rotational = new Vec3();\n\t}\n\t\n\t/**\n\t * Multiply with other JacobianElement\n\t * @method multiplyElement\n\t * @param  {JacobianElement} element\n\t * @return {Number}\n\t */\n\tJacobianElement.prototype.multiplyElement = function(element){\n\t    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n\t};\n\t\n\t/**\n\t * Multiply with two vectors\n\t * @method multiplyVectors\n\t * @param  {Vec3} spatial\n\t * @param  {Vec3} rotational\n\t * @return {Number}\n\t */\n\tJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n\t    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n\t};\n\n\n/***/ },\n/* 384 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Narrowphase;\n\t\n\tvar AABB = __webpack_require__(365);\n\tvar Shape = __webpack_require__(372);\n\tvar Ray = __webpack_require__(385);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Transform = __webpack_require__(377);\n\tvar ConvexPolyhedron = __webpack_require__(376);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Solver = __webpack_require__(387);\n\tvar Vec3Pool = __webpack_require__(388);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar FrictionEquation = __webpack_require__(390);\n\t\n\t/**\n\t * Helper class for the World. Generates ContactEquations.\n\t * @class Narrowphase\n\t * @constructor\n\t * @todo Sphere-ConvexPolyhedron contacts\n\t * @todo Contact reduction\n\t * @todo  should move methods to prototype\n\t */\n\tfunction Narrowphase(world){\n\t\n\t    /**\n\t     * Internal storage of pooled contact points.\n\t     * @property {Array} contactPointPool\n\t     */\n\t    this.contactPointPool = [];\n\t\n\t    this.frictionEquationPool = [];\n\t\n\t    this.result = [];\n\t    this.frictionResult = [];\n\t\n\t    /**\n\t     * Pooled vectors.\n\t     * @property {Vec3Pool} v3pool\n\t     */\n\t    this.v3pool = new Vec3Pool();\n\t\n\t    this.world = world;\n\t    this.currentContactMaterial = null;\n\t\n\t    /**\n\t     * @property {Boolean} enableFrictionReduction\n\t     */\n\t    this.enableFrictionReduction = false;\n\t}\n\t\n\t/**\n\t * Make a contact object, by using the internal pool or creating a new one.\n\t * @method createContactEquation\n\t * @return {ContactEquation}\n\t */\n\tNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n\t    var c;\n\t    if(this.contactPointPool.length){\n\t        c = this.contactPointPool.pop();\n\t        c.bi = bi;\n\t        c.bj = bj;\n\t    } else {\n\t        c = new ContactEquation(bi, bj);\n\t    }\n\t\n\t    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\t\n\t    var cm = this.currentContactMaterial;\n\t\n\t    c.restitution = cm.restitution;\n\t\n\t    c.setSpookParams(\n\t        cm.contactEquationStiffness,\n\t        cm.contactEquationRelaxation,\n\t        this.world.dt\n\t    );\n\t\n\t    var matA = si.material || bi.material;\n\t    var matB = sj.material || bj.material;\n\t    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n\t        c.restitution = matA.restitution * matB.restitution;\n\t    }\n\t\n\t    c.si = rsi || si;\n\t    c.sj = rsj || sj;\n\t\n\t    return c;\n\t};\n\t\n\tNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n\t    var bodyA = contactEquation.bi;\n\t    var bodyB = contactEquation.bj;\n\t    var shapeA = contactEquation.si;\n\t    var shapeB = contactEquation.sj;\n\t\n\t    var world = this.world;\n\t    var cm = this.currentContactMaterial;\n\t\n\t    // If friction or restitution were specified in the material, use them\n\t    var friction = cm.friction;\n\t    var matA = shapeA.material || bodyA.material;\n\t    var matB = shapeB.material || bodyB.material;\n\t    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n\t        friction = matA.friction * matB.friction;\n\t    }\n\t\n\t    if(friction > 0){\n\t\n\t        // Create 2 tangent equations\n\t        var mug = friction * world.gravity.length();\n\t        var reducedMass = (bodyA.invMass + bodyB.invMass);\n\t        if(reducedMass > 0){\n\t            reducedMass = 1/reducedMass;\n\t        }\n\t        var pool = this.frictionEquationPool;\n\t        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\t        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\t\n\t        c1.bi = c2.bi = bodyA;\n\t        c1.bj = c2.bj = bodyB;\n\t        c1.minForce = c2.minForce = -mug*reducedMass;\n\t        c1.maxForce = c2.maxForce = mug*reducedMass;\n\t\n\t        // Copy over the relative vectors\n\t        c1.ri.copy(contactEquation.ri);\n\t        c1.rj.copy(contactEquation.rj);\n\t        c2.ri.copy(contactEquation.ri);\n\t        c2.rj.copy(contactEquation.rj);\n\t\n\t        // Construct tangents\n\t        contactEquation.ni.tangents(c1.t, c2.t);\n\t\n\t        // Set spook params\n\t        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\t        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\t\n\t        c1.enabled = c2.enabled = contactEquation.enabled;\n\t\n\t        outArray.push(c1, c2);\n\t\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t};\n\t\n\tvar averageNormal = new Vec3();\n\tvar averageContactPointA = new Vec3();\n\tvar averageContactPointB = new Vec3();\n\t\n\t// Take the average N latest contact point on the plane.\n\tNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n\t    // The last contactEquation\n\t    var c = this.result[this.result.length - 1];\n\t\n\t    // Create the result: two \"average\" friction equations\n\t    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n\t        return;\n\t    }\n\t\n\t    var f1 = this.frictionResult[this.frictionResult.length - 2];\n\t    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\t\n\t    averageNormal.setZero();\n\t    averageContactPointA.setZero();\n\t    averageContactPointB.setZero();\n\t\n\t    var bodyA = c.bi;\n\t    var bodyB = c.bj;\n\t    for(var i=0; i!==numContacts; i++){\n\t        c = this.result[this.result.length - 1 - i];\n\t        if(c.bodyA !== bodyA){\n\t            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n\t            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n\t            averageContactPointB.vadd(c.rj, averageContactPointB);\n\t        } else {\n\t            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n\t            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n\t            averageContactPointB.vadd(c.ri, averageContactPointB);\n\t        }\n\t    }\n\t\n\t    var invNumContacts = 1 / numContacts;\n\t    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n\t    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n\t    f2.ri.copy(f1.ri); // Should be the same\n\t    f2.rj.copy(f1.rj);\n\t    averageNormal.normalize();\n\t    averageNormal.tangents(f1.t, f2.t);\n\t    // return eq;\n\t};\n\t\n\t\n\tvar tmpVec1 = new Vec3();\n\tvar tmpVec2 = new Vec3();\n\tvar tmpQuat1 = new Quaternion();\n\tvar tmpQuat2 = new Quaternion();\n\t\n\t/**\n\t * Generate all contacts between a list of body pairs\n\t * @method getContacts\n\t * @param {array} p1 Array of body indices\n\t * @param {array} p2 Array of body indices\n\t * @param {World} world\n\t * @param {array} result Array to store generated contacts\n\t * @param {array} oldcontacts Optional. Array of reusable contact objects\n\t */\n\tNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n\t    // Save old contact objects\n\t    this.contactPointPool = oldcontacts;\n\t    this.frictionEquationPool = frictionPool;\n\t    this.result = result;\n\t    this.frictionResult = frictionResult;\n\t\n\t    var qi = tmpQuat1;\n\t    var qj = tmpQuat2;\n\t    var xi = tmpVec1;\n\t    var xj = tmpVec2;\n\t\n\t    for(var k=0, N=p1.length; k!==N; k++){\n\t\n\t        // Get current collision bodies\n\t        var bi = p1[k],\n\t            bj = p2[k];\n\t\n\t        // Get contact material\n\t        var bodyContactMaterial = null;\n\t        if(bi.material && bj.material){\n\t            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n\t        }\n\t\n\t        for (var i = 0; i < bi.shapes.length; i++) {\n\t            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n\t            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n\t            xi.vadd(bi.position, xi);\n\t            var si = bi.shapes[i];\n\t\n\t            for (var j = 0; j < bj.shapes.length; j++) {\n\t\n\t                // Compute world transform of shapes\n\t                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n\t                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n\t                xj.vadd(bj.position, xj);\n\t                var sj = bj.shapes[j];\n\t\n\t                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n\t                    continue;\n\t                }\n\t\n\t                // Get collision material\n\t                var shapeContactMaterial = null;\n\t                if(si.material && sj.material){\n\t                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n\t                }\n\t\n\t                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\t\n\t                // Get contacts\n\t                var resolver = this[si.type | sj.type];\n\t                if(resolver){\n\t                    if (si.type < sj.type) {\n\t                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n\t                    } else {\n\t                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\tvar numWarnings = 0;\n\tvar maxWarnings = 10;\n\t\n\tfunction warn(msg){\n\t    if(numWarnings > maxWarnings){\n\t        return;\n\t    }\n\t\n\t    numWarnings++;\n\t\n\t    console.warn(msg);\n\t}\n\t\n\tNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\n\tNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    si.convexPolyhedronRepresentation.material = si.material;\n\t    sj.convexPolyhedronRepresentation.material = sj.material;\n\t    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n\t    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n\t    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n\t};\n\t\n\tNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\n\tNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    si.convexPolyhedronRepresentation.material = si.material;\n\t    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n\t    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n\t};\n\t\n\tNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\n\tNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    si.convexPolyhedronRepresentation.material = si.material;\n\t    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n\t    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n\t};\n\t\n\t/**\n\t * @method sphereSphere\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.SPHERE] =\n\tNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    // We will have only one contact in this case\n\t    var r = this.createContactEquation(bi,bj,si,sj);\n\t\n\t    // Contact normal\n\t    xj.vsub(xi, r.ni);\n\t    r.ni.normalize();\n\t\n\t    // Contact point locations\n\t    r.ri.copy(r.ni);\n\t    r.rj.copy(r.ni);\n\t    r.ri.mult(si.radius, r.ri);\n\t    r.rj.mult(-sj.radius, r.rj);\n\t\n\t    r.ri.vadd(xi, r.ri);\n\t    r.ri.vsub(bi.position, r.ri);\n\t\n\t    r.rj.vadd(xj, r.rj);\n\t    r.rj.vsub(bj.position, r.rj);\n\t\n\t    this.result.push(r);\n\t\n\t    this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t};\n\t\n\t/**\n\t * @method planeTrimesh\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tvar planeTrimesh_normal = new Vec3();\n\tvar planeTrimesh_relpos = new Vec3();\n\tvar planeTrimesh_projected = new Vec3();\n\tNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\n\tNarrowphase.prototype.planeTrimesh = function(\n\t    planeShape,\n\t    trimeshShape,\n\t    planePos,\n\t    trimeshPos,\n\t    planeQuat,\n\t    trimeshQuat,\n\t    planeBody,\n\t    trimeshBody\n\t){\n\t    // Make contacts!\n\t    var v = new Vec3();\n\t\n\t    var normal = planeTrimesh_normal;\n\t    normal.set(0,0,1);\n\t    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\t\n\t    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\t\n\t        // Get world vertex from trimesh\n\t        trimeshShape.getVertex(i, v);\n\t\n\t        // Safe up\n\t        var v2 = new Vec3();\n\t        v2.copy(v);\n\t        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\t\n\t        // Check plane side\n\t        var relpos = planeTrimesh_relpos;\n\t        v.vsub(planePos, relpos);\n\t        var dot = normal.dot(relpos);\n\t\n\t        if(dot <= 0.0){\n\t            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\t\n\t            r.ni.copy(normal); // Contact normal is the plane normal\n\t\n\t            // Get vertex position projected on plane\n\t            var projected = planeTrimesh_projected;\n\t            normal.scale(relpos.dot(normal), projected);\n\t            v.vsub(projected,projected);\n\t\n\t            // ri is the projected world position minus plane position\n\t            r.ri.copy(projected);\n\t            r.ri.vsub(planeBody.position, r.ri);\n\t\n\t            r.rj.copy(v);\n\t            r.rj.vsub(trimeshBody.position, r.rj);\n\t\n\t            // Store result\n\t            this.result.push(r);\n\t            this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * @method sphereTrimesh\n\t * @param  {Shape}      sphereShape\n\t * @param  {Shape}      trimeshShape\n\t * @param  {Vec3}       spherePos\n\t * @param  {Vec3}       trimeshPos\n\t * @param  {Quaternion} sphereQuat\n\t * @param  {Quaternion} trimeshQuat\n\t * @param  {Body}       sphereBody\n\t * @param  {Body}       trimeshBody\n\t */\n\tvar sphereTrimesh_normal = new Vec3();\n\tvar sphereTrimesh_relpos = new Vec3();\n\tvar sphereTrimesh_projected = new Vec3();\n\tvar sphereTrimesh_v = new Vec3();\n\tvar sphereTrimesh_v2 = new Vec3();\n\tvar sphereTrimesh_edgeVertexA = new Vec3();\n\tvar sphereTrimesh_edgeVertexB = new Vec3();\n\tvar sphereTrimesh_edgeVector = new Vec3();\n\tvar sphereTrimesh_edgeVectorUnit = new Vec3();\n\tvar sphereTrimesh_localSpherePos = new Vec3();\n\tvar sphereTrimesh_tmp = new Vec3();\n\tvar sphereTrimesh_va = new Vec3();\n\tvar sphereTrimesh_vb = new Vec3();\n\tvar sphereTrimesh_vc = new Vec3();\n\tvar sphereTrimesh_localSphereAABB = new AABB();\n\tvar sphereTrimesh_triangles = [];\n\tNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\n\tNarrowphase.prototype.sphereTrimesh = function (\n\t    sphereShape,\n\t    trimeshShape,\n\t    spherePos,\n\t    trimeshPos,\n\t    sphereQuat,\n\t    trimeshQuat,\n\t    sphereBody,\n\t    trimeshBody\n\t) {\n\t\n\t    var edgeVertexA = sphereTrimesh_edgeVertexA;\n\t    var edgeVertexB = sphereTrimesh_edgeVertexB;\n\t    var edgeVector = sphereTrimesh_edgeVector;\n\t    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n\t    var localSpherePos = sphereTrimesh_localSpherePos;\n\t    var tmp = sphereTrimesh_tmp;\n\t    var localSphereAABB = sphereTrimesh_localSphereAABB;\n\t    var v2 = sphereTrimesh_v2;\n\t    var relpos = sphereTrimesh_relpos;\n\t    var triangles = sphereTrimesh_triangles;\n\t\n\t    // Convert sphere position to local in the trimesh\n\t    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\t\n\t    // Get the aabb of the sphere locally in the trimesh\n\t    var sphereRadius = sphereShape.radius;\n\t    localSphereAABB.lowerBound.set(\n\t        localSpherePos.x - sphereRadius,\n\t        localSpherePos.y - sphereRadius,\n\t        localSpherePos.z - sphereRadius\n\t    );\n\t    localSphereAABB.upperBound.set(\n\t        localSpherePos.x + sphereRadius,\n\t        localSpherePos.y + sphereRadius,\n\t        localSpherePos.z + sphereRadius\n\t    );\n\t\n\t    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n\t    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\t\n\t    // Vertices\n\t    var v = sphereTrimesh_v;\n\t    var radiusSquared = sphereShape.radius * sphereShape.radius;\n\t    for(var i=0; i<triangles.length; i++){\n\t        for (var j = 0; j < 3; j++) {\n\t\n\t            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\t\n\t            // Check vertex overlap in sphere\n\t            v.vsub(localSpherePos, relpos);\n\t\n\t            if(relpos.norm2() <= radiusSquared){\n\t\n\t                // Safe up\n\t                v2.copy(v);\n\t                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\t\n\t                v.vsub(spherePos, relpos);\n\t\n\t                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n\t                r.ni.copy(relpos);\n\t                r.ni.normalize();\n\t\n\t                // ri is the vector from sphere center to the sphere surface\n\t                r.ri.copy(r.ni);\n\t                r.ri.scale(sphereShape.radius, r.ri);\n\t                r.ri.vadd(spherePos, r.ri);\n\t                r.ri.vsub(sphereBody.position, r.ri);\n\t\n\t                r.rj.copy(v);\n\t                r.rj.vsub(trimeshBody.position, r.rj);\n\t\n\t                // Store result\n\t                this.result.push(r);\n\t                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t            }\n\t        }\n\t    }\n\t\n\t    // Check all edges\n\t    for(var i=0; i<triangles.length; i++){\n\t        for (var j = 0; j < 3; j++) {\n\t\n\t            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n\t            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n\t            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\t\n\t            // Project sphere position to the edge\n\t            localSpherePos.vsub(edgeVertexB, tmp);\n\t            var positionAlongEdgeB = tmp.dot(edgeVector);\n\t\n\t            localSpherePos.vsub(edgeVertexA, tmp);\n\t            var positionAlongEdgeA = tmp.dot(edgeVector);\n\t\n\t            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\t\n\t                // Now check the orthogonal distance from edge to sphere center\n\t                localSpherePos.vsub(edgeVertexA, tmp);\n\t\n\t                edgeVectorUnit.copy(edgeVector);\n\t                edgeVectorUnit.normalize();\n\t                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\t\n\t                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n\t                tmp.vadd(edgeVertexA, tmp);\n\t\n\t                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\t                var dist = tmp.distanceTo(localSpherePos);\n\t                if(dist < sphereShape.radius){\n\t                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\t\n\t                    tmp.vsub(localSpherePos, r.ni);\n\t                    r.ni.normalize();\n\t                    r.ni.scale(sphereShape.radius, r.ri);\n\t\n\t                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n\t                    tmp.vsub(trimeshBody.position, r.rj);\n\t\n\t                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n\t                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\t\n\t                    this.result.push(r);\n\t                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // Triangle faces\n\t    var va = sphereTrimesh_va;\n\t    var vb = sphereTrimesh_vb;\n\t    var vc = sphereTrimesh_vc;\n\t    var normal = sphereTrimesh_normal;\n\t    for(var i=0, N = triangles.length; i !== N; i++){\n\t        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n\t        trimeshShape.getNormal(triangles[i], normal);\n\t        localSpherePos.vsub(va, tmp);\n\t        var dist = tmp.dot(normal);\n\t        normal.scale(dist, tmp);\n\t        localSpherePos.vsub(tmp, tmp);\n\t\n\t        // tmp is now the sphere position projected to the triangle plane\n\t        dist = tmp.distanceTo(localSpherePos);\n\t        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n\t            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\t\n\t            tmp.vsub(localSpherePos, r.ni);\n\t            r.ni.normalize();\n\t            r.ni.scale(sphereShape.radius, r.ri);\n\t\n\t            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n\t            tmp.vsub(trimeshBody.position, r.rj);\n\t\n\t            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n\t            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\t\n\t            this.result.push(r);\n\t            this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t        }\n\t    }\n\t\n\t    triangles.length = 0;\n\t};\n\t\n\tvar point_on_plane_to_sphere = new Vec3();\n\tvar plane_to_sphere_ortho = new Vec3();\n\t\n\t/**\n\t * @method spherePlane\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\n\tNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    // We will have one contact in this case\n\t    var r = this.createContactEquation(bi,bj,si,sj);\n\t\n\t    // Contact normal\n\t    r.ni.set(0,0,1);\n\t    qj.vmult(r.ni, r.ni);\n\t    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\t    r.ni.normalize(); // Needed?\n\t\n\t    // Vector from sphere center to contact point\n\t    r.ni.mult(si.radius, r.ri);\n\t\n\t    // Project down sphere on plane\n\t    xi.vsub(xj, point_on_plane_to_sphere);\n\t    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n\t    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\t\n\t    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\t\n\t        // Make it relative to the body\n\t        var ri = r.ri;\n\t        var rj = r.rj;\n\t        ri.vadd(xi, ri);\n\t        ri.vsub(bi.position, ri);\n\t        rj.vadd(xj, rj);\n\t        rj.vsub(bj.position, rj);\n\t\n\t        this.result.push(r);\n\t        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t    }\n\t};\n\t\n\t// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\tvar pointInPolygon_edge = new Vec3();\n\tvar pointInPolygon_edge_x_normal = new Vec3();\n\tvar pointInPolygon_vtp = new Vec3();\n\tfunction pointInPolygon(verts, normal, p){\n\t    var positiveResult = null;\n\t    var N = verts.length;\n\t    for(var i=0; i!==N; i++){\n\t        var v = verts[i];\n\t\n\t        // Get edge to the next vertex\n\t        var edge = pointInPolygon_edge;\n\t        verts[(i+1) % (N)].vsub(v,edge);\n\t\n\t        // Get cross product between polygon normal and the edge\n\t        var edge_x_normal = pointInPolygon_edge_x_normal;\n\t        //var edge_x_normal = new Vec3();\n\t        edge.cross(normal,edge_x_normal);\n\t\n\t        // Get vector between point and current vertex\n\t        var vertex_to_p = pointInPolygon_vtp;\n\t        p.vsub(v,vertex_to_p);\n\t\n\t        // This dot product determines which side of the edge the point is\n\t        var r = edge_x_normal.dot(vertex_to_p);\n\t\n\t        // If all such dot products have same sign, we are inside the polygon.\n\t        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n\t            if(positiveResult===null){\n\t                positiveResult = r>0;\n\t            }\n\t            continue;\n\t        } else {\n\t            return false; // Encountered some other sign. Exit.\n\t        }\n\t    }\n\t\n\t    // If we got here, all dot products were of the same sign.\n\t    return true;\n\t}\n\t\n\tvar box_to_sphere = new Vec3();\n\tvar sphereBox_ns = new Vec3();\n\tvar sphereBox_ns1 = new Vec3();\n\tvar sphereBox_ns2 = new Vec3();\n\tvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\n\tvar sphereBox_sphere_to_corner = new Vec3();\n\tvar sphereBox_side_ns = new Vec3();\n\tvar sphereBox_side_ns1 = new Vec3();\n\tvar sphereBox_side_ns2 = new Vec3();\n\t\n\t/**\n\t * @method sphereBox\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\n\tNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    var v3pool = this.v3pool;\n\t\n\t    // we refer to the box as body j\n\t    var sides = sphereBox_sides;\n\t    xi.vsub(xj,box_to_sphere);\n\t    sj.getSideNormals(sides,qj);\n\t    var R =     si.radius;\n\t    var penetrating_sides = [];\n\t\n\t    // Check side (plane) intersections\n\t    var found = false;\n\t\n\t    // Store the resulting side penetration info\n\t    var side_ns = sphereBox_side_ns;\n\t    var side_ns1 = sphereBox_side_ns1;\n\t    var side_ns2 = sphereBox_side_ns2;\n\t    var side_h = null;\n\t    var side_penetrations = 0;\n\t    var side_dot1 = 0;\n\t    var side_dot2 = 0;\n\t    var side_distance = null;\n\t    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n\t        // Get the plane side normal (ns)\n\t        var ns = sphereBox_ns;\n\t        ns.copy(sides[idx]);\n\t\n\t        var h = ns.norm();\n\t        ns.normalize();\n\t\n\t        // The normal/distance dot product tells which side of the plane we are\n\t        var dot = box_to_sphere.dot(ns);\n\t\n\t        if(dot<h+R && dot>0){\n\t            // Intersects plane. Now check the other two dimensions\n\t            var ns1 = sphereBox_ns1;\n\t            var ns2 = sphereBox_ns2;\n\t            ns1.copy(sides[(idx+1)%3]);\n\t            ns2.copy(sides[(idx+2)%3]);\n\t            var h1 = ns1.norm();\n\t            var h2 = ns2.norm();\n\t            ns1.normalize();\n\t            ns2.normalize();\n\t            var dot1 = box_to_sphere.dot(ns1);\n\t            var dot2 = box_to_sphere.dot(ns2);\n\t            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n\t                var dist = Math.abs(dot-h-R);\n\t                if(side_distance===null || dist < side_distance){\n\t                    side_distance = dist;\n\t                    side_dot1 = dot1;\n\t                    side_dot2 = dot2;\n\t                    side_h = h;\n\t                    side_ns.copy(ns);\n\t                    side_ns1.copy(ns1);\n\t                    side_ns2.copy(ns2);\n\t                    side_penetrations++;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    if(side_penetrations){\n\t        found = true;\n\t        var r = this.createContactEquation(bi,bj,si,sj);\n\t        side_ns.mult(-R,r.ri); // Sphere r\n\t        r.ni.copy(side_ns);\n\t        r.ni.negate(r.ni); // Normal should be out of sphere\n\t        side_ns.mult(side_h,side_ns);\n\t        side_ns1.mult(side_dot1,side_ns1);\n\t        side_ns.vadd(side_ns1,side_ns);\n\t        side_ns2.mult(side_dot2,side_ns2);\n\t        side_ns.vadd(side_ns2,r.rj);\n\t\n\t        // Make relative to bodies\n\t        r.ri.vadd(xi, r.ri);\n\t        r.ri.vsub(bi.position, r.ri);\n\t        r.rj.vadd(xj, r.rj);\n\t        r.rj.vsub(bj.position, r.rj);\n\t\n\t        this.result.push(r);\n\t        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t    }\n\t\n\t    // Check corners\n\t    var rj = v3pool.get();\n\t    var sphere_to_corner = sphereBox_sphere_to_corner;\n\t    for(var j=0; j!==2 && !found; j++){\n\t        for(var k=0; k!==2 && !found; k++){\n\t            for(var l=0; l!==2 && !found; l++){\n\t                rj.set(0,0,0);\n\t                if(j){\n\t                    rj.vadd(sides[0],rj);\n\t                } else {\n\t                    rj.vsub(sides[0],rj);\n\t                }\n\t                if(k){\n\t                    rj.vadd(sides[1],rj);\n\t                } else {\n\t                    rj.vsub(sides[1],rj);\n\t                }\n\t                if(l){\n\t                    rj.vadd(sides[2],rj);\n\t                } else {\n\t                    rj.vsub(sides[2],rj);\n\t                }\n\t\n\t                // World position of corner\n\t                xj.vadd(rj,sphere_to_corner);\n\t                sphere_to_corner.vsub(xi,sphere_to_corner);\n\t\n\t                if(sphere_to_corner.norm2() < R*R){\n\t                    found = true;\n\t                    var r = this.createContactEquation(bi,bj,si,sj);\n\t                    r.ri.copy(sphere_to_corner);\n\t                    r.ri.normalize();\n\t                    r.ni.copy(r.ri);\n\t                    r.ri.mult(R,r.ri);\n\t                    r.rj.copy(rj);\n\t\n\t                    // Make relative to bodies\n\t                    r.ri.vadd(xi, r.ri);\n\t                    r.ri.vsub(bi.position, r.ri);\n\t                    r.rj.vadd(xj, r.rj);\n\t                    r.rj.vsub(bj.position, r.rj);\n\t\n\t                    this.result.push(r);\n\t                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    v3pool.release(rj);\n\t    rj = null;\n\t\n\t    // Check edges\n\t    var edgeTangent = v3pool.get();\n\t    var edgeCenter = v3pool.get();\n\t    var r = v3pool.get(); // r = edge center to sphere center\n\t    var orthogonal = v3pool.get();\n\t    var dist = v3pool.get();\n\t    var Nsides = sides.length;\n\t    for(var j=0; j!==Nsides && !found; j++){\n\t        for(var k=0; k!==Nsides && !found; k++){\n\t            if(j%3 !== k%3){\n\t                // Get edge tangent\n\t                sides[k].cross(sides[j],edgeTangent);\n\t                edgeTangent.normalize();\n\t                sides[j].vadd(sides[k], edgeCenter);\n\t                r.copy(xi);\n\t                r.vsub(edgeCenter,r);\n\t                r.vsub(xj,r);\n\t                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\t                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\t\n\t                // Find the third side orthogonal to this one\n\t                var l = 0;\n\t                while(l===j%3 || l===k%3){\n\t                    l++;\n\t                }\n\t\n\t                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\t                dist.copy(xi);\n\t                dist.vsub(orthogonal,dist);\n\t                dist.vsub(edgeCenter,dist);\n\t                dist.vsub(xj,dist);\n\t\n\t                // Distances in tangent direction and distance in the plane orthogonal to it\n\t                var tdist = Math.abs(orthonorm);\n\t                var ndist = dist.norm();\n\t\n\t                if(tdist < sides[l].norm() && ndist<R){\n\t                    found = true;\n\t                    var res = this.createContactEquation(bi,bj,si,sj);\n\t                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n\t                    res.rj.copy(res.rj);\n\t                    dist.negate(res.ni);\n\t                    res.ni.normalize();\n\t\n\t                    res.ri.copy(res.rj);\n\t                    res.ri.vadd(xj,res.ri);\n\t                    res.ri.vsub(xi,res.ri);\n\t                    res.ri.normalize();\n\t                    res.ri.mult(R,res.ri);\n\t\n\t                    // Make relative to bodies\n\t                    res.ri.vadd(xi, res.ri);\n\t                    res.ri.vsub(bi.position, res.ri);\n\t                    res.rj.vadd(xj, res.rj);\n\t                    res.rj.vsub(bj.position, res.rj);\n\t\n\t                    this.result.push(res);\n\t                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n\t};\n\t\n\tvar convex_to_sphere = new Vec3();\n\tvar sphereConvex_edge = new Vec3();\n\tvar sphereConvex_edgeUnit = new Vec3();\n\tvar sphereConvex_sphereToCorner = new Vec3();\n\tvar sphereConvex_worldCorner = new Vec3();\n\tvar sphereConvex_worldNormal = new Vec3();\n\tvar sphereConvex_worldPoint = new Vec3();\n\tvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\n\tvar sphereConvex_penetrationVec = new Vec3();\n\tvar sphereConvex_sphereToWorldPoint = new Vec3();\n\t\n\t/**\n\t * @method sphereConvex\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\n\tNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    var v3pool = this.v3pool;\n\t    xi.vsub(xj,convex_to_sphere);\n\t    var normals = sj.faceNormals;\n\t    var faces = sj.faces;\n\t    var verts = sj.vertices;\n\t    var R =     si.radius;\n\t    var penetrating_sides = [];\n\t\n\t    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n\t    //     return;\n\t    // }\n\t\n\t    // Check corners\n\t    for(var i=0; i!==verts.length; i++){\n\t        var v = verts[i];\n\t\n\t        // World position of corner\n\t        var worldCorner = sphereConvex_worldCorner;\n\t        qj.vmult(v,worldCorner);\n\t        xj.vadd(worldCorner,worldCorner);\n\t        var sphere_to_corner = sphereConvex_sphereToCorner;\n\t        worldCorner.vsub(xi, sphere_to_corner);\n\t        if(sphere_to_corner.norm2() < R * R){\n\t            found = true;\n\t            var r = this.createContactEquation(bi,bj,si,sj);\n\t            r.ri.copy(sphere_to_corner);\n\t            r.ri.normalize();\n\t            r.ni.copy(r.ri);\n\t            r.ri.mult(R,r.ri);\n\t            worldCorner.vsub(xj,r.rj);\n\t\n\t            // Should be relative to the body.\n\t            r.ri.vadd(xi, r.ri);\n\t            r.ri.vsub(bi.position, r.ri);\n\t\n\t            // Should be relative to the body.\n\t            r.rj.vadd(xj, r.rj);\n\t            r.rj.vsub(bj.position, r.rj);\n\t\n\t            this.result.push(r);\n\t            this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t            return;\n\t        }\n\t    }\n\t\n\t    // Check side (plane) intersections\n\t    var found = false;\n\t    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n\t        var normal = normals[i];\n\t        var face = faces[i];\n\t\n\t        // Get world-transformed normal of the face\n\t        var worldNormal = sphereConvex_worldNormal;\n\t        qj.vmult(normal,worldNormal);\n\t\n\t        // Get a world vertex from the face\n\t        var worldPoint = sphereConvex_worldPoint;\n\t        qj.vmult(verts[face[0]],worldPoint);\n\t        worldPoint.vadd(xj,worldPoint);\n\t\n\t        // Get a point on the sphere, closest to the face normal\n\t        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n\t        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n\t        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\t\n\t        // Vector from a face point to the closest point on the sphere\n\t        var penetrationVec = sphereConvex_penetrationVec;\n\t        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\t\n\t        // The penetration. Negative value means overlap.\n\t        var penetration = penetrationVec.dot(worldNormal);\n\t\n\t        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n\t        xi.vsub(worldPoint, worldPointToSphere);\n\t\n\t        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n\t            // Intersects plane. Now check if the sphere is inside the face polygon\n\t            var faceVerts = []; // Face vertices, in world coords\n\t            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n\t                var worldVertex = v3pool.get();\n\t                qj.vmult(verts[face[j]], worldVertex);\n\t                xj.vadd(worldVertex,worldVertex);\n\t                faceVerts.push(worldVertex);\n\t            }\n\t\n\t            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n\t                found = true;\n\t                var r = this.createContactEquation(bi,bj,si,sj);\n\t\n\t                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n\t                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\t\n\t                var penetrationVec2 = v3pool.get();\n\t                worldNormal.mult(-penetration, penetrationVec2);\n\t                var penetrationSpherePoint = v3pool.get();\n\t                worldNormal.mult(-R, penetrationSpherePoint);\n\t\n\t                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\t                xi.vsub(xj,r.rj);\n\t                r.rj.vadd(penetrationSpherePoint,r.rj);\n\t                r.rj.vadd(penetrationVec2 , r.rj);\n\t\n\t                // Should be relative to the body.\n\t                r.rj.vadd(xj, r.rj);\n\t                r.rj.vsub(bj.position, r.rj);\n\t\n\t                // Should be relative to the body.\n\t                r.ri.vadd(xi, r.ri);\n\t                r.ri.vsub(bi.position, r.ri);\n\t\n\t                v3pool.release(penetrationVec2);\n\t                v3pool.release(penetrationSpherePoint);\n\t\n\t                this.result.push(r);\n\t                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t\n\t                // Release world vertices\n\t                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n\t                    v3pool.release(faceVerts[j]);\n\t                }\n\t\n\t                return; // We only expect *one* face contact\n\t            } else {\n\t                // Edge?\n\t                for(var j=0; j!==face.length; j++){\n\t\n\t                    // Get two world transformed vertices\n\t                    var v1 = v3pool.get();\n\t                    var v2 = v3pool.get();\n\t                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n\t                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n\t                    xj.vadd(v1, v1);\n\t                    xj.vadd(v2, v2);\n\t\n\t                    // Construct edge vector\n\t                    var edge = sphereConvex_edge;\n\t                    v2.vsub(v1,edge);\n\t\n\t                    // Construct the same vector, but normalized\n\t                    var edgeUnit = sphereConvex_edgeUnit;\n\t                    edge.unit(edgeUnit);\n\t\n\t                    // p is xi projected onto the edge\n\t                    var p = v3pool.get();\n\t                    var v1_to_xi = v3pool.get();\n\t                    xi.vsub(v1, v1_to_xi);\n\t                    var dot = v1_to_xi.dot(edgeUnit);\n\t                    edgeUnit.mult(dot, p);\n\t                    p.vadd(v1, p);\n\t\n\t                    // Compute a vector from p to the center of the sphere\n\t                    var xi_to_p = v3pool.get();\n\t                    p.vsub(xi, xi_to_p);\n\t\n\t                    // Collision if the edge-sphere distance is less than the radius\n\t                    // AND if p is in between v1 and v2\n\t                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n\t                        // Edge contact!\n\t                        var r = this.createContactEquation(bi,bj,si,sj);\n\t                        p.vsub(xj,r.rj);\n\t\n\t                        p.vsub(xi,r.ni);\n\t                        r.ni.normalize();\n\t\n\t                        r.ni.mult(R,r.ri);\n\t\n\t                        // Should be relative to the body.\n\t                        r.rj.vadd(xj, r.rj);\n\t                        r.rj.vsub(bj.position, r.rj);\n\t\n\t                        // Should be relative to the body.\n\t                        r.ri.vadd(xi, r.ri);\n\t                        r.ri.vsub(bi.position, r.ri);\n\t\n\t                        this.result.push(r);\n\t                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t\n\t                        // Release world vertices\n\t                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n\t                            v3pool.release(faceVerts[j]);\n\t                        }\n\t\n\t                        v3pool.release(v1);\n\t                        v3pool.release(v2);\n\t                        v3pool.release(p);\n\t                        v3pool.release(xi_to_p);\n\t                        v3pool.release(v1_to_xi);\n\t\n\t                        return;\n\t                    }\n\t\n\t                    v3pool.release(v1);\n\t                    v3pool.release(v2);\n\t                    v3pool.release(p);\n\t                    v3pool.release(xi_to_p);\n\t                    v3pool.release(v1_to_xi);\n\t                }\n\t            }\n\t\n\t            // Release world vertices\n\t            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n\t                v3pool.release(faceVerts[j]);\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\tvar planeBox_normal = new Vec3();\n\tvar plane_to_corner = new Vec3();\n\t\n\t/**\n\t * @method planeBox\n\t * @param  {Array}      result\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\n\tNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n\t    sj.convexPolyhedronRepresentation.material = sj.material;\n\t    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n\t    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n\t};\n\t\n\tvar planeConvex_v = new Vec3();\n\tvar planeConvex_normal = new Vec3();\n\tvar planeConvex_relpos = new Vec3();\n\tvar planeConvex_projected = new Vec3();\n\t\n\t/**\n\t * @method planeConvex\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\n\tNarrowphase.prototype.planeConvex = function(\n\t    planeShape,\n\t    convexShape,\n\t    planePosition,\n\t    convexPosition,\n\t    planeQuat,\n\t    convexQuat,\n\t    planeBody,\n\t    convexBody\n\t){\n\t    // Simply return the points behind the plane.\n\t    var worldVertex = planeConvex_v,\n\t        worldNormal = planeConvex_normal;\n\t    worldNormal.set(0,0,1);\n\t    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\t\n\t    var numContacts = 0;\n\t    var relpos = planeConvex_relpos;\n\t    for(var i = 0; i !== convexShape.vertices.length; i++){\n\t\n\t        // Get world convex vertex\n\t        worldVertex.copy(convexShape.vertices[i]);\n\t        convexQuat.vmult(worldVertex, worldVertex);\n\t        convexPosition.vadd(worldVertex, worldVertex);\n\t        worldVertex.vsub(planePosition, relpos);\n\t\n\t        var dot = worldNormal.dot(relpos);\n\t        if(dot <= 0.0){\n\t\n\t            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\t\n\t            // Get vertex position projected on plane\n\t            var projected = planeConvex_projected;\n\t            worldNormal.mult(worldNormal.dot(relpos),projected);\n\t            worldVertex.vsub(projected, projected);\n\t            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\t\n\t            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\t\n\t            // rj is now just the vector from the convex center to the vertex\n\t            worldVertex.vsub(convexPosition, r.rj);\n\t\n\t            // Make it relative to the body\n\t            r.ri.vadd(planePosition, r.ri);\n\t            r.ri.vsub(planeBody.position, r.ri);\n\t            r.rj.vadd(convexPosition, r.rj);\n\t            r.rj.vsub(convexBody.position, r.rj);\n\t\n\t            this.result.push(r);\n\t            numContacts++;\n\t            if(!this.enableFrictionReduction){\n\t                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t            }\n\t        }\n\t    }\n\t\n\t    if(this.enableFrictionReduction && numContacts){\n\t        this.createFrictionFromAverage(numContacts);\n\t    }\n\t};\n\t\n\tvar convexConvex_sepAxis = new Vec3();\n\tvar convexConvex_q = new Vec3();\n\t\n\t/**\n\t * @method convexConvex\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\n\tNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n\t    var sepAxis = convexConvex_sepAxis;\n\t\n\t    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n\t        return;\n\t    }\n\t\n\t    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n\t        var res = [];\n\t        var q = convexConvex_q;\n\t        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n\t        var numContacts = 0;\n\t        for(var j = 0; j !== res.length; j++){\n\t            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n\t                ri = r.ri,\n\t                rj = r.rj;\n\t            sepAxis.negate(r.ni);\n\t            res[j].normal.negate(q);\n\t            q.mult(res[j].depth, q);\n\t            res[j].point.vadd(q, ri);\n\t            rj.copy(res[j].point);\n\t\n\t            // Contact points are in world coordinates. Transform back to relative\n\t            ri.vsub(xi,ri);\n\t            rj.vsub(xj,rj);\n\t\n\t            // Make relative to bodies\n\t            ri.vadd(xi, ri);\n\t            ri.vsub(bi.position, ri);\n\t            rj.vadd(xj, rj);\n\t            rj.vsub(bj.position, rj);\n\t\n\t            this.result.push(r);\n\t            numContacts++;\n\t            if(!this.enableFrictionReduction){\n\t                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t            }\n\t        }\n\t        if(this.enableFrictionReduction && numContacts){\n\t            this.createFrictionFromAverage(numContacts);\n\t        }\n\t    }\n\t};\n\t\n\t\n\t/**\n\t * @method convexTrimesh\n\t * @param  {Array}      result\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\t// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n\t// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n\t//     var sepAxis = convexConvex_sepAxis;\n\t\n\t//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n\t//         return;\n\t//     }\n\t\n\t//     // Construct a temp hull for each triangle\n\t//     var hullB = new ConvexPolyhedron();\n\t\n\t//     hullB.faces = [[0,1,2]];\n\t//     var va = new Vec3();\n\t//     var vb = new Vec3();\n\t//     var vc = new Vec3();\n\t//     hullB.vertices = [\n\t//         va,\n\t//         vb,\n\t//         vc\n\t//     ];\n\t\n\t//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\t\n\t//         var triangleNormal = new Vec3();\n\t//         sj.getNormal(i, triangleNormal);\n\t//         hullB.faceNormals = [triangleNormal];\n\t\n\t//         sj.getTriangleVertices(i, va, vb, vc);\n\t\n\t//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\t//         if(!d){\n\t//             triangleNormal.scale(-1, triangleNormal);\n\t//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\t\n\t//             if(!d){\n\t//                 continue;\n\t//             }\n\t//         }\n\t\n\t//         var res = [];\n\t//         var q = convexConvex_q;\n\t//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n\t//         for(var j = 0; j !== res.length; j++){\n\t//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n\t//                 ri = r.ri,\n\t//                 rj = r.rj;\n\t//             r.ni.copy(triangleNormal);\n\t//             r.ni.negate(r.ni);\n\t//             res[j].normal.negate(q);\n\t//             q.mult(res[j].depth, q);\n\t//             res[j].point.vadd(q, ri);\n\t//             rj.copy(res[j].point);\n\t\n\t//             // Contact points are in world coordinates. Transform back to relative\n\t//             ri.vsub(xi,ri);\n\t//             rj.vsub(xj,rj);\n\t\n\t//             // Make relative to bodies\n\t//             ri.vadd(xi, ri);\n\t//             ri.vsub(bi.position, ri);\n\t//             rj.vadd(xj, rj);\n\t//             rj.vsub(bj.position, rj);\n\t\n\t//             result.push(r);\n\t//         }\n\t//     }\n\t// };\n\t\n\tvar particlePlane_normal = new Vec3();\n\tvar particlePlane_relpos = new Vec3();\n\tvar particlePlane_projected = new Vec3();\n\t\n\t/**\n\t * @method particlePlane\n\t * @param  {Array}      result\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\n\tNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n\t    var normal = particlePlane_normal;\n\t    normal.set(0,0,1);\n\t    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n\t    var relpos = particlePlane_relpos;\n\t    xi.vsub(bj.position,relpos);\n\t    var dot = normal.dot(relpos);\n\t    if(dot <= 0.0){\n\t        var r = this.createContactEquation(bi,bj,si,sj);\n\t        r.ni.copy(normal); // Contact normal is the plane normal\n\t        r.ni.negate(r.ni);\n\t        r.ri.set(0,0,0); // Center of particle\n\t\n\t        // Get particle position projected on plane\n\t        var projected = particlePlane_projected;\n\t        normal.mult(normal.dot(xi),projected);\n\t        xi.vsub(projected,projected);\n\t        //projected.vadd(bj.position,projected);\n\t\n\t        // rj is now the projected world position minus plane position\n\t        r.rj.copy(projected);\n\t        this.result.push(r);\n\t        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t    }\n\t};\n\t\n\tvar particleSphere_normal = new Vec3();\n\t\n\t/**\n\t * @method particleSphere\n\t * @param  {Array}      result\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\n\tNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n\t    // The normal is the unit vector from sphere center to particle center\n\t    var normal = particleSphere_normal;\n\t    normal.set(0,0,1);\n\t    xi.vsub(xj,normal);\n\t    var lengthSquared = normal.norm2();\n\t\n\t    if(lengthSquared <= sj.radius * sj.radius){\n\t        var r = this.createContactEquation(bi,bj,si,sj);\n\t        normal.normalize();\n\t        r.rj.copy(normal);\n\t        r.rj.mult(sj.radius,r.rj);\n\t        r.ni.copy(normal); // Contact normal\n\t        r.ni.negate(r.ni);\n\t        r.ri.set(0,0,0); // Center of particle\n\t        this.result.push(r);\n\t        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t    }\n\t};\n\t\n\t// WIP\n\tvar cqj = new Quaternion();\n\tvar convexParticle_local = new Vec3();\n\tvar convexParticle_normal = new Vec3();\n\tvar convexParticle_penetratedFaceNormal = new Vec3();\n\tvar convexParticle_vertexToParticle = new Vec3();\n\tvar convexParticle_worldPenetrationVec = new Vec3();\n\t\n\t/**\n\t * @method convexParticle\n\t * @param  {Array}      result\n\t * @param  {Shape}      si\n\t * @param  {Shape}      sj\n\t * @param  {Vec3}       xi\n\t * @param  {Vec3}       xj\n\t * @param  {Quaternion} qi\n\t * @param  {Quaternion} qj\n\t * @param  {Body}       bi\n\t * @param  {Body}       bj\n\t */\n\tNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\n\tNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n\t    var penetratedFaceIndex = -1;\n\t    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n\t    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n\t    var minPenetration = null;\n\t    var numDetectedFaces = 0;\n\t\n\t    // Convert particle position xi to local coords in the convex\n\t    var local = convexParticle_local;\n\t    local.copy(xi);\n\t    local.vsub(xj,local); // Convert position to relative the convex origin\n\t    qj.conjugate(cqj);\n\t    cqj.vmult(local,local);\n\t\n\t    if(sj.pointIsInside(local)){\n\t\n\t        if(sj.worldVerticesNeedsUpdate){\n\t            sj.computeWorldVertices(xj,qj);\n\t        }\n\t        if(sj.worldFaceNormalsNeedsUpdate){\n\t            sj.computeWorldFaceNormals(qj);\n\t        }\n\t\n\t        // For each world polygon in the polyhedra\n\t        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\t\n\t            // Construct world face vertices\n\t            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n\t            var normal = sj.worldFaceNormals[i];\n\t\n\t            // Check how much the particle penetrates the polygon plane.\n\t            xi.vsub(verts[0],convexParticle_vertexToParticle);\n\t            var penetration = -normal.dot(convexParticle_vertexToParticle);\n\t            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n\t                minPenetration = penetration;\n\t                penetratedFaceIndex = i;\n\t                penetratedFaceNormal.copy(normal);\n\t                numDetectedFaces++;\n\t            }\n\t        }\n\t\n\t        if(penetratedFaceIndex!==-1){\n\t            // Setup contact\n\t            var r = this.createContactEquation(bi,bj,si,sj);\n\t            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\t\n\t            // rj is the particle position projected to the face\n\t            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n\t            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n\t            r.rj.copy(worldPenetrationVec);\n\t            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n\t            //projectedToFace.copy(r.rj);\n\t\n\t            //qj.vmult(r.rj,r.rj);\n\t            penetratedFaceNormal.negate( r.ni ); // Contact normal\n\t            r.ri.set(0,0,0); // Center of particle\n\t\n\t            var ri = r.ri,\n\t                rj = r.rj;\n\t\n\t            // Make relative to bodies\n\t            ri.vadd(xi, ri);\n\t            ri.vsub(bi.position, ri);\n\t            rj.vadd(xj, rj);\n\t            rj.vsub(bj.position, rj);\n\t\n\t            this.result.push(r);\n\t            this.createFrictionEquationsFromContact(r, this.frictionResult);\n\t        } else {\n\t            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n\t        }\n\t    }\n\t};\n\t\n\tNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\n\tNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n\t    si.convexPolyhedronRepresentation.material = si.material;\n\t    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n\t    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n\t};\n\t\n\tvar convexHeightfield_tmp1 = new Vec3();\n\tvar convexHeightfield_tmp2 = new Vec3();\n\tvar convexHeightfield_faceList = [0];\n\t\n\t/**\n\t * @method convexHeightfield\n\t */\n\tNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\n\tNarrowphase.prototype.convexHeightfield = function (\n\t    convexShape,\n\t    hfShape,\n\t    convexPos,\n\t    hfPos,\n\t    convexQuat,\n\t    hfQuat,\n\t    convexBody,\n\t    hfBody\n\t){\n\t    var data = hfShape.data,\n\t        w = hfShape.elementSize,\n\t        radius = convexShape.boundingSphereRadius,\n\t        worldPillarOffset = convexHeightfield_tmp2,\n\t        faceList = convexHeightfield_faceList;\n\t\n\t    // Get sphere position to heightfield local!\n\t    var localConvexPos = convexHeightfield_tmp1;\n\t    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\t\n\t    // Get the index of the data points to test against\n\t    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n\t        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n\t        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n\t        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\t\n\t    // Bail out if we are out of the terrain\n\t    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n\t        return;\n\t    }\n\t\n\t    // Clamp index to edges\n\t    if(iMinX < 0){ iMinX = 0; }\n\t    if(iMaxX < 0){ iMaxX = 0; }\n\t    if(iMinY < 0){ iMinY = 0; }\n\t    if(iMaxY < 0){ iMaxY = 0; }\n\t    if(iMinX >= data.length){ iMinX = data.length - 1; }\n\t    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n\t    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n\t    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\t\n\t    var minMax = [];\n\t    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n\t    var min = minMax[0];\n\t    var max = minMax[1];\n\t\n\t    // Bail out if we're cant touch the bounding height box\n\t    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n\t        return;\n\t    }\n\t\n\t    for(var i = iMinX; i < iMaxX; i++){\n\t        for(var j = iMinY; j < iMaxY; j++){\n\t\n\t            // Lower triangle\n\t            hfShape.getConvexTrianglePillar(i, j, false);\n\t            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\t            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n\t                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n\t            }\n\t\n\t            // Upper triangle\n\t            hfShape.getConvexTrianglePillar(i, j, true);\n\t            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\t            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n\t                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\tvar sphereHeightfield_tmp1 = new Vec3();\n\tvar sphereHeightfield_tmp2 = new Vec3();\n\t\n\t/**\n\t * @method sphereHeightfield\n\t */\n\tNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\n\tNarrowphase.prototype.sphereHeightfield = function (\n\t    sphereShape,\n\t    hfShape,\n\t    spherePos,\n\t    hfPos,\n\t    sphereQuat,\n\t    hfQuat,\n\t    sphereBody,\n\t    hfBody\n\t){\n\t    var data = hfShape.data,\n\t        radius = sphereShape.radius,\n\t        w = hfShape.elementSize,\n\t        worldPillarOffset = sphereHeightfield_tmp2;\n\t\n\t    // Get sphere position to heightfield local!\n\t    var localSpherePos = sphereHeightfield_tmp1;\n\t    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\t\n\t    // Get the index of the data points to test against\n\t    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n\t        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n\t        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n\t        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\t\n\t    // Bail out if we are out of the terrain\n\t    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n\t        return;\n\t    }\n\t\n\t    // Clamp index to edges\n\t    if(iMinX < 0){ iMinX = 0; }\n\t    if(iMaxX < 0){ iMaxX = 0; }\n\t    if(iMinY < 0){ iMinY = 0; }\n\t    if(iMaxY < 0){ iMaxY = 0; }\n\t    if(iMinX >= data.length){ iMinX = data.length - 1; }\n\t    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n\t    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n\t    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\t\n\t    var minMax = [];\n\t    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n\t    var min = minMax[0];\n\t    var max = minMax[1];\n\t\n\t    // Bail out if we're cant touch the bounding height box\n\t    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n\t        return;\n\t    }\n\t\n\t    var result = this.result;\n\t    for(var i = iMinX; i < iMaxX; i++){\n\t        for(var j = iMinY; j < iMaxY; j++){\n\t\n\t            var numContactsBefore = result.length;\n\t\n\t            // Lower triangle\n\t            hfShape.getConvexTrianglePillar(i, j, false);\n\t            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\t            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n\t                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n\t            }\n\t\n\t            // Upper triangle\n\t            hfShape.getConvexTrianglePillar(i, j, true);\n\t            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\t            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n\t                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n\t            }\n\t\n\t            var numContacts = result.length - numContactsBefore;\n\t\n\t            if(numContacts > 2){\n\t                return;\n\t            }\n\t            /*\n\t            // Skip all but 1\n\t            for (var k = 0; k < numContacts - 1; k++) {\n\t                result.pop();\n\t            }\n\t            */\n\t        }\n\t    }\n\t};\n\n\n/***/ },\n/* 385 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Ray;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Transform = __webpack_require__(377);\n\tvar ConvexPolyhedron = __webpack_require__(376);\n\tvar Box = __webpack_require__(375);\n\tvar RaycastResult = __webpack_require__(386);\n\tvar Shape = __webpack_require__(372);\n\tvar AABB = __webpack_require__(365);\n\t\n\t/**\n\t * A line in 3D space that intersects bodies and return points.\n\t * @class Ray\n\t * @constructor\n\t * @param {Vec3} from\n\t * @param {Vec3} to\n\t */\n\tfunction Ray(from, to){\n\t    /**\n\t     * @property {Vec3} from\n\t     */\n\t    this.from = from ? from.clone() : new Vec3();\n\t\n\t    /**\n\t     * @property {Vec3} to\n\t     */\n\t    this.to = to ? to.clone() : new Vec3();\n\t\n\t    /**\n\t     * @private\n\t     * @property {Vec3} _direction\n\t     */\n\t    this._direction = new Vec3();\n\t\n\t    /**\n\t     * The precision of the ray. Used when checking parallelity etc.\n\t     * @property {Number} precision\n\t     */\n\t    this.precision = 0.0001;\n\t\n\t    /**\n\t     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n\t     * @property {Boolean} checkCollisionResponse\n\t     */\n\t    this.checkCollisionResponse = true;\n\t\n\t    /**\n\t     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n\t     * @property {Boolean} skipBackfaces\n\t     */\n\t    this.skipBackfaces = false;\n\t\n\t    /**\n\t     * @property {number} collisionFilterMask\n\t     * @default -1\n\t     */\n\t    this.collisionFilterMask = -1;\n\t\n\t    /**\n\t     * @property {number} collisionFilterGroup\n\t     * @default -1\n\t     */\n\t    this.collisionFilterGroup = -1;\n\t\n\t    /**\n\t     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n\t     * @property {number} mode\n\t     */\n\t    this.mode = Ray.ANY;\n\t\n\t    /**\n\t     * Current result object.\n\t     * @property {RaycastResult} result\n\t     */\n\t    this.result = new RaycastResult();\n\t\n\t    /**\n\t     * Will be set to true during intersectWorld() if the ray hit anything.\n\t     * @property {Boolean} hasHit\n\t     */\n\t    this.hasHit = false;\n\t\n\t    /**\n\t     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n\t     * @property {Function} callback\n\t     */\n\t    this.callback = function(result){};\n\t}\n\tRay.prototype.constructor = Ray;\n\t\n\tRay.CLOSEST = 1;\n\tRay.ANY = 2;\n\tRay.ALL = 4;\n\t\n\tvar tmpAABB = new AABB();\n\tvar tmpArray = [];\n\t\n\t/**\n\t * Do itersection against all bodies in the given World.\n\t * @method intersectWorld\n\t * @param  {World} world\n\t * @param  {object} options\n\t * @return {Boolean} True if the ray hit anything, otherwise false.\n\t */\n\tRay.prototype.intersectWorld = function (world, options) {\n\t    this.mode = options.mode || Ray.ANY;\n\t    this.result = options.result || new RaycastResult();\n\t    this.skipBackfaces = !!options.skipBackfaces;\n\t    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n\t    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n\t    if(options.from){\n\t        this.from.copy(options.from);\n\t    }\n\t    if(options.to){\n\t        this.to.copy(options.to);\n\t    }\n\t    this.callback = options.callback || function(){};\n\t    this.hasHit = false;\n\t\n\t    this.result.reset();\n\t    this._updateDirection();\n\t\n\t    this.getAABB(tmpAABB);\n\t    tmpArray.length = 0;\n\t    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n\t    this.intersectBodies(tmpArray);\n\t\n\t    return this.hasHit;\n\t};\n\t\n\tvar v1 = new Vec3(),\n\t    v2 = new Vec3();\n\t\n\t/*\n\t * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n\t */\n\tRay.pointInTriangle = pointInTriangle;\n\tfunction pointInTriangle(p, a, b, c) {\n\t    c.vsub(a,v0);\n\t    b.vsub(a,v1);\n\t    p.vsub(a,v2);\n\t\n\t    var dot00 = v0.dot( v0 );\n\t    var dot01 = v0.dot( v1 );\n\t    var dot02 = v0.dot( v2 );\n\t    var dot11 = v1.dot( v1 );\n\t    var dot12 = v1.dot( v2 );\n\t\n\t    var u,v;\n\t\n\t    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n\t            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n\t            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n\t}\n\t\n\t/**\n\t * Shoot a ray at a body, get back information about the hit.\n\t * @method intersectBody\n\t * @private\n\t * @param {Body} body\n\t * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n\t */\n\tvar intersectBody_xi = new Vec3();\n\tvar intersectBody_qi = new Quaternion();\n\tRay.prototype.intersectBody = function (body, result) {\n\t    if(result){\n\t        this.result = result;\n\t        this._updateDirection();\n\t    }\n\t    var checkCollisionResponse = this.checkCollisionResponse;\n\t\n\t    if(checkCollisionResponse && !body.collisionResponse){\n\t        return;\n\t    }\n\t\n\t    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n\t        return;\n\t    }\n\t\n\t    var xi = intersectBody_xi;\n\t    var qi = intersectBody_qi;\n\t\n\t    for (var i = 0, N = body.shapes.length; i < N; i++) {\n\t        var shape = body.shapes[i];\n\t\n\t        if(checkCollisionResponse && !shape.collisionResponse){\n\t            continue; // Skip\n\t        }\n\t\n\t        body.quaternion.mult(body.shapeOrientations[i], qi);\n\t        body.quaternion.vmult(body.shapeOffsets[i], xi);\n\t        xi.vadd(body.position, xi);\n\t\n\t        this.intersectShape(\n\t            shape,\n\t            qi,\n\t            xi,\n\t            body\n\t        );\n\t\n\t        if(this.result._shouldStop){\n\t            break;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * @method intersectBodies\n\t * @param {Array} bodies An array of Body objects.\n\t * @param {RaycastResult} [result] Deprecated\n\t */\n\tRay.prototype.intersectBodies = function (bodies, result) {\n\t    if(result){\n\t        this.result = result;\n\t        this._updateDirection();\n\t    }\n\t\n\t    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n\t        this.intersectBody(bodies[i]);\n\t    }\n\t};\n\t\n\t/**\n\t * Updates the _direction vector.\n\t * @private\n\t * @method _updateDirection\n\t */\n\tRay.prototype._updateDirection = function(){\n\t    this.to.vsub(this.from, this._direction);\n\t    this._direction.normalize();\n\t};\n\t\n\t/**\n\t * @method intersectShape\n\t * @private\n\t * @param {Shape} shape\n\t * @param {Quaternion} quat\n\t * @param {Vec3} position\n\t * @param {Body} body\n\t */\n\tRay.prototype.intersectShape = function(shape, quat, position, body){\n\t    var from = this.from;\n\t\n\t\n\t    // Checking boundingSphere\n\t    var distance = distanceFromIntersection(from, this._direction, position);\n\t    if ( distance > shape.boundingSphereRadius ) {\n\t        return;\n\t    }\n\t\n\t    var intersectMethod = this[shape.type];\n\t    if(intersectMethod){\n\t        intersectMethod.call(this, shape, quat, position, body);\n\t    }\n\t};\n\t\n\tvar vector = new Vec3();\n\tvar normal = new Vec3();\n\tvar intersectPoint = new Vec3();\n\t\n\tvar a = new Vec3();\n\tvar b = new Vec3();\n\tvar c = new Vec3();\n\tvar d = new Vec3();\n\t\n\tvar tmpRaycastResult = new RaycastResult();\n\t\n\t/**\n\t * @method intersectBox\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t */\n\tRay.prototype.intersectBox = function(shape, quat, position, body){\n\t    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n\t};\n\tRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\t\n\t/**\n\t * @method intersectPlane\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t */\n\tRay.prototype.intersectPlane = function(shape, quat, position, body){\n\t    var from = this.from;\n\t    var to = this.to;\n\t    var direction = this._direction;\n\t\n\t    // Get plane normal\n\t    var worldNormal = new Vec3(0, 0, 1);\n\t    quat.vmult(worldNormal, worldNormal);\n\t\n\t    var len = new Vec3();\n\t    from.vsub(position, len);\n\t    var planeToFrom = len.dot(worldNormal);\n\t    to.vsub(position, len);\n\t    var planeToTo = len.dot(worldNormal);\n\t\n\t    if(planeToFrom * planeToTo > 0){\n\t        // \"from\" and \"to\" are on the same side of the plane... bail out\n\t        return;\n\t    }\n\t\n\t    if(from.distanceTo(to) < planeToFrom){\n\t        return;\n\t    }\n\t\n\t    var n_dot_dir = worldNormal.dot(direction);\n\t\n\t    if (Math.abs(n_dot_dir) < this.precision) {\n\t        // No intersection\n\t        return;\n\t    }\n\t\n\t    var planePointToFrom = new Vec3();\n\t    var dir_scaled_with_t = new Vec3();\n\t    var hitPointWorld = new Vec3();\n\t\n\t    from.vsub(position, planePointToFrom);\n\t    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n\t    direction.scale(t, dir_scaled_with_t);\n\t    from.vadd(dir_scaled_with_t, hitPointWorld);\n\t\n\t    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n\t};\n\tRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\t\n\t/**\n\t * Get the world AABB of the ray.\n\t * @method getAABB\n\t * @param  {AABB} aabb\n\t */\n\tRay.prototype.getAABB = function(result){\n\t    var to = this.to;\n\t    var from = this.from;\n\t    result.lowerBound.x = Math.min(to.x, from.x);\n\t    result.lowerBound.y = Math.min(to.y, from.y);\n\t    result.lowerBound.z = Math.min(to.z, from.z);\n\t    result.upperBound.x = Math.max(to.x, from.x);\n\t    result.upperBound.y = Math.max(to.y, from.y);\n\t    result.upperBound.z = Math.max(to.z, from.z);\n\t};\n\t\n\tvar intersectConvexOptions = {\n\t    faceList: [0]\n\t};\n\t\n\t/**\n\t * @method intersectHeightfield\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t */\n\tRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n\t    var data = shape.data,\n\t        w = shape.elementSize,\n\t        worldPillarOffset = new Vec3();\n\t\n\t    // Convert the ray to local heightfield coordinates\n\t    var localRay = new Ray(this.from, this.to);\n\t    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n\t    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\t\n\t    // Get the index of the data points to test against\n\t    var index = [];\n\t    var iMinX = null;\n\t    var iMinY = null;\n\t    var iMaxX = null;\n\t    var iMaxY = null;\n\t\n\t    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n\t    if(inside){\n\t        iMinX = index[0];\n\t        iMinY = index[1];\n\t        iMaxX = index[0];\n\t        iMaxY = index[1];\n\t    }\n\t    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n\t    if(inside){\n\t        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n\t        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n\t        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n\t        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n\t    }\n\t\n\t    if(iMinX === null){\n\t        return;\n\t    }\n\t\n\t    var minMax = [];\n\t    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n\t    var min = minMax[0];\n\t    var max = minMax[1];\n\t\n\t    // // Bail out if the ray can't touch the bounding box\n\t    // // TODO\n\t    // var aabb = new AABB();\n\t    // this.getAABB(aabb);\n\t    // if(aabb.intersects()){\n\t    //     return;\n\t    // }\n\t\n\t    for(var i = iMinX; i <= iMaxX; i++){\n\t        for(var j = iMinY; j <= iMaxY; j++){\n\t\n\t            if(this.result._shouldStop){\n\t                return;\n\t            }\n\t\n\t            // Lower triangle\n\t            shape.getConvexTrianglePillar(i, j, false);\n\t            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\t            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\t\n\t            if(this.result._shouldStop){\n\t                return;\n\t            }\n\t\n\t            // Upper triangle\n\t            shape.getConvexTrianglePillar(i, j, true);\n\t            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\t            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\t        }\n\t    }\n\t};\n\tRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\t\n\tvar Ray_intersectSphere_intersectionPoint = new Vec3();\n\tvar Ray_intersectSphere_normal = new Vec3();\n\t\n\t/**\n\t * @method intersectSphere\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t */\n\tRay.prototype.intersectSphere = function(shape, quat, position, body){\n\t    var from = this.from,\n\t        to = this.to,\n\t        r = shape.radius;\n\t\n\t    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n\t    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n\t    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\t\n\t    var delta = Math.pow(b, 2) - 4 * a * c;\n\t\n\t    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n\t    var normal = Ray_intersectSphere_normal;\n\t\n\t    if(delta < 0){\n\t        // No intersection\n\t        return;\n\t\n\t    } else if(delta === 0){\n\t        // single intersection point\n\t        from.lerp(to, delta, intersectionPoint);\n\t\n\t        intersectionPoint.vsub(position, normal);\n\t        normal.normalize();\n\t\n\t        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\t\n\t    } else {\n\t        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n\t        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\t\n\t        if(d1 >= 0 && d1 <= 1){\n\t            from.lerp(to, d1, intersectionPoint);\n\t            intersectionPoint.vsub(position, normal);\n\t            normal.normalize();\n\t            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\t        }\n\t\n\t        if(this.result._shouldStop){\n\t            return;\n\t        }\n\t\n\t        if(d2 >= 0 && d2 <= 1){\n\t            from.lerp(to, d2, intersectionPoint);\n\t            intersectionPoint.vsub(position, normal);\n\t            normal.normalize();\n\t            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\t        }\n\t    }\n\t};\n\tRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\t\n\t\n\tvar intersectConvex_normal = new Vec3();\n\tvar intersectConvex_minDistNormal = new Vec3();\n\tvar intersectConvex_minDistIntersect = new Vec3();\n\tvar intersectConvex_vector = new Vec3();\n\t\n\t/**\n\t * @method intersectConvex\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t * @param {object} [options]\n\t * @param {array} [options.faceList]\n\t */\n\tRay.prototype.intersectConvex = function intersectConvex(\n\t    shape,\n\t    quat,\n\t    position,\n\t    body,\n\t    options\n\t){\n\t    var minDistNormal = intersectConvex_minDistNormal;\n\t    var normal = intersectConvex_normal;\n\t    var vector = intersectConvex_vector;\n\t    var minDistIntersect = intersectConvex_minDistIntersect;\n\t    var faceList = (options && options.faceList) || null;\n\t\n\t    // Checking faces\n\t    var faces = shape.faces,\n\t        vertices = shape.vertices,\n\t        normals = shape.faceNormals;\n\t    var direction = this._direction;\n\t\n\t    var from = this.from;\n\t    var to = this.to;\n\t    var fromToDistance = from.distanceTo(to);\n\t\n\t    var minDist = -1;\n\t    var Nfaces = faceList ? faceList.length : faces.length;\n\t    var result = this.result;\n\t\n\t    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n\t        var fi = faceList ? faceList[j] : j;\n\t\n\t        var face = faces[fi];\n\t        var faceNormal = normals[fi];\n\t        var q = quat;\n\t        var x = position;\n\t\n\t        // determine if ray intersects the plane of the face\n\t        // note: this works regardless of the direction of the face normal\n\t\n\t        // Get plane point in world coordinates...\n\t        vector.copy(vertices[face[0]]);\n\t        q.vmult(vector,vector);\n\t        vector.vadd(x,vector);\n\t\n\t        // ...but make it relative to the ray from. We'll fix this later.\n\t        vector.vsub(from,vector);\n\t\n\t        // Get plane normal\n\t        q.vmult(faceNormal,normal);\n\t\n\t        // If this dot product is negative, we have something interesting\n\t        var dot = direction.dot(normal);\n\t\n\t        // Bail out if ray and plane are parallel\n\t        if ( Math.abs( dot ) < this.precision ){\n\t            continue;\n\t        }\n\t\n\t        // calc distance to plane\n\t        var scalar = normal.dot(vector) / dot;\n\t\n\t        // if negative distance, then plane is behind ray\n\t        if (scalar < 0){\n\t            continue;\n\t        }\n\t\n\t        // if (dot < 0) {\n\t\n\t        // Intersection point is from + direction * scalar\n\t        direction.mult(scalar,intersectPoint);\n\t        intersectPoint.vadd(from,intersectPoint);\n\t\n\t        // a is the point we compare points b and c with.\n\t        a.copy(vertices[face[0]]);\n\t        q.vmult(a,a);\n\t        x.vadd(a,a);\n\t\n\t        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n\t            // Transform 3 vertices to world coords\n\t            b.copy(vertices[face[i]]);\n\t            c.copy(vertices[face[i+1]]);\n\t            q.vmult(b,b);\n\t            q.vmult(c,c);\n\t            x.vadd(b,b);\n\t            x.vadd(c,c);\n\t\n\t            var distance = intersectPoint.distanceTo(from);\n\t\n\t            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n\t                continue;\n\t            }\n\t\n\t            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n\t        }\n\t        // }\n\t    }\n\t};\n\tRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\t\n\tvar intersectTrimesh_normal = new Vec3();\n\tvar intersectTrimesh_localDirection = new Vec3();\n\tvar intersectTrimesh_localFrom = new Vec3();\n\tvar intersectTrimesh_localTo = new Vec3();\n\tvar intersectTrimesh_worldNormal = new Vec3();\n\tvar intersectTrimesh_worldIntersectPoint = new Vec3();\n\tvar intersectTrimesh_localAABB = new AABB();\n\tvar intersectTrimesh_triangles = [];\n\tvar intersectTrimesh_treeTransform = new Transform();\n\t\n\t/**\n\t * @method intersectTrimesh\n\t * @private\n\t * @param  {Shape} shape\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} position\n\t * @param  {Body} body\n\t * @param {object} [options]\n\t * @todo Optimize by transforming the world to local space first.\n\t * @todo Use Octree lookup\n\t */\n\tRay.prototype.intersectTrimesh = function intersectTrimesh(\n\t    mesh,\n\t    quat,\n\t    position,\n\t    body,\n\t    options\n\t){\n\t    var normal = intersectTrimesh_normal;\n\t    var triangles = intersectTrimesh_triangles;\n\t    var treeTransform = intersectTrimesh_treeTransform;\n\t    var minDistNormal = intersectConvex_minDistNormal;\n\t    var vector = intersectConvex_vector;\n\t    var minDistIntersect = intersectConvex_minDistIntersect;\n\t    var localAABB = intersectTrimesh_localAABB;\n\t    var localDirection = intersectTrimesh_localDirection;\n\t    var localFrom = intersectTrimesh_localFrom;\n\t    var localTo = intersectTrimesh_localTo;\n\t    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n\t    var worldNormal = intersectTrimesh_worldNormal;\n\t    var faceList = (options && options.faceList) || null;\n\t\n\t    // Checking faces\n\t    var indices = mesh.indices,\n\t        vertices = mesh.vertices,\n\t        normals = mesh.faceNormals;\n\t\n\t    var from = this.from;\n\t    var to = this.to;\n\t    var direction = this._direction;\n\t\n\t    var minDist = -1;\n\t    treeTransform.position.copy(position);\n\t    treeTransform.quaternion.copy(quat);\n\t\n\t    // Transform ray to local space!\n\t    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n\t    //body.vectorToLocalFrame(direction, localDirection);\n\t    Transform.pointToLocalFrame(position, quat, from, localFrom);\n\t    //body.pointToLocalFrame(from, localFrom);\n\t    Transform.pointToLocalFrame(position, quat, to, localTo);\n\t    //body.pointToLocalFrame(to, localTo);\n\t    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\t\n\t    mesh.tree.rayQuery(this, treeTransform, triangles);\n\t\n\t    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n\t        var trianglesIndex = triangles[i];\n\t\n\t        mesh.getNormal(trianglesIndex, normal);\n\t\n\t        // determine if ray intersects the plane of the face\n\t        // note: this works regardless of the direction of the face normal\n\t\n\t        // Get plane point in world coordinates...\n\t        mesh.getVertex(indices[trianglesIndex * 3], a);\n\t\n\t        // ...but make it relative to the ray from. We'll fix this later.\n\t        a.vsub(localFrom,vector);\n\t\n\t        // Get plane normal\n\t        // quat.vmult(normal, normal);\n\t\n\t        // If this dot product is negative, we have something interesting\n\t        var dot = localDirection.dot(normal);\n\t\n\t        // Bail out if ray and plane are parallel\n\t        // if (Math.abs( dot ) < this.precision){\n\t        //     continue;\n\t        // }\n\t\n\t        // calc distance to plane\n\t        var scalar = normal.dot(vector) / dot;\n\t\n\t        // if negative distance, then plane is behind ray\n\t        if (scalar < 0){\n\t            continue;\n\t        }\n\t\n\t        // Intersection point is from + direction * scalar\n\t        localDirection.scale(scalar,intersectPoint);\n\t        intersectPoint.vadd(localFrom,intersectPoint);\n\t\n\t        // Get triangle vertices\n\t        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n\t        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\t\n\t        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\t\n\t        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n\t            continue;\n\t        }\n\t\n\t        // transform intersectpoint and normal to world\n\t        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n\t        //body.vectorToWorldFrame(normal, worldNormal);\n\t        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n\t        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n\t        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n\t    }\n\t    triangles.length = 0;\n\t};\n\tRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\t\n\t\n\t/**\n\t * @method reportIntersection\n\t * @private\n\t * @param  {Vec3} normal\n\t * @param  {Vec3} hitPointWorld\n\t * @param  {Shape} shape\n\t * @param  {Body} body\n\t * @return {boolean} True if the intersections should continue\n\t */\n\tRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n\t    var from = this.from;\n\t    var to = this.to;\n\t    var distance = from.distanceTo(hitPointWorld);\n\t    var result = this.result;\n\t\n\t    // Skip back faces?\n\t    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n\t        return;\n\t    }\n\t\n\t    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\t\n\t    switch(this.mode){\n\t    case Ray.ALL:\n\t        this.hasHit = true;\n\t        result.set(\n\t            from,\n\t            to,\n\t            normal,\n\t            hitPointWorld,\n\t            shape,\n\t            body,\n\t            distance\n\t        );\n\t        result.hasHit = true;\n\t        this.callback(result);\n\t        break;\n\t\n\t    case Ray.CLOSEST:\n\t\n\t        // Store if closer than current closest\n\t        if(distance < result.distance || !result.hasHit){\n\t            this.hasHit = true;\n\t            result.hasHit = true;\n\t            result.set(\n\t                from,\n\t                to,\n\t                normal,\n\t                hitPointWorld,\n\t                shape,\n\t                body,\n\t                distance\n\t            );\n\t        }\n\t        break;\n\t\n\t    case Ray.ANY:\n\t\n\t        // Report and stop.\n\t        this.hasHit = true;\n\t        result.hasHit = true;\n\t        result.set(\n\t            from,\n\t            to,\n\t            normal,\n\t            hitPointWorld,\n\t            shape,\n\t            body,\n\t            distance\n\t        );\n\t        result._shouldStop = true;\n\t        break;\n\t    }\n\t};\n\t\n\tvar v0 = new Vec3(),\n\t    intersect = new Vec3();\n\tfunction distanceFromIntersection(from, direction, position) {\n\t\n\t    // v0 is vector from from to position\n\t    position.vsub(from,v0);\n\t    var dot = v0.dot(direction);\n\t\n\t    // intersect = direction*dot + from\n\t    direction.mult(dot,intersect);\n\t    intersect.vadd(from,intersect);\n\t\n\t    var distance = position.distanceTo(intersect);\n\t\n\t    return distance;\n\t}\n\t\n\n\n/***/ },\n/* 386 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Vec3 = __webpack_require__(366);\n\t\n\tmodule.exports = RaycastResult;\n\t\n\t/**\n\t * Storage for Ray casting data.\n\t * @class RaycastResult\n\t * @constructor\n\t */\n\tfunction RaycastResult(){\n\t\n\t\t/**\n\t\t * @property {Vec3} rayFromWorld\n\t\t */\n\t\tthis.rayFromWorld = new Vec3();\n\t\n\t\t/**\n\t\t * @property {Vec3} rayToWorld\n\t\t */\n\t\tthis.rayToWorld = new Vec3();\n\t\n\t\t/**\n\t\t * @property {Vec3} hitNormalWorld\n\t\t */\n\t\tthis.hitNormalWorld = new Vec3();\n\t\n\t\t/**\n\t\t * @property {Vec3} hitPointWorld\n\t\t */\n\t\tthis.hitPointWorld = new Vec3();\n\t\n\t\t/**\n\t\t * @property {boolean} hasHit\n\t\t */\n\t\tthis.hasHit = false;\n\t\n\t\t/**\n\t\t * The hit shape, or null.\n\t\t * @property {Shape} shape\n\t\t */\n\t\tthis.shape = null;\n\t\n\t\t/**\n\t\t * The hit body, or null.\n\t\t * @property {Body} body\n\t\t */\n\t\tthis.body = null;\n\t\n\t\t/**\n\t\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t\t * @property {number} hitFaceIndex\n\t\t * @default -1\n\t\t */\n\t\tthis.hitFaceIndex = -1;\n\t\n\t\t/**\n\t\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t\t * @property {number} distance\n\t\t * @default -1\n\t\t */\n\t\tthis.distance = -1;\n\t\n\t\t/**\n\t\t * If the ray should stop traversing the bodies.\n\t\t * @private\n\t\t * @property {Boolean} _shouldStop\n\t\t * @default false\n\t\t */\n\t\tthis._shouldStop = false;\n\t}\n\t\n\t/**\n\t * Reset all result data.\n\t * @method reset\n\t */\n\tRaycastResult.prototype.reset = function () {\n\t\tthis.rayFromWorld.setZero();\n\t\tthis.rayToWorld.setZero();\n\t\tthis.hitNormalWorld.setZero();\n\t\tthis.hitPointWorld.setZero();\n\t\tthis.hasHit = false;\n\t\tthis.shape = null;\n\t\tthis.body = null;\n\t\tthis.hitFaceIndex = -1;\n\t\tthis.distance = -1;\n\t\tthis._shouldStop = false;\n\t};\n\t\n\t/**\n\t * @method abort\n\t */\n\tRaycastResult.prototype.abort = function(){\n\t\tthis._shouldStop = true;\n\t};\n\t\n\t/**\n\t * @method set\n\t * @param {Vec3} rayFromWorld\n\t * @param {Vec3} rayToWorld\n\t * @param {Vec3} hitNormalWorld\n\t * @param {Vec3} hitPointWorld\n\t * @param {Shape} shape\n\t * @param {Body} body\n\t * @param {number} distance\n\t */\n\tRaycastResult.prototype.set = function(\n\t\trayFromWorld,\n\t\trayToWorld,\n\t\thitNormalWorld,\n\t\thitPointWorld,\n\t\tshape,\n\t\tbody,\n\t\tdistance\n\t){\n\t\tthis.rayFromWorld.copy(rayFromWorld);\n\t\tthis.rayToWorld.copy(rayToWorld);\n\t\tthis.hitNormalWorld.copy(hitNormalWorld);\n\t\tthis.hitPointWorld.copy(hitPointWorld);\n\t\tthis.shape = shape;\n\t\tthis.body = body;\n\t\tthis.distance = distance;\n\t};\n\n/***/ },\n/* 387 */\n/***/ function(module, exports) {\n\n\tmodule.exports = Solver;\n\t\n\t/**\n\t * Constraint equation solver base class.\n\t * @class Solver\n\t * @constructor\n\t * @author schteppe / https://github.com/schteppe\n\t */\n\tfunction Solver(){\n\t    /**\n\t     * All equations to be solved\n\t     * @property {Array} equations\n\t     */\n\t    this.equations = [];\n\t}\n\t\n\t/**\n\t * Should be implemented in subclasses!\n\t * @method solve\n\t * @param  {Number} dt\n\t * @param  {World} world\n\t */\n\tSolver.prototype.solve = function(dt,world){\n\t    // Should return the number of iterations done!\n\t    return 0;\n\t};\n\t\n\t/**\n\t * Add an equation\n\t * @method addEquation\n\t * @param {Equation} eq\n\t */\n\tSolver.prototype.addEquation = function(eq){\n\t    if (eq.enabled) {\n\t        this.equations.push(eq);\n\t    }\n\t};\n\t\n\t/**\n\t * Remove an equation\n\t * @method removeEquation\n\t * @param {Equation} eq\n\t */\n\tSolver.prototype.removeEquation = function(eq){\n\t    var eqs = this.equations;\n\t    var i = eqs.indexOf(eq);\n\t    if(i !== -1){\n\t        eqs.splice(i,1);\n\t    }\n\t};\n\t\n\t/**\n\t * Add all equations\n\t * @method removeAllEquations\n\t */\n\tSolver.prototype.removeAllEquations = function(){\n\t    this.equations.length = 0;\n\t};\n\t\n\n\n/***/ },\n/* 388 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Vec3Pool;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Pool = __webpack_require__(389);\n\t\n\t/**\n\t * @class Vec3Pool\n\t * @constructor\n\t * @extends Pool\n\t */\n\tfunction Vec3Pool(){\n\t    Pool.call(this);\n\t    this.type = Vec3;\n\t}\n\tVec3Pool.prototype = new Pool();\n\t\n\t/**\n\t * Construct a vector\n\t * @method constructObject\n\t * @return {Vec3}\n\t */\n\tVec3Pool.prototype.constructObject = function(){\n\t    return new Vec3();\n\t};\n\n\n/***/ },\n/* 389 */\n/***/ function(module, exports) {\n\n\tmodule.exports = Pool;\n\t\n\t/**\n\t * For pooling objects that can be reused.\n\t * @class Pool\n\t * @constructor\n\t */\n\tfunction Pool(){\n\t    /**\n\t     * The pooled objects\n\t     * @property {Array} objects\n\t     */\n\t    this.objects = [];\n\t\n\t    /**\n\t     * Constructor of the objects\n\t     * @property {mixed} type\n\t     */\n\t    this.type = Object;\n\t}\n\t\n\t/**\n\t * Release an object after use\n\t * @method release\n\t * @param {Object} obj\n\t */\n\tPool.prototype.release = function(){\n\t    var Nargs = arguments.length;\n\t    for(var i=0; i!==Nargs; i++){\n\t        this.objects.push(arguments[i]);\n\t    }\n\t};\n\t\n\t/**\n\t * Get an object\n\t * @method get\n\t * @return {mixed}\n\t */\n\tPool.prototype.get = function(){\n\t    if(this.objects.length===0){\n\t        return this.constructObject();\n\t    } else {\n\t        return this.objects.pop();\n\t    }\n\t};\n\t\n\t/**\n\t * Construct an object. Should be implmented in each subclass.\n\t * @method constructObject\n\t * @return {mixed}\n\t */\n\tPool.prototype.constructObject = function(){\n\t    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n\t};\n\n\n/***/ },\n/* 390 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = FrictionEquation;\n\t\n\tvar Equation = __webpack_require__(382);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\t\n\t/**\n\t * Constrains the slipping in a contact along a tangent\n\t * @class FrictionEquation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n\t * @extends Equation\n\t */\n\tfunction FrictionEquation(bodyA, bodyB, slipForce){\n\t    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n\t    this.ri = new Vec3();\n\t    this.rj = new Vec3();\n\t    this.t = new Vec3(); // tangent\n\t}\n\t\n\tFrictionEquation.prototype = new Equation();\n\tFrictionEquation.prototype.constructor = FrictionEquation;\n\t\n\tvar FrictionEquation_computeB_temp1 = new Vec3();\n\tvar FrictionEquation_computeB_temp2 = new Vec3();\n\tFrictionEquation.prototype.computeB = function(h){\n\t    var a = this.a,\n\t        b = this.b,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t        ri = this.ri,\n\t        rj = this.rj,\n\t        rixt = FrictionEquation_computeB_temp1,\n\t        rjxt = FrictionEquation_computeB_temp2,\n\t        t = this.t;\n\t\n\t    // Caluclate cross products\n\t    ri.cross(t,rixt);\n\t    rj.cross(t,rjxt);\n\t\n\t    // G = [-t -rixt t rjxt]\n\t    // And remember, this is a pure velocity constraint, g is always zero!\n\t    var GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB;\n\t    t.negate(GA.spatial);\n\t    rixt.negate(GA.rotational);\n\t    GB.spatial.copy(t);\n\t    GB.rotational.copy(rjxt);\n\t\n\t    var GW = this.computeGW();\n\t    var GiMf = this.computeGiMf();\n\t\n\t    var B = - GW * b - h * GiMf;\n\t\n\t    return B;\n\t};\n\n\n/***/ },\n/* 391 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = ConeTwistConstraint;\n\t\n\tvar Constraint = __webpack_require__(380);\n\tvar PointToPointConstraint = __webpack_require__(392);\n\tvar ConeEquation = __webpack_require__(393);\n\tvar RotationalEquation = __webpack_require__(394);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * @class ConeTwistConstraint\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {object} [options]\n\t * @param {Vec3} [options.pivotA]\n\t * @param {Vec3} [options.pivotB]\n\t * @param {Vec3} [options.axisA]\n\t * @param {Vec3} [options.axisB]\n\t * @param {Number} [options.maxForce=1e6]\n\t * @extends PointToPointConstraint\n\t */\n\tfunction ConeTwistConstraint(bodyA, bodyB, options){\n\t    options = options || {};\n\t    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\t\n\t    // Set pivot point in between\n\t    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n\t    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\t    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n\t    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\t\n\t    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\t\n\t    this.collideConnected = !!options.collideConnected;\n\t\n\t    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\t\n\t    /**\n\t     * @property {ConeEquation} coneEquation\n\t     */\n\t    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\t\n\t    /**\n\t     * @property {RotationalEquation} twistEquation\n\t     */\n\t    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n\t    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\t\n\t    // Make the cone equation push the bodies toward the cone axis, not outward\n\t    c.maxForce = 0;\n\t    c.minForce = -maxForce;\n\t\n\t    // Make the twist equation add torque toward the initial position\n\t    t.maxForce = 0;\n\t    t.minForce = -maxForce;\n\t\n\t    this.equations.push(c, t);\n\t}\n\tConeTwistConstraint.prototype = new PointToPointConstraint();\n\tConeTwistConstraint.constructor = ConeTwistConstraint;\n\t\n\tvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\n\tvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\t\n\tConeTwistConstraint.prototype.update = function(){\n\t    var bodyA = this.bodyA,\n\t        bodyB = this.bodyB,\n\t        cone = this.coneEquation,\n\t        twist = this.twistEquation;\n\t\n\t    PointToPointConstraint.prototype.update.call(this);\n\t\n\t    // Update the axes to the cone constraint\n\t    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n\t    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\t\n\t    // Update the world axes in the twist constraint\n\t    this.axisA.tangents(twist.axisA, twist.axisA);\n\t    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\t\n\t    this.axisB.tangents(twist.axisB, twist.axisB);\n\t    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\t\n\t    cone.angle = this.angle;\n\t    twist.maxAngle = this.twistAngle;\n\t};\n\t\n\n\n/***/ },\n/* 392 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = PointToPointConstraint;\n\t\n\tvar Constraint = __webpack_require__(380);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Connects two bodies at given offset points.\n\t * @class PointToPointConstraint\n\t * @extends Constraint\n\t * @constructor\n\t * @param {Body} bodyA\n\t * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n\t * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n\t * @param {Vec3} pivotB See pivotA.\n\t * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n\t *\n\t * @example\n\t *     var bodyA = new Body({ mass: 1 });\n\t *     var bodyB = new Body({ mass: 1 });\n\t *     bodyA.position.set(-1, 0, 0);\n\t *     bodyB.position.set(1, 0, 0);\n\t *     bodyA.addShape(shapeA);\n\t *     bodyB.addShape(shapeB);\n\t *     world.addBody(bodyA);\n\t *     world.addBody(bodyB);\n\t *     var localPivotA = new Vec3(1, 0, 0);\n\t *     var localPivotB = new Vec3(-1, 0, 0);\n\t *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n\t *     world.addConstraint(constraint);\n\t */\n\tfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n\t    Constraint.call(this,bodyA,bodyB);\n\t\n\t    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\t\n\t    /**\n\t     * Pivot, defined locally in bodyA.\n\t     * @property {Vec3} pivotA\n\t     */\n\t    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\t\n\t    /**\n\t     * Pivot, defined locally in bodyB.\n\t     * @property {Vec3} pivotB\n\t     */\n\t    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\t\n\t    /**\n\t     * @property {ContactEquation} equationX\n\t     */\n\t    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\t\n\t    /**\n\t     * @property {ContactEquation} equationY\n\t     */\n\t    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\t\n\t    /**\n\t     * @property {ContactEquation} equationZ\n\t     */\n\t    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\t\n\t    // Equations to be fed to the solver\n\t    this.equations.push(x, y, z);\n\t\n\t    // Make the equations bidirectional\n\t    x.minForce = y.minForce = z.minForce = -maxForce;\n\t    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\t\n\t    x.ni.set(1, 0, 0);\n\t    y.ni.set(0, 1, 0);\n\t    z.ni.set(0, 0, 1);\n\t}\n\tPointToPointConstraint.prototype = new Constraint();\n\t\n\tPointToPointConstraint.prototype.update = function(){\n\t    var bodyA = this.bodyA;\n\t    var bodyB = this.bodyB;\n\t    var x = this.equationX;\n\t    var y = this.equationY;\n\t    var z = this.equationZ;\n\t\n\t    // Rotate the pivots to world space\n\t    bodyA.quaternion.vmult(this.pivotA,x.ri);\n\t    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\t\n\t    y.ri.copy(x.ri);\n\t    y.rj.copy(x.rj);\n\t    z.ri.copy(x.ri);\n\t    z.rj.copy(x.rj);\n\t};\n\n/***/ },\n/* 393 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = ConeEquation;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\tvar Equation = __webpack_require__(382);\n\t\n\t/**\n\t * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n\t * @class ConeEquation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Vec3} [options.axisA] Local axis in A\n\t * @param {Vec3} [options.axisB] Local axis in B\n\t * @param {Vec3} [options.angle] The \"cone angle\" to keep\n\t * @param {number} [options.maxForce=1e6]\n\t * @extends Equation\n\t */\n\tfunction ConeEquation(bodyA, bodyB, options){\n\t    options = options || {};\n\t    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\t\n\t    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\t\n\t    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n\t    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\t\n\t    /**\n\t     * The cone angle to keep\n\t     * @property {number} angle\n\t     */\n\t    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\t}\n\t\n\tConeEquation.prototype = new Equation();\n\tConeEquation.prototype.constructor = ConeEquation;\n\t\n\tvar tmpVec1 = new Vec3();\n\tvar tmpVec2 = new Vec3();\n\t\n\tConeEquation.prototype.computeB = function(h){\n\t    var a = this.a,\n\t        b = this.b,\n\t\n\t        ni = this.axisA,\n\t        nj = this.axisB,\n\t\n\t        nixnj = tmpVec1,\n\t        njxni = tmpVec2,\n\t\n\t        GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB;\n\t\n\t    // Caluclate cross products\n\t    ni.cross(nj, nixnj);\n\t    nj.cross(ni, njxni);\n\t\n\t    // The angle between two vector is:\n\t    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\t\n\t    // g = a * b\n\t    // gdot = (b x a) * wi + (a x b) * wj\n\t    // G = [0 bxa 0 axb]\n\t    // W = [vi wi vj wj]\n\t    GA.rotational.copy(njxni);\n\t    GB.rotational.copy(nixnj);\n\t\n\t    var g = Math.cos(this.angle) - ni.dot(nj),\n\t        GW = this.computeGW(),\n\t        GiMf = this.computeGiMf();\n\t\n\t    var B = - g * a - GW * b - h * GiMf;\n\t\n\t    return B;\n\t};\n\t\n\n\n/***/ },\n/* 394 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = RotationalEquation;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\tvar Equation = __webpack_require__(382);\n\t\n\t/**\n\t * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n\t * @class RotationalEquation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Vec3} [options.axisA]\n\t * @param {Vec3} [options.axisB]\n\t * @param {number} [options.maxForce]\n\t * @extends Equation\n\t */\n\tfunction RotationalEquation(bodyA, bodyB, options){\n\t    options = options || {};\n\t    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\t\n\t    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\t\n\t    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n\t    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\t\n\t    this.maxAngle = Math.PI / 2;\n\t}\n\t\n\tRotationalEquation.prototype = new Equation();\n\tRotationalEquation.prototype.constructor = RotationalEquation;\n\t\n\tvar tmpVec1 = new Vec3();\n\tvar tmpVec2 = new Vec3();\n\t\n\tRotationalEquation.prototype.computeB = function(h){\n\t    var a = this.a,\n\t        b = this.b,\n\t\n\t        ni = this.axisA,\n\t        nj = this.axisB,\n\t\n\t        nixnj = tmpVec1,\n\t        njxni = tmpVec2,\n\t\n\t        GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB;\n\t\n\t    // Caluclate cross products\n\t    ni.cross(nj, nixnj);\n\t    nj.cross(ni, njxni);\n\t\n\t    // g = ni * nj\n\t    // gdot = (nj x ni) * wi + (ni x nj) * wj\n\t    // G = [0 njxni 0 nixnj]\n\t    // W = [vi wi vj wj]\n\t    GA.rotational.copy(njxni);\n\t    GB.rotational.copy(nixnj);\n\t\n\t    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n\t        GW = this.computeGW(),\n\t        GiMf = this.computeGiMf();\n\t\n\t    var B = - g * a - GW * b - h * GiMf;\n\t\n\t    return B;\n\t};\n\t\n\n\n/***/ },\n/* 395 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Utils = __webpack_require__(368);\n\t\n\tmodule.exports = ContactMaterial;\n\t\n\t/**\n\t * Defines what happens when two materials meet.\n\t * @class ContactMaterial\n\t * @constructor\n\t * @param {Material} m1\n\t * @param {Material} m2\n\t * @param {object} [options]\n\t * @param {Number} [options.friction=0.3]\n\t * @param {Number} [options.restitution=0.3]\n\t * @param {number} [options.contactEquationStiffness=1e7]\n\t * @param {number} [options.contactEquationRelaxation=3]\n\t * @param {number} [options.frictionEquationStiffness=1e7]\n\t * @param {Number} [options.frictionEquationRelaxation=3]\n\t */\n\tfunction ContactMaterial(m1, m2, options){\n\t    options = Utils.defaults(options, {\n\t        friction: 0.3,\n\t        restitution: 0.3,\n\t        contactEquationStiffness: 1e7,\n\t        contactEquationRelaxation: 3,\n\t        frictionEquationStiffness: 1e7,\n\t        frictionEquationRelaxation: 3\n\t    });\n\t\n\t    /**\n\t     * Identifier of this material\n\t     * @property {Number} id\n\t     */\n\t    this.id = ContactMaterial.idCounter++;\n\t\n\t    /**\n\t     * Participating materials\n\t     * @property {Array} materials\n\t     * @todo  Should be .materialA and .materialB instead\n\t     */\n\t    this.materials = [m1, m2];\n\t\n\t    /**\n\t     * Friction coefficient\n\t     * @property {Number} friction\n\t     */\n\t    this.friction = options.friction;\n\t\n\t    /**\n\t     * Restitution coefficient\n\t     * @property {Number} restitution\n\t     */\n\t    this.restitution = options.restitution;\n\t\n\t    /**\n\t     * Stiffness of the produced contact equations\n\t     * @property {Number} contactEquationStiffness\n\t     */\n\t    this.contactEquationStiffness = options.contactEquationStiffness;\n\t\n\t    /**\n\t     * Relaxation time of the produced contact equations\n\t     * @property {Number} contactEquationRelaxation\n\t     */\n\t    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\t\n\t    /**\n\t     * Stiffness of the produced friction equations\n\t     * @property {Number} frictionEquationStiffness\n\t     */\n\t    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\t\n\t    /**\n\t     * Relaxation time of the produced friction equations\n\t     * @property {Number} frictionEquationRelaxation\n\t     */\n\t    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n\t}\n\t\n\tContactMaterial.idCounter = 0;\n\n\n/***/ },\n/* 396 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Cylinder;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar ConvexPolyhedron = __webpack_require__(376);\n\t\n\t/**\n\t * @class Cylinder\n\t * @constructor\n\t * @extends ConvexPolyhedron\n\t * @author schteppe / https://github.com/schteppe\n\t * @param {Number} radiusTop\n\t * @param {Number} radiusBottom\n\t * @param {Number} height\n\t * @param {Number} numSegments The number of segments to build the cylinder out of\n\t */\n\tfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n\t    var N = numSegments,\n\t        verts = [],\n\t        axes = [],\n\t        faces = [],\n\t        bottomface = [],\n\t        topface = [],\n\t        cos = Math.cos,\n\t        sin = Math.sin;\n\t\n\t    // First bottom point\n\t    verts.push(new Vec3(radiusBottom*cos(0),\n\t                               radiusBottom*sin(0),\n\t                               -height*0.5));\n\t    bottomface.push(0);\n\t\n\t    // First top point\n\t    verts.push(new Vec3(radiusTop*cos(0),\n\t                               radiusTop*sin(0),\n\t                               height*0.5));\n\t    topface.push(1);\n\t\n\t    for(var i=0; i<N; i++){\n\t        var theta = 2*Math.PI/N * (i+1);\n\t        var thetaN = 2*Math.PI/N * (i+0.5);\n\t        if(i<N-1){\n\t            // Bottom\n\t            verts.push(new Vec3(radiusBottom*cos(theta),\n\t                                       radiusBottom*sin(theta),\n\t                                       -height*0.5));\n\t            bottomface.push(2*i+2);\n\t            // Top\n\t            verts.push(new Vec3(radiusTop*cos(theta),\n\t                                       radiusTop*sin(theta),\n\t                                       height*0.5));\n\t            topface.push(2*i+3);\n\t\n\t            // Face\n\t            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n\t        } else {\n\t            faces.push([0,1, 2*i+1, 2*i]); // Connect\n\t        }\n\t\n\t        // Axis: we can cut off half of them if we have even number of segments\n\t        if(N % 2 === 1 || i < N / 2){\n\t            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n\t        }\n\t    }\n\t    faces.push(topface);\n\t    axes.push(new Vec3(0,0,1));\n\t\n\t    // Reorder bottom face\n\t    var temp = [];\n\t    for(var i=0; i<bottomface.length; i++){\n\t        temp.push(bottomface[bottomface.length - i - 1]);\n\t    }\n\t    faces.push(temp);\n\t\n\t    this.type = Shape.types.CONVEXPOLYHEDRON;\n\t    ConvexPolyhedron.call( this, verts, faces, axes );\n\t}\n\t\n\tCylinder.prototype = new ConvexPolyhedron();\n\n\n/***/ },\n/* 397 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = DistanceConstraint;\n\t\n\tvar Constraint = __webpack_require__(380);\n\tvar ContactEquation = __webpack_require__(381);\n\t\n\t/**\n\t * Constrains two bodies to be at a constant distance from each others center of mass.\n\t * @class DistanceConstraint\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n\t * @param {Number} [maxForce=1e6]\n\t * @extends Constraint\n\t */\n\tfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n\t    Constraint.call(this,bodyA,bodyB);\n\t\n\t    if(typeof(distance)===\"undefined\") {\n\t        distance = bodyA.position.distanceTo(bodyB.position);\n\t    }\n\t\n\t    if(typeof(maxForce)===\"undefined\") {\n\t        maxForce = 1e6;\n\t    }\n\t\n\t    /**\n\t     * @property {number} distance\n\t     */\n\t    this.distance = distance;\n\t\n\t    /**\n\t     * @property {ContactEquation} distanceEquation\n\t     */\n\t    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n\t    this.equations.push(eq);\n\t\n\t    // Make it bidirectional\n\t    eq.minForce = -maxForce;\n\t    eq.maxForce =  maxForce;\n\t}\n\tDistanceConstraint.prototype = new Constraint();\n\t\n\tDistanceConstraint.prototype.update = function(){\n\t    var bodyA = this.bodyA;\n\t    var bodyB = this.bodyB;\n\t    var eq = this.distanceEquation;\n\t    var halfDist = this.distance * 0.5;\n\t    var normal = eq.ni;\n\t\n\t    bodyB.position.vsub(bodyA.position, normal);\n\t    normal.normalize();\n\t    normal.mult(halfDist, eq.ri);\n\t    normal.mult(-halfDist, eq.rj);\n\t};\n\n/***/ },\n/* 398 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = GSSolver;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Solver = __webpack_require__(387);\n\t\n\t/**\n\t * Constraint equation Gauss-Seidel solver.\n\t * @class GSSolver\n\t * @constructor\n\t * @todo The spook parameters should be specified for each constraint, not globally.\n\t * @author schteppe / https://github.com/schteppe\n\t * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n\t * @extends Solver\n\t */\n\tfunction GSSolver(){\n\t    Solver.call(this);\n\t\n\t    /**\n\t     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n\t     * @property iterations\n\t     * @type {Number}\n\t     * @todo write more about solver and iterations in the wiki\n\t     */\n\t    this.iterations = 10;\n\t\n\t    /**\n\t     * When tolerance is reached, the system is assumed to be converged.\n\t     * @property tolerance\n\t     * @type {Number}\n\t     */\n\t    this.tolerance = 1e-7;\n\t}\n\tGSSolver.prototype = new Solver();\n\t\n\tvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\n\tvar GSSolver_solve_invCs = [];\n\tvar GSSolver_solve_Bs = [];\n\tGSSolver.prototype.solve = function(dt,world){\n\t    var iter = 0,\n\t        maxIter = this.iterations,\n\t        tolSquared = this.tolerance*this.tolerance,\n\t        equations = this.equations,\n\t        Neq = equations.length,\n\t        bodies = world.bodies,\n\t        Nbodies = bodies.length,\n\t        h = dt,\n\t        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\t\n\t    // Update solve mass\n\t    if(Neq !== 0){\n\t        for(var i=0; i!==Nbodies; i++){\n\t            bodies[i].updateSolveMassProperties();\n\t        }\n\t    }\n\t\n\t    // Things that does not change during iteration can be computed once\n\t    var invCs = GSSolver_solve_invCs,\n\t        Bs = GSSolver_solve_Bs,\n\t        lambda = GSSolver_solve_lambda;\n\t    invCs.length = Neq;\n\t    Bs.length = Neq;\n\t    lambda.length = Neq;\n\t    for(var i=0; i!==Neq; i++){\n\t        var c = equations[i];\n\t        lambda[i] = 0.0;\n\t        Bs[i] = c.computeB(h);\n\t        invCs[i] = 1.0 / c.computeC();\n\t    }\n\t\n\t    if(Neq !== 0){\n\t\n\t        // Reset vlambda\n\t        for(var i=0; i!==Nbodies; i++){\n\t            var b=bodies[i],\n\t                vlambda=b.vlambda,\n\t                wlambda=b.wlambda;\n\t            vlambda.set(0,0,0);\n\t            if(wlambda){\n\t                wlambda.set(0,0,0);\n\t            }\n\t        }\n\t\n\t        // Iterate over equations\n\t        for(iter=0; iter!==maxIter; iter++){\n\t\n\t            // Accumulate the total error for each iteration.\n\t            deltalambdaTot = 0.0;\n\t\n\t            for(var j=0; j!==Neq; j++){\n\t\n\t                var c = equations[j];\n\t\n\t                // Compute iteration\n\t                B = Bs[j];\n\t                invC = invCs[j];\n\t                lambdaj = lambda[j];\n\t                GWlambda = c.computeGWlambda();\n\t                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\t\n\t                // Clamp if we are not within the min/max interval\n\t                if(lambdaj + deltalambda < c.minForce){\n\t                    deltalambda = c.minForce - lambdaj;\n\t                } else if(lambdaj + deltalambda > c.maxForce){\n\t                    deltalambda = c.maxForce - lambdaj;\n\t                }\n\t                lambda[j] += deltalambda;\n\t\n\t                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\t\n\t                c.addToWlambda(deltalambda);\n\t            }\n\t\n\t            // If the total error is small enough - stop iterate\n\t            if(deltalambdaTot*deltalambdaTot < tolSquared){\n\t                break;\n\t            }\n\t        }\n\t\n\t        // Add result to velocity\n\t        for(var i=0; i!==Nbodies; i++){\n\t            var b=bodies[i],\n\t                v=b.velocity,\n\t                w=b.angularVelocity;\n\t            v.vadd(b.vlambda, v);\n\t            if(w){\n\t                w.vadd(b.wlambda, w);\n\t            }\n\t        }\n\t    }\n\t\n\t    return iter;\n\t};\n\n\n/***/ },\n/* 399 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = GridBroadphase;\n\t\n\tvar Broadphase = __webpack_require__(378);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Shape = __webpack_require__(372);\n\t\n\t/**\n\t * Axis aligned uniform grid broadphase.\n\t * @class GridBroadphase\n\t * @constructor\n\t * @extends Broadphase\n\t * @todo Needs support for more than just planes and spheres.\n\t * @param {Vec3} aabbMin\n\t * @param {Vec3} aabbMax\n\t * @param {Number} nx Number of boxes along x\n\t * @param {Number} ny Number of boxes along y\n\t * @param {Number} nz Number of boxes along z\n\t */\n\tfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n\t    Broadphase.apply(this);\n\t    this.nx = nx || 10;\n\t    this.ny = ny || 10;\n\t    this.nz = nz || 10;\n\t    this.aabbMin = aabbMin || new Vec3(100,100,100);\n\t    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\t\tvar nbins = this.nx * this.ny * this.nz;\n\t\tif (nbins <= 0) {\n\t\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t\t}\n\t    this.bins = [];\n\t\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\t\tthis.bins.length = nbins;\n\t\tthis.binLengths.length = nbins;\n\t\tfor (var i=0;i<nbins;i++) {\n\t\t\tthis.bins[i]=[];\n\t\t\tthis.binLengths[i]=0;\n\t\t}\n\t}\n\tGridBroadphase.prototype = new Broadphase();\n\tGridBroadphase.prototype.constructor = GridBroadphase;\n\t\n\t/**\n\t * Get all the collision pairs in the physics world\n\t * @method collisionPairs\n\t * @param {World} world\n\t * @param {Array} pairs1\n\t * @param {Array} pairs2\n\t */\n\tvar GridBroadphase_collisionPairs_d = new Vec3();\n\tvar GridBroadphase_collisionPairs_binPos = new Vec3();\n\tGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n\t    var N = world.numObjects(),\n\t        bodies = world.bodies;\n\t\n\t    var max = this.aabbMax,\n\t        min = this.aabbMin,\n\t        nx = this.nx,\n\t        ny = this.ny,\n\t        nz = this.nz;\n\t\n\t\tvar xstep = ny*nz;\n\t\tvar ystep = nz;\n\t\tvar zstep = 1;\n\t\n\t    var xmax = max.x,\n\t        ymax = max.y,\n\t        zmax = max.z,\n\t        xmin = min.x,\n\t        ymin = min.y,\n\t        zmin = min.z;\n\t\n\t    var xmult = nx / (xmax-xmin),\n\t        ymult = ny / (ymax-ymin),\n\t        zmult = nz / (zmax-zmin);\n\t\n\t    var binsizeX = (xmax - xmin) / nx,\n\t        binsizeY = (ymax - ymin) / ny,\n\t        binsizeZ = (zmax - zmin) / nz;\n\t\n\t\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\t\n\t    var types = Shape.types;\n\t    var SPHERE =            types.SPHERE,\n\t        PLANE =             types.PLANE,\n\t        BOX =               types.BOX,\n\t        COMPOUND =          types.COMPOUND,\n\t        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\t\n\t    var bins=this.bins,\n\t\t\tbinLengths=this.binLengths,\n\t        Nbins=this.bins.length;\n\t\n\t    // Reset bins\n\t    for(var i=0; i!==Nbins; i++){\n\t        binLengths[i] = 0;\n\t    }\n\t\n\t    var ceil = Math.ceil;\n\t\tvar min = Math.min;\n\t\tvar max = Math.max;\n\t\n\t\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\t\n\t\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\t\n\t\t\txoff0 *= xstep;\n\t\t\tyoff0 *= ystep;\n\t\t\tzoff0 *= zstep;\n\t\t\txoff1 *= xstep;\n\t\t\tyoff1 *= ystep;\n\t\t\tzoff1 *= zstep;\n\t\n\t\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t    // Put all bodies into the bins\n\t    for(var i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        var si = bi.shape;\n\t\n\t        switch(si.type){\n\t        case SPHERE:\n\t            // Put in bin\n\t            // check if overlap with other bins\n\t            var x = bi.position.x,\n\t                y = bi.position.y,\n\t                z = bi.position.z;\n\t            var r = si.radius;\n\t\n\t\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n\t            break;\n\t\n\t        case PLANE:\n\t            if(si.worldNormalNeedsUpdate){\n\t                si.computeWorldNormal(bi.quaternion);\n\t            }\n\t            var planeNormal = si.worldNormal;\n\t\n\t\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t\t//Incremented as we iterate through the bins\n\t\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\t\n\t            var d = GridBroadphase_collisionPairs_d;\n\t\t\t\td.set(xreset, yreset, zreset);\n\t\n\t\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t            break;\n\t\n\t        default:\n\t\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\t\tbi.computeAABB();\n\t\t\t\t}\n\t\n\t\t\t\taddBoxToBins(\n\t\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\t\tbi);\n\t            break;\n\t        }\n\t    }\n\t\n\t    // Check each bin\n\t    for(var i=0; i!==Nbins; i++){\n\t\t\tvar binLength = binLengths[i];\n\t\t\t//Skip bins with no potential collisions\n\t\t\tif (binLength > 1) {\n\t\t\t\tvar bin = bins[i];\n\t\n\t\t\t\t// Do N^2 broadphase inside\n\t\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\t\tvar bi = bin[xi];\n\t\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t    }\n\t\n\t//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n\t//\t\tconsole.log(\"layer \"+zi);\n\t//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n\t//\t\t\tvar row = '';\n\t//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n\t//\t\t\t\tvar idx = xoff + yoff + zoff;\n\t//\t\t\t\trow += ' ' + binLengths[idx];\n\t//\t\t\t}\n\t//\t\t\tconsole.log(row);\n\t//\t\t}\n\t//\t}\n\t\n\t    this.makePairsUnique(pairs1,pairs2);\n\t};\n\n\n/***/ },\n/* 400 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(372);\n\tvar ConvexPolyhedron = __webpack_require__(376);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Utils = __webpack_require__(368);\n\t\n\tmodule.exports = Heightfield;\n\t\n\t/**\n\t * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n\t * @class Heightfield\n\t * @extends Shape\n\t * @constructor\n\t * @param {Array} data An array of Y values that will be used to construct the terrain.\n\t * @param {object} options\n\t * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n\t * @param {Number} [options.maxValue] Maximum value.\n\t * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n\t * @todo Should be possible to use along all axes, not just y\n\t *\n\t * @example\n\t *     // Generate some height data (y-values).\n\t *     var data = [];\n\t *     for(var i = 0; i < 1000; i++){\n\t *         var y = 0.5 * Math.cos(0.2 * i);\n\t *         data.push(y);\n\t *     }\n\t *\n\t *     // Create the heightfield shape\n\t *     var heightfieldShape = new Heightfield(data, {\n\t *         elementSize: 1 // Distance between the data points in X and Y directions\n\t *     });\n\t *     var heightfieldBody = new Body();\n\t *     heightfieldBody.addShape(heightfieldShape);\n\t *     world.addBody(heightfieldBody);\n\t */\n\tfunction Heightfield(data, options){\n\t    options = Utils.defaults(options, {\n\t        maxValue : null,\n\t        minValue : null,\n\t        elementSize : 1\n\t    });\n\t\n\t    /**\n\t     * An array of numbers, or height values, that are spread out along the x axis.\n\t     * @property {array} data\n\t     */\n\t    this.data = data;\n\t\n\t    /**\n\t     * Max value of the data\n\t     * @property {number} maxValue\n\t     */\n\t    this.maxValue = options.maxValue;\n\t\n\t    /**\n\t     * Max value of the data\n\t     * @property {number} minValue\n\t     */\n\t    this.minValue = options.minValue;\n\t\n\t    /**\n\t     * The width of each element\n\t     * @property {number} elementSize\n\t     * @todo elementSizeX and Y\n\t     */\n\t    this.elementSize = options.elementSize;\n\t\n\t    if(options.minValue === null){\n\t        this.updateMinValue();\n\t    }\n\t    if(options.maxValue === null){\n\t        this.updateMaxValue();\n\t    }\n\t\n\t    this.cacheEnabled = true;\n\t\n\t    Shape.call(this);\n\t\n\t    this.pillarConvex = new ConvexPolyhedron();\n\t    this.pillarOffset = new Vec3();\n\t\n\t    this.type = Shape.types.HEIGHTFIELD;\n\t    this.updateBoundingSphereRadius();\n\t\n\t    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n\t    // for example:\n\t    // _cachedPillars[\"0_2_1\"]\n\t    this._cachedPillars = {};\n\t}\n\tHeightfield.prototype = new Shape();\n\t\n\t/**\n\t * Call whenever you change the data array.\n\t * @method update\n\t */\n\tHeightfield.prototype.update = function(){\n\t    this._cachedPillars = {};\n\t};\n\t\n\t/**\n\t * Update the .minValue property\n\t * @method updateMinValue\n\t */\n\tHeightfield.prototype.updateMinValue = function(){\n\t    var data = this.data;\n\t    var minValue = data[0][0];\n\t    for(var i=0; i !== data.length; i++){\n\t        for(var j=0; j !== data[i].length; j++){\n\t            var v = data[i][j];\n\t            if(v < minValue){\n\t                minValue = v;\n\t            }\n\t        }\n\t    }\n\t    this.minValue = minValue;\n\t};\n\t\n\t/**\n\t * Update the .maxValue property\n\t * @method updateMaxValue\n\t */\n\tHeightfield.prototype.updateMaxValue = function(){\n\t    var data = this.data;\n\t    var maxValue = data[0][0];\n\t    for(var i=0; i !== data.length; i++){\n\t        for(var j=0; j !== data[i].length; j++){\n\t            var v = data[i][j];\n\t            if(v > maxValue){\n\t                maxValue = v;\n\t            }\n\t        }\n\t    }\n\t    this.maxValue = maxValue;\n\t};\n\t\n\t/**\n\t * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n\t * @method setHeightValueAtIndex\n\t * @param {integer} xi\n\t * @param {integer} yi\n\t * @param {number} value\n\t */\n\tHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n\t    var data = this.data;\n\t    data[xi][yi] = value;\n\t\n\t    // Invalidate cache\n\t    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\t    if(xi > 0){\n\t        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n\t        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n\t    }\n\t    if(yi > 0){\n\t        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n\t        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n\t    }\n\t    if(yi > 0 && xi > 0){\n\t        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n\t    }\n\t};\n\t\n\t/**\n\t * Get max/min in a rectangle in the matrix data\n\t * @method getRectMinMax\n\t * @param  {integer} iMinX\n\t * @param  {integer} iMinY\n\t * @param  {integer} iMaxX\n\t * @param  {integer} iMaxY\n\t * @param  {array} [result] An array to store the results in.\n\t * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n\t */\n\tHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n\t    result = result || [];\n\t\n\t    // Get max and min of the data\n\t    var data = this.data,\n\t        max = this.minValue; // Set first value\n\t    for(var i = iMinX; i <= iMaxX; i++){\n\t        for(var j = iMinY; j <= iMaxY; j++){\n\t            var height = data[i][j];\n\t            if(height > max){\n\t                max = height;\n\t            }\n\t        }\n\t    }\n\t\n\t    result[0] = this.minValue;\n\t    result[1] = max;\n\t};\n\t\n\t/**\n\t * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n\t * @method getIndexOfPosition\n\t * @param  {number} x\n\t * @param  {number} y\n\t * @param  {array} result Two-element array\n\t * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n\t * @return {boolean}\n\t */\n\tHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\t\n\t    // Get the index of the data points to test against\n\t    var w = this.elementSize;\n\t    var data = this.data;\n\t    var xi = Math.floor(x / w);\n\t    var yi = Math.floor(y / w);\n\t\n\t    result[0] = xi;\n\t    result[1] = yi;\n\t\n\t    if(clamp){\n\t        // Clamp index to edges\n\t        if(xi < 0){ xi = 0; }\n\t        if(yi < 0){ yi = 0; }\n\t        if(xi >= data.length - 1){ xi = data.length - 1; }\n\t        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n\t    }\n\t\n\t    // Bail out if we are out of the terrain\n\t    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n\t        return false;\n\t    }\n\t\n\t    return true;\n\t};\n\t\n\tHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n\t    var idx = [];\n\t    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\t\n\t    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n\t    var minmax = [];\n\t    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\t\n\t    return (minmax[0] + minmax[1]) / 2; // average\n\t};\n\t\n\tHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n\t    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n\t};\n\t\n\tHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n\t    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n\t};\n\t\n\tHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n\t    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n\t        convex: convex,\n\t        offset: offset\n\t    };\n\t};\n\t\n\tHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n\t    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n\t};\n\t\n\t/**\n\t * Get a triangle in the terrain in the form of a triangular convex shape.\n\t * @method getConvexTrianglePillar\n\t * @param  {integer} i\n\t * @param  {integer} j\n\t * @param  {boolean} getUpperTriangle\n\t */\n\tHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n\t    var result = this.pillarConvex;\n\t    var offsetResult = this.pillarOffset;\n\t\n\t    if(this.cacheEnabled){\n\t        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\t        if(data){\n\t            this.pillarConvex = data.convex;\n\t            this.pillarOffset = data.offset;\n\t            return;\n\t        }\n\t\n\t        result = new ConvexPolyhedron();\n\t        offsetResult = new Vec3();\n\t\n\t        this.pillarConvex = result;\n\t        this.pillarOffset = offsetResult;\n\t    }\n\t\n\t    var data = this.data;\n\t    var elementSize = this.elementSize;\n\t    var faces = result.faces;\n\t\n\t    // Reuse verts if possible\n\t    result.vertices.length = 6;\n\t    for (var i = 0; i < 6; i++) {\n\t        if(!result.vertices[i]){\n\t            result.vertices[i] = new Vec3();\n\t        }\n\t    }\n\t\n\t    // Reuse faces if possible\n\t    faces.length = 5;\n\t    for (var i = 0; i < 5; i++) {\n\t        if(!faces[i]){\n\t            faces[i] = [];\n\t        }\n\t    }\n\t\n\t    var verts = result.vertices;\n\t\n\t    var h = (Math.min(\n\t        data[xi][yi],\n\t        data[xi+1][yi],\n\t        data[xi][yi+1],\n\t        data[xi+1][yi+1]\n\t    ) - this.minValue ) / 2 + this.minValue;\n\t\n\t    if (!getUpperTriangle) {\n\t\n\t        // Center of the triangle pillar - all polygons are given relative to this one\n\t        offsetResult.set(\n\t            (xi + 0.25) * elementSize, // sort of center of a triangle\n\t            (yi + 0.25) * elementSize,\n\t            h // vertical center\n\t        );\n\t\n\t        // Top triangle verts\n\t        verts[0].set(\n\t            -0.25 * elementSize,\n\t            -0.25 * elementSize,\n\t            data[xi][yi] - h\n\t        );\n\t        verts[1].set(\n\t            0.75 * elementSize,\n\t            -0.25 * elementSize,\n\t            data[xi + 1][yi] - h\n\t        );\n\t        verts[2].set(\n\t            -0.25 * elementSize,\n\t            0.75 * elementSize,\n\t            data[xi][yi + 1] - h\n\t        );\n\t\n\t        // bottom triangle verts\n\t        verts[3].set(\n\t            -0.25 * elementSize,\n\t            -0.25 * elementSize,\n\t            -h-1\n\t        );\n\t        verts[4].set(\n\t            0.75 * elementSize,\n\t            -0.25 * elementSize,\n\t            -h-1\n\t        );\n\t        verts[5].set(\n\t            -0.25 * elementSize,\n\t            0.75  * elementSize,\n\t            -h-1\n\t        );\n\t\n\t        // top triangle\n\t        faces[0][0] = 0;\n\t        faces[0][1] = 1;\n\t        faces[0][2] = 2;\n\t\n\t        // bottom triangle\n\t        faces[1][0] = 5;\n\t        faces[1][1] = 4;\n\t        faces[1][2] = 3;\n\t\n\t        // -x facing quad\n\t        faces[2][0] = 0;\n\t        faces[2][1] = 2;\n\t        faces[2][2] = 5;\n\t        faces[2][3] = 3;\n\t\n\t        // -y facing quad\n\t        faces[3][0] = 1;\n\t        faces[3][1] = 0;\n\t        faces[3][2] = 3;\n\t        faces[3][3] = 4;\n\t\n\t        // +xy facing quad\n\t        faces[4][0] = 4;\n\t        faces[4][1] = 5;\n\t        faces[4][2] = 2;\n\t        faces[4][3] = 1;\n\t\n\t\n\t    } else {\n\t\n\t        // Center of the triangle pillar - all polygons are given relative to this one\n\t        offsetResult.set(\n\t            (xi + 0.75) * elementSize, // sort of center of a triangle\n\t            (yi + 0.75) * elementSize,\n\t            h // vertical center\n\t        );\n\t\n\t        // Top triangle verts\n\t        verts[0].set(\n\t            0.25 * elementSize,\n\t            0.25 * elementSize,\n\t            data[xi + 1][yi + 1] - h\n\t        );\n\t        verts[1].set(\n\t            -0.75 * elementSize,\n\t            0.25 * elementSize,\n\t            data[xi][yi + 1] - h\n\t        );\n\t        verts[2].set(\n\t            0.25 * elementSize,\n\t            -0.75 * elementSize,\n\t            data[xi + 1][yi] - h\n\t        );\n\t\n\t        // bottom triangle verts\n\t        verts[3].set(\n\t            0.25 * elementSize,\n\t            0.25 * elementSize,\n\t            - h-1\n\t        );\n\t        verts[4].set(\n\t            -0.75 * elementSize,\n\t            0.25 * elementSize,\n\t            - h-1\n\t        );\n\t        verts[5].set(\n\t            0.25 * elementSize,\n\t            -0.75 * elementSize,\n\t            - h-1\n\t        );\n\t\n\t        // Top triangle\n\t        faces[0][0] = 0;\n\t        faces[0][1] = 1;\n\t        faces[0][2] = 2;\n\t\n\t        // bottom triangle\n\t        faces[1][0] = 5;\n\t        faces[1][1] = 4;\n\t        faces[1][2] = 3;\n\t\n\t        // +x facing quad\n\t        faces[2][0] = 2;\n\t        faces[2][1] = 5;\n\t        faces[2][2] = 3;\n\t        faces[2][3] = 0;\n\t\n\t        // +y facing quad\n\t        faces[3][0] = 3;\n\t        faces[3][1] = 4;\n\t        faces[3][2] = 1;\n\t        faces[3][3] = 0;\n\t\n\t        // -xy facing quad\n\t        faces[4][0] = 1;\n\t        faces[4][1] = 4;\n\t        faces[4][2] = 5;\n\t        faces[4][3] = 2;\n\t    }\n\t\n\t    result.computeNormals();\n\t    result.computeEdges();\n\t    result.updateBoundingSphereRadius();\n\t\n\t    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n\t};\n\t\n\tHeightfield.prototype.calculateLocalInertia = function(mass, target){\n\t    target = target || new Vec3();\n\t    target.set(0, 0, 0);\n\t    return target;\n\t};\n\t\n\tHeightfield.prototype.volume = function(){\n\t    return Number.MAX_VALUE; // The terrain is infinite\n\t};\n\t\n\tHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n\t    // TODO: do it properly\n\t    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\t    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n\t};\n\t\n\tHeightfield.prototype.updateBoundingSphereRadius = function(){\n\t    // Use the bounding box of the min/max values\n\t    var data = this.data,\n\t        s = this.elementSize;\n\t    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n\t};\n\n\n/***/ },\n/* 401 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = HingeConstraint;\n\t\n\tvar Constraint = __webpack_require__(380);\n\tvar PointToPointConstraint = __webpack_require__(392);\n\tvar RotationalEquation = __webpack_require__(394);\n\tvar RotationalMotorEquation = __webpack_require__(402);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n\t * @class HingeConstraint\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {object} [options]\n\t * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n\t * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n\t * @param {Vec3} [options.pivotB]\n\t * @param {Vec3} [options.axisB]\n\t * @param {Number} [options.maxForce=1e6]\n\t * @extends PointToPointConstraint\n\t */\n\tfunction HingeConstraint(bodyA, bodyB, options){\n\t    options = options || {};\n\t    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\t    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n\t    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\t\n\t    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\t\n\t    /**\n\t     * Rotation axis, defined locally in bodyA.\n\t     * @property {Vec3} axisA\n\t     */\n\t    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n\t    axisA.normalize();\n\t\n\t    /**\n\t     * Rotation axis, defined locally in bodyB.\n\t     * @property {Vec3} axisB\n\t     */\n\t    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n\t    axisB.normalize();\n\t\n\t    /**\n\t     * @property {RotationalEquation} rotationalEquation1\n\t     */\n\t    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\t\n\t    /**\n\t     * @property {RotationalEquation} rotationalEquation2\n\t     */\n\t    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\t\n\t    /**\n\t     * @property {RotationalMotorEquation} motorEquation\n\t     */\n\t    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n\t    motor.enabled = false; // Not enabled by default\n\t\n\t    // Equations to be fed to the solver\n\t    this.equations.push(\n\t        r1, // rotational1\n\t        r2, // rotational2\n\t        motor\n\t    );\n\t}\n\tHingeConstraint.prototype = new PointToPointConstraint();\n\tHingeConstraint.constructor = HingeConstraint;\n\t\n\t/**\n\t * @method enableMotor\n\t */\n\tHingeConstraint.prototype.enableMotor = function(){\n\t    this.motorEquation.enabled = true;\n\t};\n\t\n\t/**\n\t * @method disableMotor\n\t */\n\tHingeConstraint.prototype.disableMotor = function(){\n\t    this.motorEquation.enabled = false;\n\t};\n\t\n\t/**\n\t * @method setMotorSpeed\n\t * @param {number} speed\n\t */\n\tHingeConstraint.prototype.setMotorSpeed = function(speed){\n\t    this.motorEquation.targetVelocity = speed;\n\t};\n\t\n\t/**\n\t * @method setMotorMaxForce\n\t * @param {number} maxForce\n\t */\n\tHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n\t    this.motorEquation.maxForce = maxForce;\n\t    this.motorEquation.minForce = -maxForce;\n\t};\n\t\n\tvar HingeConstraint_update_tmpVec1 = new Vec3();\n\tvar HingeConstraint_update_tmpVec2 = new Vec3();\n\t\n\tHingeConstraint.prototype.update = function(){\n\t    var bodyA = this.bodyA,\n\t        bodyB = this.bodyB,\n\t        motor = this.motorEquation,\n\t        r1 = this.rotationalEquation1,\n\t        r2 = this.rotationalEquation2,\n\t        worldAxisA = HingeConstraint_update_tmpVec1,\n\t        worldAxisB = HingeConstraint_update_tmpVec2;\n\t\n\t    var axisA = this.axisA;\n\t    var axisB = this.axisB;\n\t\n\t    PointToPointConstraint.prototype.update.call(this);\n\t\n\t    // Get world axes\n\t    bodyA.quaternion.vmult(axisA, worldAxisA);\n\t    bodyB.quaternion.vmult(axisB, worldAxisB);\n\t\n\t    worldAxisA.tangents(r1.axisA, r2.axisA);\n\t    r1.axisB.copy(worldAxisB);\n\t    r2.axisB.copy(worldAxisB);\n\t\n\t    if(this.motorEquation.enabled){\n\t        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n\t        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n\t    }\n\t};\n\t\n\n\n/***/ },\n/* 402 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = RotationalMotorEquation;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Mat3 = __webpack_require__(367);\n\tvar Equation = __webpack_require__(382);\n\t\n\t/**\n\t * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n\t * @class RotationalMotorEquation\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Number} maxForce\n\t * @extends Equation\n\t */\n\tfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n\t    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n\t    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\t\n\t    /**\n\t     * World oriented rotational axis\n\t     * @property {Vec3} axisA\n\t     */\n\t    this.axisA = new Vec3();\n\t\n\t    /**\n\t     * World oriented rotational axis\n\t     * @property {Vec3} axisB\n\t     */\n\t    this.axisB = new Vec3(); // World oriented rotational axis\n\t\n\t    /**\n\t     * Motor velocity\n\t     * @property {Number} targetVelocity\n\t     */\n\t    this.targetVelocity = 0;\n\t}\n\t\n\tRotationalMotorEquation.prototype = new Equation();\n\tRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\t\n\tRotationalMotorEquation.prototype.computeB = function(h){\n\t    var a = this.a,\n\t        b = this.b,\n\t        bi = this.bi,\n\t        bj = this.bj,\n\t\n\t        axisA = this.axisA,\n\t        axisB = this.axisB,\n\t\n\t        GA = this.jacobianElementA,\n\t        GB = this.jacobianElementB;\n\t\n\t    // g = 0\n\t    // gdot = axisA * wi - axisB * wj\n\t    // gdot = G * W = G * [vi wi vj wj]\n\t    // =>\n\t    // G = [0 axisA 0 -axisB]\n\t\n\t    GA.rotational.copy(axisA);\n\t    axisB.negate(GB.rotational);\n\t\n\t    var GW = this.computeGW() - this.targetVelocity,\n\t        GiMf = this.computeGiMf();\n\t\n\t    var B = - GW * b - h * GiMf;\n\t\n\t    return B;\n\t};\n\n\n/***/ },\n/* 403 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = LockConstraint;\n\t\n\tvar Constraint = __webpack_require__(380);\n\tvar PointToPointConstraint = __webpack_require__(392);\n\tvar RotationalEquation = __webpack_require__(394);\n\tvar RotationalMotorEquation = __webpack_require__(402);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Lock constraint. Will remove all degrees of freedom between the bodies.\n\t * @class LockConstraint\n\t * @constructor\n\t * @author schteppe\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {object} [options]\n\t * @param {Number} [options.maxForce=1e6]\n\t * @extends PointToPointConstraint\n\t */\n\tfunction LockConstraint(bodyA, bodyB, options){\n\t    options = options || {};\n\t    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\t\n\t    // Set pivot point in between\n\t    var pivotA = new Vec3();\n\t    var pivotB = new Vec3();\n\t    var halfWay = new Vec3();\n\t    bodyA.position.vadd(bodyB.position, halfWay);\n\t    halfWay.scale(0.5, halfWay);\n\t    bodyB.pointToLocalFrame(halfWay, pivotB);\n\t    bodyA.pointToLocalFrame(halfWay, pivotA);\n\t    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\t\n\t    /**\n\t     * @property {RotationalEquation} rotationalEquation1\n\t     */\n\t    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\t\n\t    /**\n\t     * @property {RotationalEquation} rotationalEquation2\n\t     */\n\t    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\t\n\t    /**\n\t     * @property {RotationalEquation} rotationalEquation3\n\t     */\n\t    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\t\n\t    this.equations.push(r1, r2, r3);\n\t}\n\tLockConstraint.prototype = new PointToPointConstraint();\n\tLockConstraint.constructor = LockConstraint;\n\t\n\tvar LockConstraint_update_tmpVec1 = new Vec3();\n\tvar LockConstraint_update_tmpVec2 = new Vec3();\n\t\n\tLockConstraint.prototype.update = function(){\n\t    var bodyA = this.bodyA,\n\t        bodyB = this.bodyB,\n\t        motor = this.motorEquation,\n\t        r1 = this.rotationalEquation1,\n\t        r2 = this.rotationalEquation2,\n\t        r3 = this.rotationalEquation3,\n\t        worldAxisA = LockConstraint_update_tmpVec1,\n\t        worldAxisB = LockConstraint_update_tmpVec2;\n\t\n\t    PointToPointConstraint.prototype.update.call(this);\n\t\n\t    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n\t    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\t\n\t    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n\t    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\t\n\t    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n\t    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n\t};\n\t\n\n\n/***/ },\n/* 404 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = NaiveBroadphase;\n\t\n\tvar Broadphase = __webpack_require__(378);\n\tvar AABB = __webpack_require__(365);\n\t\n\t/**\n\t * Naive broadphase implementation, used in lack of better ones.\n\t * @class NaiveBroadphase\n\t * @constructor\n\t * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n\t * @extends Broadphase\n\t */\n\tfunction NaiveBroadphase(){\n\t    Broadphase.apply(this);\n\t}\n\tNaiveBroadphase.prototype = new Broadphase();\n\tNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\t\n\t/**\n\t * Get all the collision pairs in the physics world\n\t * @method collisionPairs\n\t * @param {World} world\n\t * @param {Array} pairs1\n\t * @param {Array} pairs2\n\t */\n\tNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n\t    var bodies = world.bodies,\n\t        n = bodies.length,\n\t        i,j,bi,bj;\n\t\n\t    // Naive N^2 ftw!\n\t    for(i=0; i!==n; i++){\n\t        for(j=0; j!==i; j++){\n\t\n\t            bi = bodies[i];\n\t            bj = bodies[j];\n\t\n\t            if(!this.needBroadphaseCollision(bi,bj)){\n\t                continue;\n\t            }\n\t\n\t            this.intersectionTest(bi,bj,pairs1,pairs2);\n\t        }\n\t    }\n\t};\n\t\n\tvar tmpAABB = new AABB();\n\t\n\t/**\n\t * Returns all the bodies within an AABB.\n\t * @method aabbQuery\n\t * @param  {World} world\n\t * @param  {AABB} aabb\n\t * @param {array} result An array to store resulting bodies in.\n\t * @return {array}\n\t */\n\tNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n\t    result = result || [];\n\t\n\t    for(var i = 0; i < world.bodies.length; i++){\n\t        var b = world.bodies[i];\n\t\n\t        if(b.aabbNeedsUpdate){\n\t            b.computeAABB();\n\t        }\n\t\n\t        // Ugly hack until Body gets aabb\n\t        if(b.aabb.overlaps(aabb)){\n\t            result.push(b);\n\t        }\n\t    }\n\t\n\t    return result;\n\t};\n\n/***/ },\n/* 405 */\n/***/ function(module, exports) {\n\n\tmodule.exports = ObjectCollisionMatrix;\n\t\n\t/**\n\t * Records what objects are colliding with each other\n\t * @class ObjectCollisionMatrix\n\t * @constructor\n\t */\n\tfunction ObjectCollisionMatrix() {\n\t\n\t    /**\n\t     * The matrix storage\n\t     * @property matrix\n\t     * @type {Object}\n\t     */\n\t\tthis.matrix = {};\n\t}\n\t\n\t/**\n\t * @method get\n\t * @param  {Number} i\n\t * @param  {Number} j\n\t * @return {Number}\n\t */\n\tObjectCollisionMatrix.prototype.get = function(i, j) {\n\t\ti = i.id;\n\t\tj = j.id;\n\t    if (j > i) {\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t    }\n\t\treturn i+'-'+j in this.matrix;\n\t};\n\t\n\t/**\n\t * @method set\n\t * @param  {Number} i\n\t * @param  {Number} j\n\t * @param {Number} value\n\t */\n\tObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\t\ti = i.id;\n\t\tj = j.id;\n\t    if (j > i) {\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t\t}\n\t\tif (value) {\n\t\t\tthis.matrix[i+'-'+j] = true;\n\t\t}\n\t\telse {\n\t\t\tdelete this.matrix[i+'-'+j];\n\t\t}\n\t};\n\t\n\t/**\n\t * Empty the matrix\n\t * @method reset\n\t */\n\tObjectCollisionMatrix.prototype.reset = function() {\n\t\tthis.matrix = {};\n\t};\n\t\n\t/**\n\t * Set max number of objects\n\t * @method setNumObjects\n\t * @param {Number} n\n\t */\n\tObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n\t};\n\n\n/***/ },\n/* 406 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Particle;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Particle shape.\n\t * @class Particle\n\t * @constructor\n\t * @author schteppe\n\t * @extends Shape\n\t */\n\tfunction Particle(){\n\t    Shape.call(this);\n\t\n\t    this.type = Shape.types.PARTICLE;\n\t}\n\tParticle.prototype = new Shape();\n\tParticle.prototype.constructor = Particle;\n\t\n\t/**\n\t * @method calculateLocalInertia\n\t * @param  {Number} mass\n\t * @param  {Vec3} target\n\t * @return {Vec3}\n\t */\n\tParticle.prototype.calculateLocalInertia = function(mass,target){\n\t    target = target || new Vec3();\n\t    target.set(0, 0, 0);\n\t    return target;\n\t};\n\t\n\tParticle.prototype.volume = function(){\n\t    return 0;\n\t};\n\t\n\tParticle.prototype.updateBoundingSphereRadius = function(){\n\t    this.boundingSphereRadius = 0;\n\t};\n\t\n\tParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\t    // Get each axis max\n\t    min.copy(pos);\n\t    max.copy(pos);\n\t};\n\n\n/***/ },\n/* 407 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Body = __webpack_require__(370);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar RaycastResult = __webpack_require__(386);\n\tvar Ray = __webpack_require__(385);\n\tvar WheelInfo = __webpack_require__(408);\n\t\n\tmodule.exports = RaycastVehicle;\n\t\n\t/**\n\t * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n\t * @class RaycastVehicle\n\t * @constructor\n\t * @param {object} [options]\n\t * @param {Body} [options.chassisBody] The car chassis body.\n\t * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n\t * @param {integer} [options.indexLeftAxis]\n\t * @param {integer} [options.indexUpAxis]\n\t */\n\tfunction RaycastVehicle(options){\n\t\n\t    /**\n\t     * @property {Body} chassisBody\n\t     */\n\t    this.chassisBody = options.chassisBody;\n\t\n\t    /**\n\t     * An array of WheelInfo objects.\n\t     * @property {array} wheelInfos\n\t     */\n\t    this.wheelInfos = [];\n\t\n\t    /**\n\t     * Will be set to true if the car is sliding.\n\t     * @property {boolean} sliding\n\t     */\n\t    this.sliding = false;\n\t\n\t    /**\n\t     * @property {World} world\n\t     */\n\t    this.world = null;\n\t\n\t    /**\n\t     * Index of the right axis, 0=x, 1=y, 2=z\n\t     * @property {integer} indexRightAxis\n\t     * @default 1\n\t     */\n\t    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\t\n\t    /**\n\t     * Index of the forward axis, 0=x, 1=y, 2=z\n\t     * @property {integer} indexForwardAxis\n\t     * @default 0\n\t     */\n\t    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\t\n\t    /**\n\t     * Index of the up axis, 0=x, 1=y, 2=z\n\t     * @property {integer} indexUpAxis\n\t     * @default 2\n\t     */\n\t    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n\t}\n\t\n\tvar tmpVec1 = new Vec3();\n\tvar tmpVec2 = new Vec3();\n\tvar tmpVec3 = new Vec3();\n\tvar tmpVec4 = new Vec3();\n\tvar tmpVec5 = new Vec3();\n\tvar tmpVec6 = new Vec3();\n\tvar tmpRay = new Ray();\n\t\n\t/**\n\t * Add a wheel. For information about the options, see WheelInfo.\n\t * @method addWheel\n\t * @param {object} [options]\n\t */\n\tRaycastVehicle.prototype.addWheel = function(options){\n\t    options = options || {};\n\t\n\t    var info = new WheelInfo(options);\n\t    var index = this.wheelInfos.length;\n\t    this.wheelInfos.push(info);\n\t\n\t    return index;\n\t};\n\t\n\t/**\n\t * Set the steering value of a wheel.\n\t * @method setSteeringValue\n\t * @param {number} value\n\t * @param {integer} wheelIndex\n\t */\n\tRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n\t    var wheel = this.wheelInfos[wheelIndex];\n\t    wheel.steering = value;\n\t};\n\t\n\tvar torque = new Vec3();\n\t\n\t/**\n\t * Set the wheel force to apply on one of the wheels each time step\n\t * @method applyEngineForce\n\t * @param  {number} value\n\t * @param  {integer} wheelIndex\n\t */\n\tRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n\t    this.wheelInfos[wheelIndex].engineForce = value;\n\t};\n\t\n\t/**\n\t * Set the braking force of a wheel\n\t * @method setBrake\n\t * @param {number} brake\n\t * @param {integer} wheelIndex\n\t */\n\tRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n\t    this.wheelInfos[wheelIndex].brake = brake;\n\t};\n\t\n\t/**\n\t * Add the vehicle including its constraints to the world.\n\t * @method addToWorld\n\t * @param {World} world\n\t */\n\tRaycastVehicle.prototype.addToWorld = function(world){\n\t    var constraints = this.constraints;\n\t    world.add(this.chassisBody);\n\t    var that = this;\n\t    this.preStepCallback = function(){\n\t        that.updateVehicle(world.dt);\n\t    };\n\t    world.addEventListener('preStep', this.preStepCallback);\n\t    this.world = world;\n\t};\n\t\n\t/**\n\t * Get one of the wheel axles, world-oriented.\n\t * @private\n\t * @method getVehicleAxisWorld\n\t * @param  {integer} axisIndex\n\t * @param  {Vec3} result\n\t */\n\tRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n\t    result.set(\n\t        axisIndex === 0 ? 1 : 0,\n\t        axisIndex === 1 ? 1 : 0,\n\t        axisIndex === 2 ? 1 : 0\n\t    );\n\t    this.chassisBody.vectorToWorldFrame(result, result);\n\t};\n\t\n\tRaycastVehicle.prototype.updateVehicle = function(timeStep){\n\t    var wheelInfos = this.wheelInfos;\n\t    var numWheels = wheelInfos.length;\n\t    var chassisBody = this.chassisBody;\n\t\n\t    for (var i = 0; i < numWheels; i++) {\n\t        this.updateWheelTransform(i);\n\t    }\n\t\n\t    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\t\n\t    var forwardWorld = new Vec3();\n\t    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\t\n\t    if (forwardWorld.dot(chassisBody.velocity) < 0){\n\t        this.currentVehicleSpeedKmHour *= -1;\n\t    }\n\t\n\t    // simulate suspension\n\t    for (var i = 0; i < numWheels; i++) {\n\t        this.castRay(wheelInfos[i]);\n\t    }\n\t\n\t    this.updateSuspension(timeStep);\n\t\n\t    var impulse = new Vec3();\n\t    var relpos = new Vec3();\n\t    for (var i = 0; i < numWheels; i++) {\n\t        //apply suspension force\n\t        var wheel = wheelInfos[i];\n\t        var suspensionForce = wheel.suspensionForce;\n\t        if (suspensionForce > wheel.maxSuspensionForce) {\n\t            suspensionForce = wheel.maxSuspensionForce;\n\t        }\n\t        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\t\n\t        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n\t        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n\t    }\n\t\n\t    this.updateFriction(timeStep);\n\t\n\t    var hitNormalWorldScaledWithProj = new Vec3();\n\t    var fwd  = new Vec3();\n\t    var vel = new Vec3();\n\t    for (i = 0; i < numWheels; i++) {\n\t        var wheel = wheelInfos[i];\n\t        //var relpos = new Vec3();\n\t        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\t        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\t\n\t        // Hack to get the rotation in the correct direction\n\t        var m = 1;\n\t        switch(this.indexUpAxis){\n\t        case 1:\n\t            m = -1;\n\t            break;\n\t        }\n\t\n\t        if (wheel.isInContact) {\n\t\n\t            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n\t            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n\t            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\t\n\t            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\t\n\t            var proj2 = fwd.dot(vel);\n\t            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n\t        }\n\t\n\t        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n\t            // Apply custom rotation when accelerating and sliding\n\t            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n\t        }\n\t\n\t        // Lock wheels\n\t        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n\t            wheel.deltaRotation = 0;\n\t        }\n\t\n\t        wheel.rotation += wheel.deltaRotation; // Use the old value\n\t        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n\t    }\n\t};\n\t\n\tRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n\t    var chassisBody = this.chassisBody;\n\t    var chassisMass = chassisBody.mass;\n\t    var wheelInfos = this.wheelInfos;\n\t    var numWheels = wheelInfos.length;\n\t\n\t    for (var w_it = 0; w_it < numWheels; w_it++){\n\t        var wheel = wheelInfos[w_it];\n\t\n\t        if (wheel.isInContact){\n\t            var force;\n\t\n\t            // Spring\n\t            var susp_length = wheel.suspensionRestLength;\n\t            var current_length = wheel.suspensionLength;\n\t            var length_diff = (susp_length - current_length);\n\t\n\t            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\t\n\t            // Damper\n\t            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n\t            var susp_damping;\n\t            if (projected_rel_vel < 0) {\n\t                susp_damping = wheel.dampingCompression;\n\t            } else {\n\t                susp_damping = wheel.dampingRelaxation;\n\t            }\n\t            force -= susp_damping * projected_rel_vel;\n\t\n\t            wheel.suspensionForce = force * chassisMass;\n\t            if (wheel.suspensionForce < 0) {\n\t                wheel.suspensionForce = 0;\n\t            }\n\t        } else {\n\t            wheel.suspensionForce = 0;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Remove the vehicle including its constraints from the world.\n\t * @method removeFromWorld\n\t * @param {World} world\n\t */\n\tRaycastVehicle.prototype.removeFromWorld = function(world){\n\t    var constraints = this.constraints;\n\t    world.remove(this.chassisBody);\n\t    world.removeEventListener('preStep', this.preStepCallback);\n\t    this.world = null;\n\t};\n\t\n\tvar castRay_rayvector = new Vec3();\n\tvar castRay_target = new Vec3();\n\tRaycastVehicle.prototype.castRay = function(wheel) {\n\t    var rayvector = castRay_rayvector;\n\t    var target = castRay_target;\n\t\n\t    this.updateWheelTransformWorld(wheel);\n\t    var chassisBody = this.chassisBody;\n\t\n\t    var depth = -1;\n\t\n\t    var raylen = wheel.suspensionRestLength + wheel.radius;\n\t\n\t    wheel.directionWorld.scale(raylen, rayvector);\n\t    var source = wheel.chassisConnectionPointWorld;\n\t    source.vadd(rayvector, target);\n\t    var raycastResult = wheel.raycastResult;\n\t\n\t    var param = 0;\n\t\n\t    raycastResult.reset();\n\t    // Turn off ray collision with the chassis temporarily\n\t    var oldState = chassisBody.collisionResponse;\n\t    chassisBody.collisionResponse = false;\n\t\n\t    // Cast ray against world\n\t    this.world.rayTest(source, target, raycastResult);\n\t    chassisBody.collisionResponse = oldState;\n\t\n\t    var object = raycastResult.body;\n\t\n\t    wheel.raycastResult.groundObject = 0;\n\t\n\t    if (object) {\n\t        depth = raycastResult.distance;\n\t        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n\t        wheel.isInContact = true;\n\t\n\t        var hitDistance = raycastResult.distance;\n\t        wheel.suspensionLength = hitDistance - wheel.radius;\n\t\n\t        // clamp on max suspension travel\n\t        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n\t        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\t        if (wheel.suspensionLength < minSuspensionLength) {\n\t            wheel.suspensionLength = minSuspensionLength;\n\t        }\n\t        if (wheel.suspensionLength > maxSuspensionLength) {\n\t            wheel.suspensionLength = maxSuspensionLength;\n\t            wheel.raycastResult.reset();\n\t        }\n\t\n\t        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\t\n\t        var chassis_velocity_at_contactPoint = new Vec3();\n\t        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\t\n\t        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\t\n\t        if (denominator >= -0.1) {\n\t            wheel.suspensionRelativeVelocity = 0;\n\t            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n\t        } else {\n\t            var inv = -1 / denominator;\n\t            wheel.suspensionRelativeVelocity = projVel * inv;\n\t            wheel.clippedInvContactDotSuspension = inv;\n\t        }\n\t\n\t    } else {\n\t\n\t        //put wheel info as in rest position\n\t        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n\t        wheel.suspensionRelativeVelocity = 0.0;\n\t        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n\t        wheel.clippedInvContactDotSuspension = 1.0;\n\t    }\n\t\n\t    return depth;\n\t};\n\t\n\tRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n\t    wheel.isInContact = false;\n\t    var chassisBody = this.chassisBody;\n\t    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n\t    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n\t    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n\t};\n\t\n\t\n\t/**\n\t * Update one of the wheel transform.\n\t * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n\t * @method updateWheelTransform\n\t * @param {integer} wheelIndex The wheel index to update.\n\t */\n\tRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n\t    var up = tmpVec4;\n\t    var right = tmpVec5;\n\t    var fwd = tmpVec6;\n\t\n\t    var wheel = this.wheelInfos[wheelIndex];\n\t    this.updateWheelTransformWorld(wheel);\n\t\n\t    wheel.directionLocal.scale(-1, up);\n\t    right.copy(wheel.axleLocal);\n\t    up.cross(right, fwd);\n\t    fwd.normalize();\n\t    right.normalize();\n\t\n\t    // Rotate around steering over the wheelAxle\n\t    var steering = wheel.steering;\n\t    var steeringOrn = new Quaternion();\n\t    steeringOrn.setFromAxisAngle(up, steering);\n\t\n\t    var rotatingOrn = new Quaternion();\n\t    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\t\n\t    // World rotation of the wheel\n\t    var q = wheel.worldTransform.quaternion;\n\t    this.chassisBody.quaternion.mult(steeringOrn, q);\n\t    q.mult(rotatingOrn, q);\n\t\n\t    q.normalize();\n\t\n\t    // world position of the wheel\n\t    var p = wheel.worldTransform.position;\n\t    p.copy(wheel.directionWorld);\n\t    p.scale(wheel.suspensionLength, p);\n\t    p.vadd(wheel.chassisConnectionPointWorld, p);\n\t};\n\t\n\tvar directions = [\n\t    new Vec3(1, 0, 0),\n\t    new Vec3(0, 1, 0),\n\t    new Vec3(0, 0, 1)\n\t];\n\t\n\t/**\n\t * Get the world transform of one of the wheels\n\t * @method getWheelTransformWorld\n\t * @param  {integer} wheelIndex\n\t * @return {Transform}\n\t */\n\tRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n\t    return this.wheelInfos[wheelIndex].worldTransform;\n\t};\n\t\n\t\n\tvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\n\tvar updateFriction_axle = [];\n\tvar updateFriction_forwardWS = [];\n\tvar sideFrictionStiffness2 = 1;\n\tRaycastVehicle.prototype.updateFriction = function(timeStep) {\n\t    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\t\n\t    //calculate the impulse, so that the wheels don't move sidewards\n\t    var wheelInfos = this.wheelInfos;\n\t    var numWheels = wheelInfos.length;\n\t    var chassisBody = this.chassisBody;\n\t    var forwardWS = updateFriction_forwardWS;\n\t    var axle = updateFriction_axle;\n\t\n\t    var numWheelsOnGround = 0;\n\t\n\t    for (var i = 0; i < numWheels; i++) {\n\t        var wheel = wheelInfos[i];\n\t\n\t        var groundObject = wheel.raycastResult.body;\n\t        if (groundObject){\n\t            numWheelsOnGround++;\n\t        }\n\t\n\t        wheel.sideImpulse = 0;\n\t        wheel.forwardImpulse = 0;\n\t        if(!forwardWS[i]){\n\t            forwardWS[i] = new Vec3();\n\t        }\n\t        if(!axle[i]){\n\t            axle[i] = new Vec3();\n\t        }\n\t    }\n\t\n\t    for (var i = 0; i < numWheels; i++){\n\t        var wheel = wheelInfos[i];\n\t\n\t        var groundObject = wheel.raycastResult.body;\n\t\n\t        if (groundObject) {\n\t            var axlei = axle[i];\n\t            var wheelTrans = this.getWheelTransformWorld(i);\n\t\n\t            // Get world axle\n\t            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\t\n\t            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n\t            var proj = axlei.dot(surfNormalWS);\n\t            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n\t            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n\t            axlei.normalize();\n\t\n\t            surfNormalWS.cross(axlei, forwardWS[i]);\n\t            forwardWS[i].normalize();\n\t\n\t            wheel.sideImpulse = resolveSingleBilateral(\n\t                chassisBody,\n\t                wheel.raycastResult.hitPointWorld,\n\t                groundObject,\n\t                wheel.raycastResult.hitPointWorld,\n\t                axlei\n\t            );\n\t\n\t            wheel.sideImpulse *= sideFrictionStiffness2;\n\t        }\n\t    }\n\t\n\t    var sideFactor = 1;\n\t    var fwdFactor = 0.5;\n\t\n\t    this.sliding = false;\n\t    for (var i = 0; i < numWheels; i++) {\n\t        var wheel = wheelInfos[i];\n\t        var groundObject = wheel.raycastResult.body;\n\t\n\t        var rollingFriction = 0;\n\t\n\t        wheel.slipInfo = 1;\n\t        if (groundObject) {\n\t            var defaultRollingFrictionImpulse = 0;\n\t            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\t\n\t            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n\t            // rollingFriction = calcRollingFriction(contactPt);\n\t            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\t\n\t            rollingFriction += wheel.engineForce * timeStep;\n\t\n\t            // rollingFriction = 0;\n\t            var factor = maxImpulse / rollingFriction;\n\t            wheel.slipInfo *= factor;\n\t        }\n\t\n\t        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\t\n\t        wheel.forwardImpulse = 0;\n\t        wheel.skidInfo = 1;\n\t\n\t        if (groundObject) {\n\t            wheel.skidInfo = 1;\n\t\n\t            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n\t            var maximpSide = maximp;\n\t\n\t            var maximpSquared = maximp * maximpSide;\n\t\n\t            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\t\n\t            var x = wheel.forwardImpulse * fwdFactor;\n\t            var y = wheel.sideImpulse * sideFactor;\n\t\n\t            var impulseSquared = x * x + y * y;\n\t\n\t            wheel.sliding = false;\n\t            if (impulseSquared > maximpSquared) {\n\t                this.sliding = true;\n\t                wheel.sliding = true;\n\t\n\t                var factor = maximp / Math.sqrt(impulseSquared);\n\t\n\t                wheel.skidInfo *= factor;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (this.sliding) {\n\t        for (var i = 0; i < numWheels; i++) {\n\t            var wheel = wheelInfos[i];\n\t            if (wheel.sideImpulse !== 0) {\n\t                if (wheel.skidInfo < 1){\n\t                    wheel.forwardImpulse *= wheel.skidInfo;\n\t                    wheel.sideImpulse *= wheel.skidInfo;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // apply the impulses\n\t    for (var i = 0; i < numWheels; i++) {\n\t        var wheel = wheelInfos[i];\n\t\n\t        var rel_pos = new Vec3();\n\t        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n\t        // cannons applyimpulse is using world coord for the position\n\t        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\t\n\t        if (wheel.forwardImpulse !== 0) {\n\t            var impulse = new Vec3();\n\t            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n\t            chassisBody.applyImpulse(impulse, rel_pos);\n\t        }\n\t\n\t        if (wheel.sideImpulse !== 0){\n\t            var groundObject = wheel.raycastResult.body;\n\t\n\t            var rel_pos2 = new Vec3();\n\t            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n\t            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\t            var sideImp = new Vec3();\n\t            axle[i].scale(wheel.sideImpulse, sideImp);\n\t\n\t            // Scale the relative position in the up direction with rollInfluence.\n\t            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\t            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n\t            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n\t            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n\t            chassisBody.applyImpulse(sideImp, rel_pos);\n\t\n\t            //apply friction impulse on the ground\n\t            sideImp.scale(-1, sideImp);\n\t            groundObject.applyImpulse(sideImp, rel_pos2);\n\t        }\n\t    }\n\t};\n\t\n\tvar calcRollingFriction_vel1 = new Vec3();\n\tvar calcRollingFriction_vel2 = new Vec3();\n\tvar calcRollingFriction_vel = new Vec3();\n\t\n\tfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n\t    var j1 = 0;\n\t    var contactPosWorld = frictionPosWorld;\n\t\n\t    // var rel_pos1 = new Vec3();\n\t    // var rel_pos2 = new Vec3();\n\t    var vel1 = calcRollingFriction_vel1;\n\t    var vel2 = calcRollingFriction_vel2;\n\t    var vel = calcRollingFriction_vel;\n\t    // contactPosWorld.vsub(body0.position, rel_pos1);\n\t    // contactPosWorld.vsub(body1.position, rel_pos2);\n\t\n\t    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n\t    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n\t    vel1.vsub(vel2, vel);\n\t\n\t    var vrel = frictionDirectionWorld.dot(vel);\n\t\n\t    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n\t    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n\t    var relaxation = 1;\n\t    var jacDiagABInv = relaxation / (denom0 + denom1);\n\t\n\t    // calculate j that moves us to zero relative velocity\n\t    j1 = -vrel * jacDiagABInv;\n\t\n\t    if (maxImpulse < j1) {\n\t        j1 = maxImpulse;\n\t    }\n\t    if (j1 < -maxImpulse) {\n\t        j1 = -maxImpulse;\n\t    }\n\t\n\t    return j1;\n\t}\n\t\n\tvar computeImpulseDenominator_r0 = new Vec3();\n\tvar computeImpulseDenominator_c0 = new Vec3();\n\tvar computeImpulseDenominator_vec = new Vec3();\n\tvar computeImpulseDenominator_m = new Vec3();\n\tfunction computeImpulseDenominator(body, pos, normal) {\n\t    var r0 = computeImpulseDenominator_r0;\n\t    var c0 = computeImpulseDenominator_c0;\n\t    var vec = computeImpulseDenominator_vec;\n\t    var m = computeImpulseDenominator_m;\n\t\n\t    pos.vsub(body.position, r0);\n\t    r0.cross(normal, c0);\n\t    body.invInertiaWorld.vmult(c0, m);\n\t    m.cross(r0, vec);\n\t\n\t    return body.invMass + normal.dot(vec);\n\t}\n\t\n\t\n\tvar resolveSingleBilateral_vel1 = new Vec3();\n\tvar resolveSingleBilateral_vel2 = new Vec3();\n\tvar resolveSingleBilateral_vel = new Vec3();\n\t\n\t//bilateral constraint between two dynamic objects\n\tfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n\t    var normalLenSqr = normal.norm2();\n\t    if (normalLenSqr > 1.1){\n\t        return 0; // no impulse\n\t    }\n\t    // var rel_pos1 = new Vec3();\n\t    // var rel_pos2 = new Vec3();\n\t    // pos1.vsub(body1.position, rel_pos1);\n\t    // pos2.vsub(body2.position, rel_pos2);\n\t\n\t    var vel1 = resolveSingleBilateral_vel1;\n\t    var vel2 = resolveSingleBilateral_vel2;\n\t    var vel = resolveSingleBilateral_vel;\n\t    body1.getVelocityAtWorldPoint(pos1, vel1);\n\t    body2.getVelocityAtWorldPoint(pos2, vel2);\n\t\n\t    vel1.vsub(vel2, vel);\n\t\n\t    var rel_vel = normal.dot(vel);\n\t\n\t    var contactDamping = 0.2;\n\t    var massTerm = 1 / (body1.invMass + body2.invMass);\n\t    var impulse = - contactDamping * rel_vel * massTerm;\n\t\n\t    return impulse;\n\t}\n\n/***/ },\n/* 408 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Vec3 = __webpack_require__(366);\n\tvar Transform = __webpack_require__(377);\n\tvar RaycastResult = __webpack_require__(386);\n\tvar Utils = __webpack_require__(368);\n\t\n\tmodule.exports = WheelInfo;\n\t\n\t/**\n\t * @class WheelInfo\n\t * @constructor\n\t * @param {Object} [options]\n\t *\n\t * @param {Vec3} [options.chassisConnectionPointLocal]\n\t * @param {Vec3} [options.chassisConnectionPointWorld]\n\t * @param {Vec3} [options.directionLocal]\n\t * @param {Vec3} [options.directionWorld]\n\t * @param {Vec3} [options.axleLocal]\n\t * @param {Vec3} [options.axleWorld]\n\t * @param {number} [options.suspensionRestLength=1]\n\t * @param {number} [options.suspensionMaxLength=2]\n\t * @param {number} [options.radius=1]\n\t * @param {number} [options.suspensionStiffness=100]\n\t * @param {number} [options.dampingCompression=10]\n\t * @param {number} [options.dampingRelaxation=10]\n\t * @param {number} [options.frictionSlip=10000]\n\t * @param {number} [options.steering=0]\n\t * @param {number} [options.rotation=0]\n\t * @param {number} [options.deltaRotation=0]\n\t * @param {number} [options.rollInfluence=0.01]\n\t * @param {number} [options.maxSuspensionForce]\n\t * @param {boolean} [options.isFrontWheel=true]\n\t * @param {number} [options.clippedInvContactDotSuspension=1]\n\t * @param {number} [options.suspensionRelativeVelocity=0]\n\t * @param {number} [options.suspensionForce=0]\n\t * @param {number} [options.skidInfo=0]\n\t * @param {number} [options.suspensionLength=0]\n\t * @param {number} [options.maxSuspensionTravel=1]\n\t * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n\t * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n\t */\n\tfunction WheelInfo(options){\n\t    options = Utils.defaults(options, {\n\t        chassisConnectionPointLocal: new Vec3(),\n\t        chassisConnectionPointWorld: new Vec3(),\n\t        directionLocal: new Vec3(),\n\t        directionWorld: new Vec3(),\n\t        axleLocal: new Vec3(),\n\t        axleWorld: new Vec3(),\n\t        suspensionRestLength: 1,\n\t        suspensionMaxLength: 2,\n\t        radius: 1,\n\t        suspensionStiffness: 100,\n\t        dampingCompression: 10,\n\t        dampingRelaxation: 10,\n\t        frictionSlip: 10000,\n\t        steering: 0,\n\t        rotation: 0,\n\t        deltaRotation: 0,\n\t        rollInfluence: 0.01,\n\t        maxSuspensionForce: Number.MAX_VALUE,\n\t        isFrontWheel: true,\n\t        clippedInvContactDotSuspension: 1,\n\t        suspensionRelativeVelocity: 0,\n\t        suspensionForce: 0,\n\t        skidInfo: 0,\n\t        suspensionLength: 0,\n\t        maxSuspensionTravel: 1,\n\t        useCustomSlidingRotationalSpeed: false,\n\t        customSlidingRotationalSpeed: -0.1\n\t    });\n\t\n\t    /**\n\t     * Max travel distance of the suspension, in meters.\n\t     * @property {number} maxSuspensionTravel\n\t     */\n\t    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\t\n\t    /**\n\t     * Speed to apply to the wheel rotation when the wheel is sliding.\n\t     * @property {number} customSlidingRotationalSpeed\n\t     */\n\t    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\t\n\t    /**\n\t     * If the customSlidingRotationalSpeed should be used.\n\t     * @property {Boolean} useCustomSlidingRotationalSpeed\n\t     */\n\t    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\t\n\t    /**\n\t     * @property {Boolean} sliding\n\t     */\n\t    this.sliding = false;\n\t\n\t    /**\n\t     * Connection point, defined locally in the chassis body frame.\n\t     * @property {Vec3} chassisConnectionPointLocal\n\t     */\n\t    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\t\n\t    /**\n\t     * @property {Vec3} chassisConnectionPointWorld\n\t     */\n\t    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\t\n\t    /**\n\t     * @property {Vec3} directionLocal\n\t     */\n\t    this.directionLocal = options.directionLocal.clone();\n\t\n\t    /**\n\t     * @property {Vec3} directionWorld\n\t     */\n\t    this.directionWorld = options.directionWorld.clone();\n\t\n\t    /**\n\t     * @property {Vec3} axleLocal\n\t     */\n\t    this.axleLocal = options.axleLocal.clone();\n\t\n\t    /**\n\t     * @property {Vec3} axleWorld\n\t     */\n\t    this.axleWorld = options.axleWorld.clone();\n\t\n\t    /**\n\t     * @property {number} suspensionRestLength\n\t     */\n\t    this.suspensionRestLength = options.suspensionRestLength;\n\t\n\t    /**\n\t     * @property {number} suspensionMaxLength\n\t     */\n\t    this.suspensionMaxLength = options.suspensionMaxLength;\n\t\n\t    /**\n\t     * @property {number} radius\n\t     */\n\t    this.radius = options.radius;\n\t\n\t    /**\n\t     * @property {number} suspensionStiffness\n\t     */\n\t    this.suspensionStiffness = options.suspensionStiffness;\n\t\n\t    /**\n\t     * @property {number} dampingCompression\n\t     */\n\t    this.dampingCompression = options.dampingCompression;\n\t\n\t    /**\n\t     * @property {number} dampingRelaxation\n\t     */\n\t    this.dampingRelaxation = options.dampingRelaxation;\n\t\n\t    /**\n\t     * @property {number} frictionSlip\n\t     */\n\t    this.frictionSlip = options.frictionSlip;\n\t\n\t    /**\n\t     * @property {number} steering\n\t     */\n\t    this.steering = 0;\n\t\n\t    /**\n\t     * Rotation value, in radians.\n\t     * @property {number} rotation\n\t     */\n\t    this.rotation = 0;\n\t\n\t    /**\n\t     * @property {number} deltaRotation\n\t     */\n\t    this.deltaRotation = 0;\n\t\n\t    /**\n\t     * @property {number} rollInfluence\n\t     */\n\t    this.rollInfluence = options.rollInfluence;\n\t\n\t    /**\n\t     * @property {number} maxSuspensionForce\n\t     */\n\t    this.maxSuspensionForce = options.maxSuspensionForce;\n\t\n\t    /**\n\t     * @property {number} engineForce\n\t     */\n\t    this.engineForce = 0;\n\t\n\t    /**\n\t     * @property {number} brake\n\t     */\n\t    this.brake = 0;\n\t\n\t    /**\n\t     * @property {number} isFrontWheel\n\t     */\n\t    this.isFrontWheel = options.isFrontWheel;\n\t\n\t    /**\n\t     * @property {number} clippedInvContactDotSuspension\n\t     */\n\t    this.clippedInvContactDotSuspension = 1;\n\t\n\t    /**\n\t     * @property {number} suspensionRelativeVelocity\n\t     */\n\t    this.suspensionRelativeVelocity = 0;\n\t\n\t    /**\n\t     * @property {number} suspensionForce\n\t     */\n\t    this.suspensionForce = 0;\n\t\n\t    /**\n\t     * @property {number} skidInfo\n\t     */\n\t    this.skidInfo = 0;\n\t\n\t    /**\n\t     * @property {number} suspensionLength\n\t     */\n\t    this.suspensionLength = 0;\n\t\n\t    /**\n\t     * @property {number} sideImpulse\n\t     */\n\t    this.sideImpulse = 0;\n\t\n\t    /**\n\t     * @property {number} forwardImpulse\n\t     */\n\t    this.forwardImpulse = 0;\n\t\n\t    /**\n\t     * The result from raycasting\n\t     * @property {RaycastResult} raycastResult\n\t     */\n\t    this.raycastResult = new RaycastResult();\n\t\n\t    /**\n\t     * Wheel world transform\n\t     * @property {Transform} worldTransform\n\t     */\n\t    this.worldTransform = new Transform();\n\t\n\t    /**\n\t     * @property {boolean} isInContact\n\t     */\n\t    this.isInContact = false;\n\t}\n\t\n\tvar chassis_velocity_at_contactPoint = new Vec3();\n\tvar relpos = new Vec3();\n\tvar chassis_velocity_at_contactPoint = new Vec3();\n\tWheelInfo.prototype.updateWheel = function(chassis){\n\t    var raycastResult = this.raycastResult;\n\t\n\t    if (this.isInContact){\n\t        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n\t        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n\t        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n\t        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\t        if (project >= -0.1) {\n\t            this.suspensionRelativeVelocity = 0.0;\n\t            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n\t        } else {\n\t            var inv = -1 / project;\n\t            this.suspensionRelativeVelocity = projVel * inv;\n\t            this.clippedInvContactDotSuspension = inv;\n\t        }\n\t\n\t    } else {\n\t        // Not in contact : position wheel in a nice (rest length) position\n\t        raycastResult.suspensionLength = this.suspensionRestLength;\n\t        this.suspensionRelativeVelocity = 0.0;\n\t        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n\t        this.clippedInvContactDotSuspension = 1.0;\n\t    }\n\t};\n\n/***/ },\n/* 409 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Body = __webpack_require__(370);\n\tvar Sphere = __webpack_require__(410);\n\tvar Box = __webpack_require__(375);\n\tvar Vec3 = __webpack_require__(366);\n\tvar HingeConstraint = __webpack_require__(401);\n\t\n\tmodule.exports = RigidVehicle;\n\t\n\t/**\n\t * Simple vehicle helper class with spherical rigid body wheels.\n\t * @class RigidVehicle\n\t * @constructor\n\t * @param {Body} [options.chassisBody]\n\t */\n\tfunction RigidVehicle(options){\n\t    this.wheelBodies = [];\n\t\n\t    /**\n\t     * @property coordinateSystem\n\t     * @type {Vec3}\n\t     */\n\t    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\t\n\t    /**\n\t     * @property {Body} chassisBody\n\t     */\n\t    this.chassisBody = options.chassisBody;\n\t\n\t    if(!this.chassisBody){\n\t        // No chassis body given. Create it!\n\t        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n\t        this.chassisBody = new Body(1, chassisShape);\n\t    }\n\t\n\t    /**\n\t     * @property constraints\n\t     * @type {Array}\n\t     */\n\t    this.constraints = [];\n\t\n\t    this.wheelAxes = [];\n\t    this.wheelForces = [];\n\t}\n\t\n\t/**\n\t * Add a wheel\n\t * @method addWheel\n\t * @param {object} options\n\t * @param {boolean} [options.isFrontWheel]\n\t * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n\t * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n\t * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n\t * @param {Body} [options.body] The wheel body.\n\t */\n\tRigidVehicle.prototype.addWheel = function(options){\n\t    options = options || {};\n\t    var wheelBody = options.body;\n\t    if(!wheelBody){\n\t        wheelBody =  new Body(1, new Sphere(1.2));\n\t    }\n\t    this.wheelBodies.push(wheelBody);\n\t    this.wheelForces.push(0);\n\t\n\t    // Position constrain wheels\n\t    var zero = new Vec3();\n\t    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\t\n\t    // Set position locally to the chassis\n\t    var worldPosition = new Vec3();\n\t    this.chassisBody.pointToWorldFrame(position, worldPosition);\n\t    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\t\n\t    // Constrain wheel\n\t    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n\t    this.wheelAxes.push(axis);\n\t\n\t    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n\t        pivotA: position,\n\t        axisA: axis,\n\t        pivotB: Vec3.ZERO,\n\t        axisB: axis,\n\t        collideConnected: false\n\t    });\n\t    this.constraints.push(hingeConstraint);\n\t\n\t    return this.wheelBodies.length - 1;\n\t};\n\t\n\t/**\n\t * Set the steering value of a wheel.\n\t * @method setSteeringValue\n\t * @param {number} value\n\t * @param {integer} wheelIndex\n\t * @todo check coordinateSystem\n\t */\n\tRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n\t    // Set angle of the hinge axis\n\t    var axis = this.wheelAxes[wheelIndex];\n\t\n\t    var c = Math.cos(value),\n\t        s = Math.sin(value),\n\t        x = axis.x,\n\t        y = axis.y;\n\t    this.constraints[wheelIndex].axisA.set(\n\t        c*x -s*y,\n\t        s*x +c*y,\n\t        0\n\t    );\n\t};\n\t\n\t/**\n\t * Set the target rotational speed of the hinge constraint.\n\t * @method setMotorSpeed\n\t * @param {number} value\n\t * @param {integer} wheelIndex\n\t */\n\tRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n\t    var hingeConstraint = this.constraints[wheelIndex];\n\t    hingeConstraint.enableMotor();\n\t    hingeConstraint.motorTargetVelocity = value;\n\t};\n\t\n\t/**\n\t * Set the target rotational speed of the hinge constraint.\n\t * @method disableMotor\n\t * @param {number} value\n\t * @param {integer} wheelIndex\n\t */\n\tRigidVehicle.prototype.disableMotor = function(wheelIndex){\n\t    var hingeConstraint = this.constraints[wheelIndex];\n\t    hingeConstraint.disableMotor();\n\t};\n\t\n\tvar torque = new Vec3();\n\t\n\t/**\n\t * Set the wheel force to apply on one of the wheels each time step\n\t * @method setWheelForce\n\t * @param  {number} value\n\t * @param  {integer} wheelIndex\n\t */\n\tRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n\t    this.wheelForces[wheelIndex] = value;\n\t};\n\t\n\t/**\n\t * Apply a torque on one of the wheels.\n\t * @method applyWheelForce\n\t * @param  {number} value\n\t * @param  {integer} wheelIndex\n\t */\n\tRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n\t    var axis = this.wheelAxes[wheelIndex];\n\t    var wheelBody = this.wheelBodies[wheelIndex];\n\t    var bodyTorque = wheelBody.torque;\n\t\n\t    axis.scale(value, torque);\n\t    wheelBody.vectorToWorldFrame(torque, torque);\n\t    bodyTorque.vadd(torque, bodyTorque);\n\t};\n\t\n\t/**\n\t * Add the vehicle including its constraints to the world.\n\t * @method addToWorld\n\t * @param {World} world\n\t */\n\tRigidVehicle.prototype.addToWorld = function(world){\n\t    var constraints = this.constraints;\n\t    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\t\n\t    for (var i = 0; i < bodies.length; i++) {\n\t        world.add(bodies[i]);\n\t    }\n\t\n\t    for (var i = 0; i < constraints.length; i++) {\n\t        world.addConstraint(constraints[i]);\n\t    }\n\t\n\t    world.addEventListener('preStep', this._update.bind(this));\n\t};\n\t\n\tRigidVehicle.prototype._update = function(){\n\t    var wheelForces = this.wheelForces;\n\t    for (var i = 0; i < wheelForces.length; i++) {\n\t        this.applyWheelForce(wheelForces[i], i);\n\t    }\n\t};\n\t\n\t/**\n\t * Remove the vehicle including its constraints from the world.\n\t * @method removeFromWorld\n\t * @param {World} world\n\t */\n\tRigidVehicle.prototype.removeFromWorld = function(world){\n\t    var constraints = this.constraints;\n\t    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\t\n\t    for (var i = 0; i < bodies.length; i++) {\n\t        world.remove(bodies[i]);\n\t    }\n\t\n\t    for (var i = 0; i < constraints.length; i++) {\n\t        world.removeConstraint(constraints[i]);\n\t    }\n\t};\n\t\n\tvar worldAxis = new Vec3();\n\t\n\t/**\n\t * Get current rotational velocity of a wheel\n\t * @method getWheelSpeed\n\t * @param {integer} wheelIndex\n\t */\n\tRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n\t    var axis = this.wheelAxes[wheelIndex];\n\t    var wheelBody = this.wheelBodies[wheelIndex];\n\t    var w = wheelBody.angularVelocity;\n\t    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n\t    return w.dot(worldAxis);\n\t};\n\n\n/***/ },\n/* 410 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Sphere;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\t/**\n\t * Spherical shape\n\t * @class Sphere\n\t * @constructor\n\t * @extends Shape\n\t * @param {Number} radius The radius of the sphere, a non-negative number.\n\t * @author schteppe / http://github.com/schteppe\n\t */\n\tfunction Sphere(radius){\n\t    Shape.call(this);\n\t\n\t    /**\n\t     * @property {Number} radius\n\t     */\n\t    this.radius = radius!==undefined ? Number(radius) : 1.0;\n\t    this.type = Shape.types.SPHERE;\n\t\n\t    if(this.radius < 0){\n\t        throw new Error('The sphere radius cannot be negative.');\n\t    }\n\t\n\t    this.updateBoundingSphereRadius();\n\t}\n\tSphere.prototype = new Shape();\n\tSphere.prototype.constructor = Sphere;\n\t\n\tSphere.prototype.calculateLocalInertia = function(mass,target){\n\t    target = target || new Vec3();\n\t    var I = 2.0*mass*this.radius*this.radius/5.0;\n\t    target.x = I;\n\t    target.y = I;\n\t    target.z = I;\n\t    return target;\n\t};\n\t\n\tSphere.prototype.volume = function(){\n\t    return 4.0 * Math.PI * this.radius / 3.0;\n\t};\n\t\n\tSphere.prototype.updateBoundingSphereRadius = function(){\n\t    this.boundingSphereRadius = this.radius;\n\t};\n\t\n\tSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\t    var r = this.radius;\n\t    var axes = ['x','y','z'];\n\t    for(var i=0; i<axes.length; i++){\n\t        var ax = axes[i];\n\t        min[ax] = pos[ax] - r;\n\t        max[ax] = pos[ax] + r;\n\t    }\n\t};\n\n\n/***/ },\n/* 411 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(372);\n\tvar Broadphase = __webpack_require__(378);\n\t\n\tmodule.exports = SAPBroadphase;\n\t\n\t/**\n\t * Sweep and prune broadphase along one axis.\n\t *\n\t * @class SAPBroadphase\n\t * @constructor\n\t * @param {World} [world]\n\t * @extends Broadphase\n\t */\n\tfunction SAPBroadphase(world){\n\t    Broadphase.apply(this);\n\t\n\t    /**\n\t     * List of bodies currently in the broadphase.\n\t     * @property axisList\n\t     * @type {Array}\n\t     */\n\t    this.axisList = [];\n\t\n\t    /**\n\t     * The world to search in.\n\t     * @property world\n\t     * @type {World}\n\t     */\n\t    this.world = null;\n\t\n\t    /**\n\t     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n\t     * @property axisIndex\n\t     * @type {Number}\n\t     */\n\t    this.axisIndex = 0;\n\t\n\t    var axisList = this.axisList;\n\t\n\t    this._addBodyHandler = function(e){\n\t        axisList.push(e.body);\n\t    };\n\t\n\t    this._removeBodyHandler = function(e){\n\t        var idx = axisList.indexOf(e.body);\n\t        if(idx !== -1){\n\t            axisList.splice(idx,1);\n\t        }\n\t    };\n\t\n\t    if(world){\n\t        this.setWorld(world);\n\t    }\n\t}\n\tSAPBroadphase.prototype = new Broadphase();\n\t\n\t/**\n\t * Change the world\n\t * @method setWorld\n\t * @param  {World} world\n\t */\n\tSAPBroadphase.prototype.setWorld = function(world){\n\t    // Clear the old axis array\n\t    this.axisList.length = 0;\n\t\n\t    // Add all bodies from the new world\n\t    for(var i=0; i<world.bodies.length; i++){\n\t        this.axisList.push(world.bodies[i]);\n\t    }\n\t\n\t    // Remove old handlers, if any\n\t    world.removeEventListener(\"addBody\", this._addBodyHandler);\n\t    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\t\n\t    // Add handlers to update the list of bodies.\n\t    world.addEventListener(\"addBody\", this._addBodyHandler);\n\t    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\t\n\t    this.world = world;\n\t    this.dirty = true;\n\t};\n\t\n\t/**\n\t * @static\n\t * @method insertionSortX\n\t * @param  {Array} a\n\t * @return {Array}\n\t */\n\tSAPBroadphase.insertionSortX = function(a) {\n\t    for(var i=1,l=a.length;i<l;i++) {\n\t        var v = a[i];\n\t        for(var j=i - 1;j>=0;j--) {\n\t            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n\t                break;\n\t            }\n\t            a[j+1] = a[j];\n\t        }\n\t        a[j+1] = v;\n\t    }\n\t    return a;\n\t};\n\t\n\t/**\n\t * @static\n\t * @method insertionSortY\n\t * @param  {Array} a\n\t * @return {Array}\n\t */\n\tSAPBroadphase.insertionSortY = function(a) {\n\t    for(var i=1,l=a.length;i<l;i++) {\n\t        var v = a[i];\n\t        for(var j=i - 1;j>=0;j--) {\n\t            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n\t                break;\n\t            }\n\t            a[j+1] = a[j];\n\t        }\n\t        a[j+1] = v;\n\t    }\n\t    return a;\n\t};\n\t\n\t/**\n\t * @static\n\t * @method insertionSortZ\n\t * @param  {Array} a\n\t * @return {Array}\n\t */\n\tSAPBroadphase.insertionSortZ = function(a) {\n\t    for(var i=1,l=a.length;i<l;i++) {\n\t        var v = a[i];\n\t        for(var j=i - 1;j>=0;j--) {\n\t            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n\t                break;\n\t            }\n\t            a[j+1] = a[j];\n\t        }\n\t        a[j+1] = v;\n\t    }\n\t    return a;\n\t};\n\t\n\t/**\n\t * Collect all collision pairs\n\t * @method collisionPairs\n\t * @param  {World} world\n\t * @param  {Array} p1\n\t * @param  {Array} p2\n\t */\n\tSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n\t    var bodies = this.axisList,\n\t        N = bodies.length,\n\t        axisIndex = this.axisIndex,\n\t        i, j;\n\t\n\t    if(this.dirty){\n\t        this.sortList();\n\t        this.dirty = false;\n\t    }\n\t\n\t    // Look through the list\n\t    for(i=0; i !== N; i++){\n\t        var bi = bodies[i];\n\t\n\t        for(j=i+1; j < N; j++){\n\t            var bj = bodies[j];\n\t\n\t            if(!this.needBroadphaseCollision(bi,bj)){\n\t                continue;\n\t            }\n\t\n\t            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n\t                break;\n\t            }\n\t\n\t            this.intersectionTest(bi,bj,p1,p2);\n\t        }\n\t    }\n\t};\n\t\n\tSAPBroadphase.prototype.sortList = function(){\n\t    var axisList = this.axisList;\n\t    var axisIndex = this.axisIndex;\n\t    var N = axisList.length;\n\t\n\t    // Update AABBs\n\t    for(var i = 0; i!==N; i++){\n\t        var bi = axisList[i];\n\t        if(bi.aabbNeedsUpdate){\n\t            bi.computeAABB();\n\t        }\n\t    }\n\t\n\t    // Sort the list\n\t    if(axisIndex === 0){\n\t        SAPBroadphase.insertionSortX(axisList);\n\t    } else if(axisIndex === 1){\n\t        SAPBroadphase.insertionSortY(axisList);\n\t    } else if(axisIndex === 2){\n\t        SAPBroadphase.insertionSortZ(axisList);\n\t    }\n\t};\n\t\n\t/**\n\t * Check if the bounds of two bodies overlap, along the given SAP axis.\n\t * @static\n\t * @method checkBounds\n\t * @param  {Body} bi\n\t * @param  {Body} bj\n\t * @param  {Number} axisIndex\n\t * @return {Boolean}\n\t */\n\tSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n\t    var biPos;\n\t    var bjPos;\n\t\n\t    if(axisIndex === 0){\n\t        biPos = bi.position.x;\n\t        bjPos = bj.position.x;\n\t    } else if(axisIndex === 1){\n\t        biPos = bi.position.y;\n\t        bjPos = bj.position.y;\n\t    } else if(axisIndex === 2){\n\t        biPos = bi.position.z;\n\t        bjPos = bj.position.z;\n\t    }\n\t\n\t    var ri = bi.boundingRadius,\n\t        rj = bj.boundingRadius,\n\t        boundA1 = biPos - ri,\n\t        boundA2 = biPos + ri,\n\t        boundB1 = bjPos - rj,\n\t        boundB2 = bjPos + rj;\n\t\n\t    return boundB1 < boundA2;\n\t};\n\t\n\t/**\n\t * Computes the variance of the body positions and estimates the best\n\t * axis to use. Will automatically set property .axisIndex.\n\t * @method autoDetectAxis\n\t */\n\tSAPBroadphase.prototype.autoDetectAxis = function(){\n\t    var sumX=0,\n\t        sumX2=0,\n\t        sumY=0,\n\t        sumY2=0,\n\t        sumZ=0,\n\t        sumZ2=0,\n\t        bodies = this.axisList,\n\t        N = bodies.length,\n\t        invN=1/N;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        var b = bodies[i];\n\t\n\t        var centerX = b.position.x;\n\t        sumX += centerX;\n\t        sumX2 += centerX*centerX;\n\t\n\t        var centerY = b.position.y;\n\t        sumY += centerY;\n\t        sumY2 += centerY*centerY;\n\t\n\t        var centerZ = b.position.z;\n\t        sumZ += centerZ;\n\t        sumZ2 += centerZ*centerZ;\n\t    }\n\t\n\t    var varianceX = sumX2 - sumX*sumX*invN,\n\t        varianceY = sumY2 - sumY*sumY*invN,\n\t        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\t\n\t    if(varianceX > varianceY){\n\t        if(varianceX > varianceZ){\n\t            this.axisIndex = 0;\n\t        } else{\n\t            this.axisIndex = 2;\n\t        }\n\t    } else if(varianceY > varianceZ){\n\t        this.axisIndex = 1;\n\t    } else{\n\t        this.axisIndex = 2;\n\t    }\n\t};\n\t\n\t/**\n\t * Returns all the bodies within an AABB.\n\t * @method aabbQuery\n\t * @param  {World} world\n\t * @param  {AABB} aabb\n\t * @param {array} result An array to store resulting bodies in.\n\t * @return {array}\n\t */\n\tSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n\t    result = result || [];\n\t\n\t    if(this.dirty){\n\t        this.sortList();\n\t        this.dirty = false;\n\t    }\n\t\n\t    var axisIndex = this.axisIndex, axis = 'x';\n\t    if(axisIndex === 1){ axis = 'y'; }\n\t    if(axisIndex === 2){ axis = 'z'; }\n\t\n\t    var axisList = this.axisList;\n\t    var lower = aabb.lowerBound[axis];\n\t    var upper = aabb.upperBound[axis];\n\t    for(var i = 0; i < axisList.length; i++){\n\t        var b = axisList[i];\n\t\n\t        if(b.aabbNeedsUpdate){\n\t            b.computeAABB();\n\t        }\n\t\n\t        if(b.aabb.overlaps(aabb)){\n\t            result.push(b);\n\t        }\n\t    }\n\t\n\t    return result;\n\t};\n\n/***/ },\n/* 412 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = SPHSystem;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Particle = __webpack_require__(406);\n\tvar Body = __webpack_require__(370);\n\tvar Material = __webpack_require__(374);\n\t\n\t/**\n\t * Smoothed-particle hydrodynamics system\n\t * @class SPHSystem\n\t * @constructor\n\t */\n\tfunction SPHSystem(){\n\t    this.particles = [];\n\t\t\n\t    /**\n\t     * Density of the system (kg/m3).\n\t     * @property {number} density\n\t     */\n\t    this.density = 1;\n\t\t\n\t    /**\n\t     * Distance below which two particles are considered to be neighbors.\n\t     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n\t     * @property {number} smoothingRadius\n\t     */\n\t    this.smoothingRadius = 1;\n\t    this.speedOfSound = 1;\n\t\t\n\t    /**\n\t     * Viscosity of the system.\n\t     * @property {number} viscosity\n\t     */\n\t    this.viscosity = 0.01;\n\t    this.eps = 0.000001;\n\t\n\t    // Stuff Computed per particle\n\t    this.pressures = [];\n\t    this.densities = [];\n\t    this.neighbors = [];\n\t}\n\t\n\t/**\n\t * Add a particle to the system.\n\t * @method add\n\t * @param {Body} particle\n\t */\n\tSPHSystem.prototype.add = function(particle){\n\t    this.particles.push(particle);\n\t    if(this.neighbors.length < this.particles.length){\n\t        this.neighbors.push([]);\n\t    }\n\t};\n\t\n\t/**\n\t * Remove a particle from the system.\n\t * @method remove\n\t * @param {Body} particle\n\t */\n\tSPHSystem.prototype.remove = function(particle){\n\t    var idx = this.particles.indexOf(particle);\n\t    if(idx !== -1){\n\t        this.particles.splice(idx,1);\n\t        if(this.neighbors.length > this.particles.length){\n\t            this.neighbors.pop();\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Get neighbors within smoothing volume, save in the array neighbors\n\t * @method getNeighbors\n\t * @param {Body} particle\n\t * @param {Array} neighbors\n\t */\n\tvar SPHSystem_getNeighbors_dist = new Vec3();\n\tSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n\t    var N = this.particles.length,\n\t        id = particle.id,\n\t        R2 = this.smoothingRadius * this.smoothingRadius,\n\t        dist = SPHSystem_getNeighbors_dist;\n\t    for(var i=0; i!==N; i++){\n\t        var p = this.particles[i];\n\t        p.position.vsub(particle.position,dist);\n\t        if(id!==p.id && dist.norm2() < R2){\n\t            neighbors.push(p);\n\t        }\n\t    }\n\t};\n\t\n\t// Temp vectors for calculation\n\tvar SPHSystem_update_dist = new Vec3(),\n\t    SPHSystem_update_a_pressure = new Vec3(),\n\t    SPHSystem_update_a_visc = new Vec3(),\n\t    SPHSystem_update_gradW = new Vec3(),\n\t    SPHSystem_update_r_vec = new Vec3(),\n\t    SPHSystem_update_u = new Vec3(); // Relative velocity\n\tSPHSystem.prototype.update = function(){\n\t    var N = this.particles.length,\n\t        dist = SPHSystem_update_dist,\n\t        cs = this.speedOfSound,\n\t        eps = this.eps;\n\t\n\t    for(var i=0; i!==N; i++){\n\t        var p = this.particles[i]; // Current particle\n\t        var neighbors = this.neighbors[i];\n\t\n\t        // Get neighbors\n\t        neighbors.length = 0;\n\t        this.getNeighbors(p,neighbors);\n\t        neighbors.push(this.particles[i]); // Add current too\n\t        var numNeighbors = neighbors.length;\n\t\n\t        // Accumulate density for the particle\n\t        var sum = 0.0;\n\t        for(var j=0; j!==numNeighbors; j++){\n\t\n\t            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n\t            p.position.vsub(neighbors[j].position, dist);\n\t            var len = dist.norm();\n\t\n\t            var weight = this.w(len);\n\t            sum += neighbors[j].mass * weight;\n\t        }\n\t\n\t        // Save\n\t        this.densities[i] = sum;\n\t        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n\t    }\n\t\n\t    // Add forces\n\t\n\t    // Sum to these accelerations\n\t    var a_pressure= SPHSystem_update_a_pressure;\n\t    var a_visc =    SPHSystem_update_a_visc;\n\t    var gradW =     SPHSystem_update_gradW;\n\t    var r_vec =     SPHSystem_update_r_vec;\n\t    var u =         SPHSystem_update_u;\n\t\n\t    for(var i=0; i!==N; i++){\n\t\n\t        var particle = this.particles[i];\n\t\n\t        a_pressure.set(0,0,0);\n\t        a_visc.set(0,0,0);\n\t\n\t        // Init vars\n\t        var Pij;\n\t        var nabla;\n\t        var Vij;\n\t\n\t        // Sum up for all other neighbors\n\t        var neighbors = this.neighbors[i];\n\t        var numNeighbors = neighbors.length;\n\t\n\t        //printf(\"Neighbors: \");\n\t        for(var j=0; j!==numNeighbors; j++){\n\t\n\t            var neighbor = neighbors[j];\n\t            //printf(\"%d \",nj);\n\t\n\t            // Get r once for all..\n\t            particle.position.vsub(neighbor.position,r_vec);\n\t            var r = r_vec.norm();\n\t\n\t            // Pressure contribution\n\t            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n\t            this.gradw(r_vec, gradW);\n\t            // Add to pressure acceleration\n\t            gradW.mult(Pij , gradW);\n\t            a_pressure.vadd(gradW, a_pressure);\n\t\n\t            // Viscosity contribution\n\t            neighbor.velocity.vsub(particle.velocity, u);\n\t            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n\t            nabla = this.nablaw(r);\n\t            u.mult(nabla,u);\n\t            // Add to viscosity acceleration\n\t            a_visc.vadd( u, a_visc );\n\t        }\n\t\n\t        // Calculate force\n\t        a_visc.mult(particle.mass, a_visc);\n\t        a_pressure.mult(particle.mass, a_pressure);\n\t\n\t        // Add force to particles\n\t        particle.force.vadd(a_visc, particle.force);\n\t        particle.force.vadd(a_pressure, particle.force);\n\t    }\n\t};\n\t\n\t// Calculate the weight using the W(r) weightfunction\n\tSPHSystem.prototype.w = function(r){\n\t    // 315\n\t    var h = this.smoothingRadius;\n\t    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n\t};\n\t\n\t// calculate gradient of the weight function\n\tSPHSystem.prototype.gradw = function(rVec,resultVec){\n\t    var r = rVec.norm(),\n\t        h = this.smoothingRadius;\n\t    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n\t};\n\t\n\t// Calculate nabla(W)\n\tSPHSystem.prototype.nablaw = function(r){\n\t    var h = this.smoothingRadius;\n\t    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n\t    return nabla;\n\t};\n\n\n/***/ },\n/* 413 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = SplitSolver;\n\t\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Solver = __webpack_require__(387);\n\tvar Body = __webpack_require__(370);\n\t\n\t/**\n\t * Splits the equations into islands and solves them independently. Can improve performance.\n\t * @class SplitSolver\n\t * @constructor\n\t * @extends Solver\n\t * @param {Solver} subsolver\n\t */\n\tfunction SplitSolver(subsolver){\n\t    Solver.call(this);\n\t    this.iterations = 10;\n\t    this.tolerance = 1e-7;\n\t    this.subsolver = subsolver;\n\t    this.nodes = [];\n\t    this.nodePool = [];\n\t\n\t    // Create needed nodes, reuse if possible\n\t    while(this.nodePool.length < 128){\n\t        this.nodePool.push(this.createNode());\n\t    }\n\t}\n\tSplitSolver.prototype = new Solver();\n\t\n\t// Returns the number of subsystems\n\tvar SplitSolver_solve_nodes = []; // All allocated node objects\n\tvar SplitSolver_solve_nodePool = []; // All allocated node objects\n\tvar SplitSolver_solve_eqs = [];   // Temp array\n\tvar SplitSolver_solve_bds = [];   // Temp array\n\tvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\t\n\tvar STATIC = Body.STATIC;\n\tfunction getUnvisitedNode(nodes){\n\t    var Nnodes = nodes.length;\n\t    for(var i=0; i!==Nnodes; i++){\n\t        var node = nodes[i];\n\t        if(!node.visited && !(node.body.type & STATIC)){\n\t            return node;\n\t        }\n\t    }\n\t    return false;\n\t}\n\t\n\tvar queue = [];\n\tfunction bfs(root,visitFunc,bds,eqs){\n\t    queue.push(root);\n\t    root.visited = true;\n\t    visitFunc(root,bds,eqs);\n\t    while(queue.length) {\n\t        var node = queue.pop();\n\t        // Loop over unvisited child nodes\n\t        var child;\n\t        while((child = getUnvisitedNode(node.children))) {\n\t            child.visited = true;\n\t            visitFunc(child,bds,eqs);\n\t            queue.push(child);\n\t        }\n\t    }\n\t}\n\t\n\tfunction visitFunc(node,bds,eqs){\n\t    bds.push(node.body);\n\t    var Neqs = node.eqs.length;\n\t    for(var i=0; i!==Neqs; i++){\n\t        var eq = node.eqs[i];\n\t        if(eqs.indexOf(eq) === -1){\n\t            eqs.push(eq);\n\t        }\n\t    }\n\t}\n\t\n\tSplitSolver.prototype.createNode = function(){\n\t    return { body:null, children:[], eqs:[], visited:false };\n\t};\n\t\n\t/**\n\t * Solve the subsystems\n\t * @method solve\n\t * @param  {Number} dt\n\t * @param  {World} world\n\t */\n\tSplitSolver.prototype.solve = function(dt,world){\n\t    var nodes=SplitSolver_solve_nodes,\n\t        nodePool=this.nodePool,\n\t        bodies=world.bodies,\n\t        equations=this.equations,\n\t        Neq=equations.length,\n\t        Nbodies=bodies.length,\n\t        subsolver=this.subsolver;\n\t\n\t    // Create needed nodes, reuse if possible\n\t    while(nodePool.length < Nbodies){\n\t        nodePool.push(this.createNode());\n\t    }\n\t    nodes.length = Nbodies;\n\t    for (var i = 0; i < Nbodies; i++) {\n\t        nodes[i] = nodePool[i];\n\t    }\n\t\n\t    // Reset node values\n\t    for(var i=0; i!==Nbodies; i++){\n\t        var node = nodes[i];\n\t        node.body = bodies[i];\n\t        node.children.length = 0;\n\t        node.eqs.length = 0;\n\t        node.visited = false;\n\t    }\n\t    for(var k=0; k!==Neq; k++){\n\t        var eq=equations[k],\n\t            i=bodies.indexOf(eq.bi),\n\t            j=bodies.indexOf(eq.bj),\n\t            ni=nodes[i],\n\t            nj=nodes[j];\n\t        ni.children.push(nj);\n\t        ni.eqs.push(eq);\n\t        nj.children.push(ni);\n\t        nj.eqs.push(eq);\n\t    }\n\t\n\t    var child, n=0, eqs=SplitSolver_solve_eqs;\n\t\n\t    subsolver.tolerance = this.tolerance;\n\t    subsolver.iterations = this.iterations;\n\t\n\t    var dummyWorld = SplitSolver_solve_dummyWorld;\n\t    while((child = getUnvisitedNode(nodes))){\n\t        eqs.length = 0;\n\t        dummyWorld.bodies.length = 0;\n\t        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\t\n\t        var Neqs = eqs.length;\n\t\n\t        eqs = eqs.sort(sortById);\n\t\n\t        for(var i=0; i!==Neqs; i++){\n\t            subsolver.addEquation(eqs[i]);\n\t        }\n\t\n\t        var iter = subsolver.solve(dt,dummyWorld);\n\t        subsolver.removeAllEquations();\n\t        n++;\n\t    }\n\t\n\t    return n;\n\t};\n\t\n\tfunction sortById(a, b){\n\t    return b.id - a.id;\n\t}\n\n/***/ },\n/* 414 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Vec3 = __webpack_require__(366);\n\t\n\tmodule.exports = Spring;\n\t\n\t/**\n\t * A spring, connecting two bodies.\n\t *\n\t * @class Spring\n\t * @constructor\n\t * @param {Body} bodyA\n\t * @param {Body} bodyB\n\t * @param {Object} [options]\n\t * @param {number} [options.restLength]   A number > 0. Default: 1\n\t * @param {number} [options.stiffness]    A number >= 0. Default: 100\n\t * @param {number} [options.damping]      A number >= 0. Default: 1\n\t * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n\t * @param {Vec3}  [options.worldAnchorB]\n\t * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n\t * @param {Vec3}  [options.localAnchorB]\n\t */\n\tfunction Spring(bodyA,bodyB,options){\n\t    options = options || {};\n\t\n\t    /**\n\t     * Rest length of the spring.\n\t     * @property restLength\n\t     * @type {number}\n\t     */\n\t    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\t\n\t    /**\n\t     * Stiffness of the spring.\n\t     * @property stiffness\n\t     * @type {number}\n\t     */\n\t    this.stiffness = options.stiffness || 100;\n\t\n\t    /**\n\t     * Damping of the spring.\n\t     * @property damping\n\t     * @type {number}\n\t     */\n\t    this.damping = options.damping || 1;\n\t\n\t    /**\n\t     * First connected body.\n\t     * @property bodyA\n\t     * @type {Body}\n\t     */\n\t    this.bodyA = bodyA;\n\t\n\t    /**\n\t     * Second connected body.\n\t     * @property bodyB\n\t     * @type {Body}\n\t     */\n\t    this.bodyB = bodyB;\n\t\n\t    /**\n\t     * Anchor for bodyA in local bodyA coordinates.\n\t     * @property localAnchorA\n\t     * @type {Vec3}\n\t     */\n\t    this.localAnchorA = new Vec3();\n\t\n\t    /**\n\t     * Anchor for bodyB in local bodyB coordinates.\n\t     * @property localAnchorB\n\t     * @type {Vec3}\n\t     */\n\t    this.localAnchorB = new Vec3();\n\t\n\t    if(options.localAnchorA){\n\t        this.localAnchorA.copy(options.localAnchorA);\n\t    }\n\t    if(options.localAnchorB){\n\t        this.localAnchorB.copy(options.localAnchorB);\n\t    }\n\t    if(options.worldAnchorA){\n\t        this.setWorldAnchorA(options.worldAnchorA);\n\t    }\n\t    if(options.worldAnchorB){\n\t        this.setWorldAnchorB(options.worldAnchorB);\n\t    }\n\t}\n\t\n\t/**\n\t * Set the anchor point on body A, using world coordinates.\n\t * @method setWorldAnchorA\n\t * @param {Vec3} worldAnchorA\n\t */\n\tSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n\t    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n\t};\n\t\n\t/**\n\t * Set the anchor point on body B, using world coordinates.\n\t * @method setWorldAnchorB\n\t * @param {Vec3} worldAnchorB\n\t */\n\tSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n\t    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n\t};\n\t\n\t/**\n\t * Get the anchor point on body A, in world coordinates.\n\t * @method getWorldAnchorA\n\t * @param {Vec3} result The vector to store the result in.\n\t */\n\tSpring.prototype.getWorldAnchorA = function(result){\n\t    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n\t};\n\t\n\t/**\n\t * Get the anchor point on body B, in world coordinates.\n\t * @method getWorldAnchorB\n\t * @param {Vec3} result The vector to store the result in.\n\t */\n\tSpring.prototype.getWorldAnchorB = function(result){\n\t    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n\t};\n\t\n\tvar applyForce_r =              new Vec3(),\n\t    applyForce_r_unit =         new Vec3(),\n\t    applyForce_u =              new Vec3(),\n\t    applyForce_f =              new Vec3(),\n\t    applyForce_worldAnchorA =   new Vec3(),\n\t    applyForce_worldAnchorB =   new Vec3(),\n\t    applyForce_ri =             new Vec3(),\n\t    applyForce_rj =             new Vec3(),\n\t    applyForce_ri_x_f =         new Vec3(),\n\t    applyForce_rj_x_f =         new Vec3(),\n\t    applyForce_tmp =            new Vec3();\n\t\n\t/**\n\t * Apply the spring force to the connected bodies.\n\t * @method applyForce\n\t */\n\tSpring.prototype.applyForce = function(){\n\t    var k = this.stiffness,\n\t        d = this.damping,\n\t        l = this.restLength,\n\t        bodyA = this.bodyA,\n\t        bodyB = this.bodyB,\n\t        r = applyForce_r,\n\t        r_unit = applyForce_r_unit,\n\t        u = applyForce_u,\n\t        f = applyForce_f,\n\t        tmp = applyForce_tmp;\n\t\n\t    var worldAnchorA = applyForce_worldAnchorA,\n\t        worldAnchorB = applyForce_worldAnchorB,\n\t        ri = applyForce_ri,\n\t        rj = applyForce_rj,\n\t        ri_x_f = applyForce_ri_x_f,\n\t        rj_x_f = applyForce_rj_x_f;\n\t\n\t    // Get world anchors\n\t    this.getWorldAnchorA(worldAnchorA);\n\t    this.getWorldAnchorB(worldAnchorB);\n\t\n\t    // Get offset points\n\t    worldAnchorA.vsub(bodyA.position,ri);\n\t    worldAnchorB.vsub(bodyB.position,rj);\n\t\n\t    // Compute distance vector between world anchor points\n\t    worldAnchorB.vsub(worldAnchorA,r);\n\t    var rlen = r.norm();\n\t    r_unit.copy(r);\n\t    r_unit.normalize();\n\t\n\t    // Compute relative velocity of the anchor points, u\n\t    bodyB.velocity.vsub(bodyA.velocity,u);\n\t    // Add rotational velocity\n\t\n\t    bodyB.angularVelocity.cross(rj,tmp);\n\t    u.vadd(tmp,u);\n\t    bodyA.angularVelocity.cross(ri,tmp);\n\t    u.vsub(tmp,u);\n\t\n\t    // F = - k * ( x - L ) - D * ( u )\n\t    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\t\n\t    // Add forces to bodies\n\t    bodyA.force.vsub(f,bodyA.force);\n\t    bodyB.force.vadd(f,bodyB.force);\n\t\n\t    // Angular force\n\t    ri.cross(f,ri_x_f);\n\t    rj.cross(f,rj_x_f);\n\t    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n\t    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n\t};\n\n\n/***/ },\n/* 415 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = Trimesh;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar Transform = __webpack_require__(377);\n\tvar AABB = __webpack_require__(365);\n\tvar Octree = __webpack_require__(416);\n\t\n\t/**\n\t * @class Trimesh\n\t * @constructor\n\t * @param {array} vertices\n\t * @param {array} indices\n\t * @extends Shape\n\t * @example\n\t *     // How to make a mesh with a single triangle\n\t *     var vertices = [\n\t *         0, 0, 0, // vertex 0\n\t *         1, 0, 0, // vertex 1\n\t *         0, 1, 0  // vertex 2\n\t *     ];\n\t *     var indices = [\n\t *         0, 1, 2  // triangle 0\n\t *     ];\n\t *     var trimeshShape = new Trimesh(vertices, indices);\n\t */\n\tfunction Trimesh(vertices, indices) {\n\t    Shape.call(this);\n\t    this.type = Shape.types.TRIMESH;\n\t\n\t    /**\n\t     * @property vertices\n\t     * @type {Array}\n\t     */\n\t    this.vertices = new Float32Array(vertices);\n\t\n\t    /**\n\t     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n\t     * @property indices\n\t     * @type {Array}\n\t     */\n\t    this.indices = new Int16Array(indices);\n\t\n\t    /**\n\t     * The normals data.\n\t     * @property normals\n\t     * @type {Array}\n\t     */\n\t    this.normals = new Float32Array(indices.length);\n\t\n\t    /**\n\t     * The local AABB of the mesh.\n\t     * @property aabb\n\t     * @type {Array}\n\t     */\n\t    this.aabb = new AABB();\n\t\n\t    /**\n\t     * References to vertex pairs, making up all unique edges in the trimesh.\n\t     * @property {array} edges\n\t     */\n\t    this.edges = null;\n\t\n\t    /**\n\t     * Local scaling of the mesh. Use .setScale() to set it.\n\t     * @property {Vec3} scale\n\t     */\n\t    this.scale = new Vec3(1, 1, 1);\n\t\n\t    /**\n\t     * The indexed triangles. Use .updateTree() to update it.\n\t     * @property {Octree} tree\n\t     */\n\t    this.tree = new Octree();\n\t\n\t    this.updateEdges();\n\t    this.updateNormals();\n\t    this.updateAABB();\n\t    this.updateBoundingSphereRadius();\n\t    this.updateTree();\n\t}\n\tTrimesh.prototype = new Shape();\n\tTrimesh.prototype.constructor = Trimesh;\n\t\n\tvar computeNormals_n = new Vec3();\n\t\n\t/**\n\t * @method updateTree\n\t */\n\tTrimesh.prototype.updateTree = function(){\n\t    var tree = this.tree;\n\t\n\t    tree.reset();\n\t    tree.aabb.copy(this.aabb);\n\t    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\t    tree.aabb.lowerBound.x *= 1 / scale.x;\n\t    tree.aabb.lowerBound.y *= 1 / scale.y;\n\t    tree.aabb.lowerBound.z *= 1 / scale.z;\n\t    tree.aabb.upperBound.x *= 1 / scale.x;\n\t    tree.aabb.upperBound.y *= 1 / scale.y;\n\t    tree.aabb.upperBound.z *= 1 / scale.z;\n\t\n\t    // Insert all triangles\n\t    var triangleAABB = new AABB();\n\t    var a = new Vec3();\n\t    var b = new Vec3();\n\t    var c = new Vec3();\n\t    var points = [a, b, c];\n\t    for (var i = 0; i < this.indices.length / 3; i++) {\n\t        //this.getTriangleVertices(i, a, b, c);\n\t\n\t        // Get unscaled triangle verts\n\t        var i3 = i * 3;\n\t        this._getUnscaledVertex(this.indices[i3], a);\n\t        this._getUnscaledVertex(this.indices[i3 + 1], b);\n\t        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\t\n\t        triangleAABB.setFromPoints(points);\n\t        tree.insert(triangleAABB, i);\n\t    }\n\t    tree.removeEmptyNodes();\n\t};\n\t\n\tvar unscaledAABB = new AABB();\n\t\n\t/**\n\t * Get triangles in a local AABB from the trimesh.\n\t * @method getTrianglesInAABB\n\t * @param  {AABB} aabb\n\t * @param  {array} result An array of integers, referencing the queried triangles.\n\t */\n\tTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n\t    unscaledAABB.copy(aabb);\n\t\n\t    // Scale it to local\n\t    var scale = this.scale;\n\t    var isx = scale.x;\n\t    var isy = scale.y;\n\t    var isz = scale.z;\n\t    var l = unscaledAABB.lowerBound;\n\t    var u = unscaledAABB.upperBound;\n\t    l.x /= isx;\n\t    l.y /= isy;\n\t    l.z /= isz;\n\t    u.x /= isx;\n\t    u.y /= isy;\n\t    u.z /= isz;\n\t\n\t    return this.tree.aabbQuery(unscaledAABB, result);\n\t};\n\t\n\t/**\n\t * @method setScale\n\t * @param {Vec3} scale\n\t */\n\tTrimesh.prototype.setScale = function(scale){\n\t    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n\t    var isUniform = scale.x === scale.y === scale.z;\n\t\n\t    if(!(wasUniform && isUniform)){\n\t        // Non-uniform scaling. Need to update normals.\n\t        this.updateNormals();\n\t    }\n\t    this.scale.copy(scale);\n\t    this.updateAABB();\n\t    this.updateBoundingSphereRadius();\n\t};\n\t\n\t/**\n\t * Compute the normals of the faces. Will save in the .normals array.\n\t * @method updateNormals\n\t */\n\tTrimesh.prototype.updateNormals = function(){\n\t    var n = computeNormals_n;\n\t\n\t    // Generate normals\n\t    var normals = this.normals;\n\t    for(var i=0; i < this.indices.length / 3; i++){\n\t        var i3 = i * 3;\n\t\n\t        var a = this.indices[i3],\n\t            b = this.indices[i3 + 1],\n\t            c = this.indices[i3 + 2];\n\t\n\t        this.getVertex(a, va);\n\t        this.getVertex(b, vb);\n\t        this.getVertex(c, vc);\n\t\n\t        Trimesh.computeNormal(vb, va, vc, n);\n\t\n\t        normals[i3] = n.x;\n\t        normals[i3 + 1] = n.y;\n\t        normals[i3 + 2] = n.z;\n\t    }\n\t};\n\t\n\t/**\n\t * Update the .edges property\n\t * @method updateEdges\n\t */\n\tTrimesh.prototype.updateEdges = function(){\n\t    var edges = {};\n\t    var add = function(indexA, indexB){\n\t        var key = a < b ? a + '_' + b : b + '_' + a;\n\t        edges[key] = true;\n\t    };\n\t    for(var i=0; i < this.indices.length / 3; i++){\n\t        var i3 = i * 3;\n\t        var a = this.indices[i3],\n\t            b = this.indices[i3 + 1],\n\t            c = this.indices[i3 + 2];\n\t        add(a,b);\n\t        add(b,c);\n\t        add(c,a);\n\t    }\n\t    var keys = Object.keys(edges);\n\t    this.edges = new Int16Array(keys.length * 2);\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var indices = keys[i].split('_');\n\t        this.edges[2 * i] = parseInt(indices[0], 10);\n\t        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n\t    }\n\t};\n\t\n\t/**\n\t * Get an edge vertex\n\t * @method getEdgeVertex\n\t * @param  {number} edgeIndex\n\t * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n\t * @param  {Vec3} vertexStore Where to store the result\n\t */\n\tTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n\t    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n\t    this.getVertex(vertexIndex, vertexStore);\n\t};\n\t\n\tvar getEdgeVector_va = new Vec3();\n\tvar getEdgeVector_vb = new Vec3();\n\t\n\t/**\n\t * Get a vector along an edge.\n\t * @method getEdgeVector\n\t * @param  {number} edgeIndex\n\t * @param  {Vec3} vectorStore\n\t */\n\tTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n\t    var va = getEdgeVector_va;\n\t    var vb = getEdgeVector_vb;\n\t    this.getEdgeVertex(edgeIndex, 0, va);\n\t    this.getEdgeVertex(edgeIndex, 1, vb);\n\t    vb.vsub(va, vectorStore);\n\t};\n\t\n\t/**\n\t * Get face normal given 3 vertices\n\t * @static\n\t * @method computeNormal\n\t * @param {Vec3} va\n\t * @param {Vec3} vb\n\t * @param {Vec3} vc\n\t * @param {Vec3} target\n\t */\n\tvar cb = new Vec3();\n\tvar ab = new Vec3();\n\tTrimesh.computeNormal = function ( va, vb, vc, target ) {\n\t    vb.vsub(va,ab);\n\t    vc.vsub(vb,cb);\n\t    cb.cross(ab,target);\n\t    if ( !target.isZero() ) {\n\t        target.normalize();\n\t    }\n\t};\n\t\n\tvar va = new Vec3();\n\tvar vb = new Vec3();\n\tvar vc = new Vec3();\n\t\n\t/**\n\t * Get vertex i.\n\t * @method getVertex\n\t * @param  {number} i\n\t * @param  {Vec3} out\n\t * @return {Vec3} The \"out\" vector object\n\t */\n\tTrimesh.prototype.getVertex = function(i, out){\n\t    var scale = this.scale;\n\t    this._getUnscaledVertex(i, out);\n\t    out.x *= scale.x;\n\t    out.y *= scale.y;\n\t    out.z *= scale.z;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Get raw vertex i\n\t * @private\n\t * @method _getUnscaledVertex\n\t * @param  {number} i\n\t * @param  {Vec3} out\n\t * @return {Vec3} The \"out\" vector object\n\t */\n\tTrimesh.prototype._getUnscaledVertex = function(i, out){\n\t    var i3 = i * 3;\n\t    var vertices = this.vertices;\n\t    return out.set(\n\t        vertices[i3],\n\t        vertices[i3 + 1],\n\t        vertices[i3 + 2]\n\t    );\n\t};\n\t\n\t/**\n\t * Get a vertex from the trimesh,transformed by the given position and quaternion.\n\t * @method getWorldVertex\n\t * @param  {number} i\n\t * @param  {Vec3} pos\n\t * @param  {Quaternion} quat\n\t * @param  {Vec3} out\n\t * @return {Vec3} The \"out\" vector object\n\t */\n\tTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n\t    this.getVertex(i, out);\n\t    Transform.pointToWorldFrame(pos, quat, out, out);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Get the three vertices for triangle i.\n\t * @method getTriangleVertices\n\t * @param  {number} i\n\t * @param  {Vec3} a\n\t * @param  {Vec3} b\n\t * @param  {Vec3} c\n\t */\n\tTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n\t    var i3 = i * 3;\n\t    this.getVertex(this.indices[i3], a);\n\t    this.getVertex(this.indices[i3 + 1], b);\n\t    this.getVertex(this.indices[i3 + 2], c);\n\t};\n\t\n\t/**\n\t * Compute the normal of triangle i.\n\t * @method getNormal\n\t * @param  {Number} i\n\t * @param  {Vec3} target\n\t * @return {Vec3} The \"target\" vector object\n\t */\n\tTrimesh.prototype.getNormal = function(i, target){\n\t    var i3 = i * 3;\n\t    return target.set(\n\t        this.normals[i3],\n\t        this.normals[i3 + 1],\n\t        this.normals[i3 + 2]\n\t    );\n\t};\n\t\n\tvar cli_aabb = new AABB();\n\t\n\t/**\n\t * @method calculateLocalInertia\n\t * @param  {Number} mass\n\t * @param  {Vec3} target\n\t * @return {Vec3} The \"target\" vector object\n\t */\n\tTrimesh.prototype.calculateLocalInertia = function(mass,target){\n\t    // Approximate with box inertia\n\t    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n\t    this.computeLocalAABB(cli_aabb);\n\t    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n\t        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n\t        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n\t    return target.set(\n\t        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n\t        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n\t        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n\t    );\n\t};\n\t\n\tvar computeLocalAABB_worldVert = new Vec3();\n\t\n\t/**\n\t * Compute the local AABB for the trimesh\n\t * @method computeLocalAABB\n\t * @param  {AABB} aabb\n\t */\n\tTrimesh.prototype.computeLocalAABB = function(aabb){\n\t    var l = aabb.lowerBound,\n\t        u = aabb.upperBound,\n\t        n = this.vertices.length,\n\t        vertices = this.vertices,\n\t        v = computeLocalAABB_worldVert;\n\t\n\t    this.getVertex(0, v);\n\t    l.copy(v);\n\t    u.copy(v);\n\t\n\t    for(var i=0; i !== n; i++){\n\t        this.getVertex(i, v);\n\t\n\t        if(v.x < l.x){\n\t            l.x = v.x;\n\t        } else if(v.x > u.x){\n\t            u.x = v.x;\n\t        }\n\t\n\t        if(v.y < l.y){\n\t            l.y = v.y;\n\t        } else if(v.y > u.y){\n\t            u.y = v.y;\n\t        }\n\t\n\t        if(v.z < l.z){\n\t            l.z = v.z;\n\t        } else if(v.z > u.z){\n\t            u.z = v.z;\n\t        }\n\t    }\n\t};\n\t\n\t\n\t/**\n\t * Update the .aabb property\n\t * @method updateAABB\n\t */\n\tTrimesh.prototype.updateAABB = function(){\n\t    this.computeLocalAABB(this.aabb);\n\t};\n\t\n\t/**\n\t * Will update the .boundingSphereRadius property\n\t * @method updateBoundingSphereRadius\n\t */\n\tTrimesh.prototype.updateBoundingSphereRadius = function(){\n\t    // Assume points are distributed with local (0,0,0) as center\n\t    var max2 = 0;\n\t    var vertices = this.vertices;\n\t    var v = new Vec3();\n\t    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n\t        this.getVertex(i, v);\n\t        var norm2 = v.norm2();\n\t        if(norm2 > max2){\n\t            max2 = norm2;\n\t        }\n\t    }\n\t    this.boundingSphereRadius = Math.sqrt(max2);\n\t};\n\t\n\tvar tempWorldVertex = new Vec3();\n\tvar calculateWorldAABB_frame = new Transform();\n\tvar calculateWorldAABB_aabb = new AABB();\n\t\n\t/**\n\t * @method calculateWorldAABB\n\t * @param {Vec3}        pos\n\t * @param {Quaternion}  quat\n\t * @param {Vec3}        min\n\t * @param {Vec3}        max\n\t */\n\tTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\t    /*\n\t    var n = this.vertices.length / 3,\n\t        verts = this.vertices;\n\t    var minx,miny,minz,maxx,maxy,maxz;\n\t\n\t    var v = tempWorldVertex;\n\t    for(var i=0; i<n; i++){\n\t        this.getVertex(i, v);\n\t        quat.vmult(v, v);\n\t        pos.vadd(v, v);\n\t        if (v.x < minx || minx===undefined){\n\t            minx = v.x;\n\t        } else if(v.x > maxx || maxx===undefined){\n\t            maxx = v.x;\n\t        }\n\t\n\t        if (v.y < miny || miny===undefined){\n\t            miny = v.y;\n\t        } else if(v.y > maxy || maxy===undefined){\n\t            maxy = v.y;\n\t        }\n\t\n\t        if (v.z < minz || minz===undefined){\n\t            minz = v.z;\n\t        } else if(v.z > maxz || maxz===undefined){\n\t            maxz = v.z;\n\t        }\n\t    }\n\t    min.set(minx,miny,minz);\n\t    max.set(maxx,maxy,maxz);\n\t    */\n\t\n\t    // Faster approximation using local AABB\n\t    var frame = calculateWorldAABB_frame;\n\t    var result = calculateWorldAABB_aabb;\n\t    frame.position = pos;\n\t    frame.quaternion = quat;\n\t    this.aabb.toWorldFrame(frame, result);\n\t    min.copy(result.lowerBound);\n\t    max.copy(result.upperBound);\n\t};\n\t\n\t/**\n\t * Get approximate volume\n\t * @method volume\n\t * @return {Number}\n\t */\n\tTrimesh.prototype.volume = function(){\n\t    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n\t};\n\t\n\t/**\n\t * Create a Trimesh instance, shaped as a torus.\n\t * @static\n\t * @method createTorus\n\t * @param  {number} [radius=1]\n\t * @param  {number} [tube=0.5]\n\t * @param  {number} [radialSegments=8]\n\t * @param  {number} [tubularSegments=6]\n\t * @param  {number} [arc=6.283185307179586]\n\t * @return {Trimesh} A torus\n\t */\n\tTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n\t    radius = radius || 1;\n\t    tube = tube || 0.5;\n\t    radialSegments = radialSegments || 8;\n\t    tubularSegments = tubularSegments || 6;\n\t    arc = arc || Math.PI * 2;\n\t\n\t    var vertices = [];\n\t    var indices = [];\n\t\n\t    for ( var j = 0; j <= radialSegments; j ++ ) {\n\t        for ( var i = 0; i <= tubularSegments; i ++ ) {\n\t            var u = i / tubularSegments * arc;\n\t            var v = j / radialSegments * Math.PI * 2;\n\t\n\t            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t            var z = tube * Math.sin( v );\n\t\n\t            vertices.push( x, y, z );\n\t        }\n\t    }\n\t\n\t    for ( var j = 1; j <= radialSegments; j ++ ) {\n\t        for ( var i = 1; i <= tubularSegments; i ++ ) {\n\t            var a = ( tubularSegments + 1 ) * j + i - 1;\n\t            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t            var d = ( tubularSegments + 1 ) * j + i;\n\t\n\t            indices.push(a, b, d);\n\t            indices.push(b, c, d);\n\t        }\n\t    }\n\t\n\t    return new Trimesh(vertices, indices);\n\t};\n\n\n/***/ },\n/* 416 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar AABB = __webpack_require__(365);\n\tvar Vec3 = __webpack_require__(366);\n\t\n\tmodule.exports = Octree;\n\t\n\t/**\n\t * @class OctreeNode\n\t * @param {object} [options]\n\t * @param {Octree} [options.root]\n\t * @param {AABB} [options.aabb]\n\t */\n\tfunction OctreeNode(options){\n\t    options = options || {};\n\t\n\t    /**\n\t     * The root node\n\t     * @property {OctreeNode} root\n\t     */\n\t    this.root = options.root || null;\n\t\n\t    /**\n\t     * Boundary of this node\n\t     * @property {AABB} aabb\n\t     */\n\t    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\t\n\t    /**\n\t     * Contained data at the current node level.\n\t     * @property {Array} data\n\t     */\n\t    this.data = [];\n\t\n\t    /**\n\t     * Children to this node\n\t     * @property {Array} children\n\t     */\n\t    this.children = [];\n\t}\n\t\n\t/**\n\t * @class Octree\n\t * @param {AABB} aabb The total AABB of the tree\n\t * @param {object} [options]\n\t * @param {number} [options.maxDepth=8]\n\t * @extends OctreeNode\n\t */\n\tfunction Octree(aabb, options){\n\t    options = options || {};\n\t    options.root = null;\n\t    options.aabb = aabb;\n\t    OctreeNode.call(this, options);\n\t\n\t    /**\n\t     * Maximum subdivision depth\n\t     * @property {number} maxDepth\n\t     */\n\t    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n\t}\n\tOctree.prototype = new OctreeNode();\n\t\n\tOctreeNode.prototype.reset = function(aabb, options){\n\t    this.children.length = this.data.length = 0;\n\t};\n\t\n\t/**\n\t * Insert data into this node\n\t * @method insert\n\t * @param  {AABB} aabb\n\t * @param  {object} elementData\n\t * @return {boolean} True if successful, otherwise false\n\t */\n\tOctreeNode.prototype.insert = function(aabb, elementData, level){\n\t    var nodeData = this.data;\n\t    level = level || 0;\n\t\n\t    // Ignore objects that do not belong in this node\n\t    if (!this.aabb.contains(aabb)){\n\t        return false; // object cannot be added\n\t    }\n\t\n\t    var children = this.children;\n\t\n\t    if(level < (this.maxDepth || this.root.maxDepth)){\n\t        // Subdivide if there are no children yet\n\t        var subdivided = false;\n\t        if (!children.length){\n\t            this.subdivide();\n\t            subdivided = true;\n\t        }\n\t\n\t        // add to whichever node will accept it\n\t        for (var i = 0; i !== 8; i++) {\n\t            if (children[i].insert(aabb, elementData, level + 1)){\n\t                return true;\n\t            }\n\t        }\n\t\n\t        if(subdivided){\n\t            // No children accepted! Might as well just remove em since they contain none\n\t            children.length = 0;\n\t        }\n\t    }\n\t\n\t    // Too deep, or children didnt want it. add it in current node\n\t    nodeData.push(elementData);\n\t\n\t    return true;\n\t};\n\t\n\tvar halfDiagonal = new Vec3();\n\t\n\t/**\n\t * Create 8 equally sized children nodes and put them in the .children array.\n\t * @method subdivide\n\t */\n\tOctreeNode.prototype.subdivide = function() {\n\t    var aabb = this.aabb;\n\t    var l = aabb.lowerBound;\n\t    var u = aabb.upperBound;\n\t\n\t    var children = this.children;\n\t\n\t    children.push(\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n\t        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n\t    );\n\t\n\t    u.vsub(l, halfDiagonal);\n\t    halfDiagonal.scale(0.5, halfDiagonal);\n\t\n\t    var root = this.root || this;\n\t\n\t    for (var i = 0; i !== 8; i++) {\n\t        var child = children[i];\n\t\n\t        // Set current node as root\n\t        child.root = root;\n\t\n\t        // Compute bounds\n\t        var lowerBound = child.aabb.lowerBound;\n\t        lowerBound.x *= halfDiagonal.x;\n\t        lowerBound.y *= halfDiagonal.y;\n\t        lowerBound.z *= halfDiagonal.z;\n\t\n\t        lowerBound.vadd(l, lowerBound);\n\t\n\t        // Upper bound is always lower bound + halfDiagonal\n\t        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n\t    }\n\t};\n\t\n\t/**\n\t * Get all data, potentially within an AABB\n\t * @method aabbQuery\n\t * @param  {AABB} aabb\n\t * @param  {array} result\n\t * @return {array} The \"result\" object\n\t */\n\tOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\t\n\t    var nodeData = this.data;\n\t\n\t    // abort if the range does not intersect this node\n\t    // if (!this.aabb.overlaps(aabb)){\n\t    //     return result;\n\t    // }\n\t\n\t    // Add objects at this level\n\t    // Array.prototype.push.apply(result, nodeData);\n\t\n\t    // Add child data\n\t    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\t    var children = this.children;\n\t\n\t\n\t    // for (var i = 0, N = this.children.length; i !== N; i++) {\n\t    //     children[i].aabbQuery(aabb, result);\n\t    // }\n\t\n\t    var queue = [this];\n\t    while (queue.length) {\n\t        var node = queue.pop();\n\t        if (node.aabb.overlaps(aabb)){\n\t            Array.prototype.push.apply(result, node.data);\n\t        }\n\t        Array.prototype.push.apply(queue, node.children);\n\t    }\n\t\n\t    return result;\n\t};\n\t\n\tvar tmpAABB = new AABB();\n\t\n\t/**\n\t * Get all data, potentially intersected by a ray.\n\t * @method rayQuery\n\t * @param  {Ray} ray\n\t * @param  {Transform} treeTransform\n\t * @param  {array} result\n\t * @return {array} The \"result\" object\n\t */\n\tOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\t\n\t    // Use aabb query for now.\n\t    // @todo implement real ray query which needs less lookups\n\t    ray.getAABB(tmpAABB);\n\t    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n\t    this.aabbQuery(tmpAABB, result);\n\t\n\t    return result;\n\t};\n\t\n\t/**\n\t * @method removeEmptyNodes\n\t */\n\tOctreeNode.prototype.removeEmptyNodes = function() {\n\t    var queue = [this];\n\t    while (queue.length) {\n\t        var node = queue.pop();\n\t        for (var i = node.children.length - 1; i >= 0; i--) {\n\t            if(!node.children[i].data.length){\n\t                node.children.splice(i, 1);\n\t            }\n\t        }\n\t        Array.prototype.push.apply(queue, node.children);\n\t    }\n\t};\n\n\n/***/ },\n/* 417 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* global performance */\n\t\n\tmodule.exports = World;\n\t\n\tvar Shape = __webpack_require__(372);\n\tvar Vec3 = __webpack_require__(366);\n\tvar Quaternion = __webpack_require__(373);\n\tvar GSSolver = __webpack_require__(398);\n\tvar Vec3Pool = __webpack_require__(388);\n\tvar ContactEquation = __webpack_require__(381);\n\tvar FrictionEquation = __webpack_require__(390);\n\tvar Narrowphase = __webpack_require__(384);\n\tvar EventTarget = __webpack_require__(371);\n\tvar ArrayCollisionMatrix = __webpack_require__(369);\n\tvar Material = __webpack_require__(374);\n\tvar ContactMaterial = __webpack_require__(395);\n\tvar Body = __webpack_require__(370);\n\tvar TupleDictionary = __webpack_require__(418);\n\tvar RaycastResult = __webpack_require__(386);\n\tvar AABB = __webpack_require__(365);\n\tvar Ray = __webpack_require__(385);\n\tvar NaiveBroadphase = __webpack_require__(404);\n\t\n\t/**\n\t * The physics world\n\t * @class World\n\t * @constructor\n\t * @extends EventTarget\n\t */\n\tfunction World(){\n\t    EventTarget.apply(this);\n\t\n\t    /**\n\t     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n\t     * @property {Number} dt\n\t     */\n\t    this.dt = -1;\n\t\n\t    /**\n\t     * Makes bodies go to sleep when they've been inactive\n\t     * @property allowSleep\n\t     * @type {Boolean}\n\t     */\n\t    this.allowSleep = false;\n\t\n\t    /**\n\t     * All the current contacts (instances of ContactEquation) in the world.\n\t     * @property contacts\n\t     * @type {Array}\n\t     */\n\t    this.contacts = [];\n\t    this.frictionEquations = [];\n\t\n\t    /**\n\t     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n\t     * @property quatNormalizeSkip\n\t     * @type {Number}\n\t     */\n\t    this.quatNormalizeSkip = 0;\n\t\n\t    /**\n\t     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n\t     * @property quatNormalizeFast\n\t     * @type {Boolean}\n\t     * @see Quaternion.normalizeFast\n\t     * @see Quaternion.normalize\n\t     */\n\t    this.quatNormalizeFast = false;\n\t\n\t    /**\n\t     * The wall-clock time since simulation start\n\t     * @property time\n\t     * @type {Number}\n\t     */\n\t    this.time = 0.0;\n\t\n\t    /**\n\t     * Number of timesteps taken since start\n\t     * @property stepnumber\n\t     * @type {Number}\n\t     */\n\t    this.stepnumber = 0;\n\t\n\t    /// Default and last timestep sizes\n\t    this.default_dt = 1/60;\n\t\n\t    this.nextId = 0;\n\t    /**\n\t     * @property gravity\n\t     * @type {Vec3}\n\t     */\n\t    this.gravity = new Vec3();\n\t\n\t    /**\n\t     * @property broadphase\n\t     * @type {Broadphase}\n\t     */\n\t    this.broadphase = new NaiveBroadphase();\n\t\n\t    /**\n\t     * @property bodies\n\t     * @type {Array}\n\t     */\n\t    this.bodies = [];\n\t\n\t    /**\n\t     * @property solver\n\t     * @type {Solver}\n\t     */\n\t    this.solver = new GSSolver();\n\t\n\t    /**\n\t     * @property constraints\n\t     * @type {Array}\n\t     */\n\t    this.constraints = [];\n\t\n\t    /**\n\t     * @property narrowphase\n\t     * @type {Narrowphase}\n\t     */\n\t    this.narrowphase = new Narrowphase(this);\n\t\n\t    /**\n\t     * @property {ArrayCollisionMatrix} collisionMatrix\n\t\t * @type {ArrayCollisionMatrix}\n\t\t */\n\t\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\t\n\t    /**\n\t     * CollisionMatrix from the previous step.\n\t     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t\t * @type {ArrayCollisionMatrix}\n\t\t */\n\t\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\t\n\t    /**\n\t     * All added materials\n\t     * @property materials\n\t     * @type {Array}\n\t     */\n\t    this.materials = [];\n\t\n\t    /**\n\t     * @property contactmaterials\n\t     * @type {Array}\n\t     */\n\t    this.contactmaterials = [];\n\t\n\t    /**\n\t     * Used to look up a ContactMaterial given two instances of Material.\n\t     * @property {TupleDictionary} contactMaterialTable\n\t     */\n\t    this.contactMaterialTable = new TupleDictionary();\n\t\n\t    this.defaultMaterial = new Material(\"default\");\n\t\n\t    /**\n\t     * This contact material is used if no suitable contactmaterial is found for a contact.\n\t     * @property defaultContactMaterial\n\t     * @type {ContactMaterial}\n\t     */\n\t    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\t\n\t    /**\n\t     * @property doProfiling\n\t     * @type {Boolean}\n\t     */\n\t    this.doProfiling = false;\n\t\n\t    /**\n\t     * @property profile\n\t     * @type {Object}\n\t     */\n\t    this.profile = {\n\t        solve:0,\n\t        makeContactConstraints:0,\n\t        broadphase:0,\n\t        integrate:0,\n\t        narrowphase:0,\n\t    };\n\t\n\t    /**\n\t     * @property subsystems\n\t     * @type {Array}\n\t     */\n\t    this.subsystems = [];\n\t\n\t    this.addBodyEvent = {\n\t        type:\"addBody\",\n\t        body : null,\n\t    };\n\t\n\t    this.removeBodyEvent = {\n\t        type:\"removeBody\",\n\t        body : null,\n\t    };\n\t}\n\tWorld.prototype = new EventTarget();\n\t\n\t// Temp stuff\n\tvar tmpAABB1 = new AABB();\n\tvar tmpArray1 = [];\n\tvar tmpRay = new Ray();\n\t\n\t/**\n\t * Get the contact material between materials m1 and m2\n\t * @method getContactMaterial\n\t * @param {Material} m1\n\t * @param {Material} m2\n\t * @return {ContactMaterial} The contact material if it was found.\n\t */\n\tWorld.prototype.getContactMaterial = function(m1,m2){\n\t    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n\t};\n\t\n\t/**\n\t * Get number of objects in the world.\n\t * @method numObjects\n\t * @return {Number}\n\t * @deprecated\n\t */\n\tWorld.prototype.numObjects = function(){\n\t    return this.bodies.length;\n\t};\n\t\n\t/**\n\t * Store old collision state info\n\t * @method collisionMatrixTick\n\t */\n\tWorld.prototype.collisionMatrixTick = function(){\n\t\tvar temp = this.collisionMatrixPrevious;\n\t\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\t\tthis.collisionMatrix = temp;\n\t\tthis.collisionMatrix.reset();\n\t};\n\t\n\t/**\n\t * Add a rigid body to the simulation.\n\t * @method add\n\t * @param {Body} body\n\t * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n\t * @todo Adding an array of bodies should be possible. This would save some loops too\n\t * @deprecated Use .addBody instead\n\t */\n\tWorld.prototype.add = World.prototype.addBody = function(body){\n\t    if(this.bodies.indexOf(body) !== -1){\n\t        return;\n\t    }\n\t    body.index = this.bodies.length;\n\t    this.bodies.push(body);\n\t    body.world = this;\n\t    body.initPosition.copy(body.position);\n\t    body.initVelocity.copy(body.velocity);\n\t    body.timeLastSleepy = this.time;\n\t    if(body instanceof Body){\n\t        body.initAngularVelocity.copy(body.angularVelocity);\n\t        body.initQuaternion.copy(body.quaternion);\n\t    }\n\t\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n\t    this.addBodyEvent.body = body;\n\t    this.dispatchEvent(this.addBodyEvent);\n\t};\n\t\n\t/**\n\t * Add a constraint to the simulation.\n\t * @method addConstraint\n\t * @param {Constraint} c\n\t */\n\tWorld.prototype.addConstraint = function(c){\n\t    this.constraints.push(c);\n\t};\n\t\n\t/**\n\t * Removes a constraint\n\t * @method removeConstraint\n\t * @param {Constraint} c\n\t */\n\tWorld.prototype.removeConstraint = function(c){\n\t    var idx = this.constraints.indexOf(c);\n\t    if(idx!==-1){\n\t        this.constraints.splice(idx,1);\n\t    }\n\t};\n\t\n\t/**\n\t * Raycast test\n\t * @method rayTest\n\t * @param {Vec3} from\n\t * @param {Vec3} to\n\t * @param {Function|RaycastResult} result\n\t * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n\t */\n\tWorld.prototype.rayTest = function(from, to, result){\n\t    if(result instanceof RaycastResult){\n\t        // Do raycastclosest\n\t        this.raycastClosest(from, to, {\n\t            skipBackfaces: true\n\t        }, result);\n\t    } else {\n\t        // Do raycastAll\n\t        this.raycastAll(from, to, {\n\t            skipBackfaces: true\n\t        }, result);\n\t    }\n\t};\n\t\n\t/**\n\t * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n\t * @method raycastAll\n\t * @param  {Vec3} from\n\t * @param  {Vec3} to\n\t * @param  {Object} options\n\t * @param  {number} [options.collisionFilterMask=-1]\n\t * @param  {number} [options.collisionFilterGroup=-1]\n\t * @param  {boolean} [options.skipBackfaces=false]\n\t * @param  {boolean} [options.checkCollisionResponse=true]\n\t * @param  {Function} callback\n\t * @return {boolean} True if any body was hit.\n\t */\n\tWorld.prototype.raycastAll = function(from, to, options, callback){\n\t    options.mode = Ray.ALL;\n\t    options.from = from;\n\t    options.to = to;\n\t    options.callback = callback;\n\t    return tmpRay.intersectWorld(this, options);\n\t};\n\t\n\t/**\n\t * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n\t * @method raycastAny\n\t * @param  {Vec3} from\n\t * @param  {Vec3} to\n\t * @param  {Object} options\n\t * @param  {number} [options.collisionFilterMask=-1]\n\t * @param  {number} [options.collisionFilterGroup=-1]\n\t * @param  {boolean} [options.skipBackfaces=false]\n\t * @param  {boolean} [options.checkCollisionResponse=true]\n\t * @param  {RaycastResult} result\n\t * @return {boolean} True if any body was hit.\n\t */\n\tWorld.prototype.raycastAny = function(from, to, options, result){\n\t    options.mode = Ray.ANY;\n\t    options.from = from;\n\t    options.to = to;\n\t    options.result = result;\n\t    return tmpRay.intersectWorld(this, options);\n\t};\n\t\n\t/**\n\t * Ray cast, and return information of the closest hit.\n\t * @method raycastClosest\n\t * @param  {Vec3} from\n\t * @param  {Vec3} to\n\t * @param  {Object} options\n\t * @param  {number} [options.collisionFilterMask=-1]\n\t * @param  {number} [options.collisionFilterGroup=-1]\n\t * @param  {boolean} [options.skipBackfaces=false]\n\t * @param  {boolean} [options.checkCollisionResponse=true]\n\t * @param  {RaycastResult} result\n\t * @return {boolean} True if any body was hit.\n\t */\n\tWorld.prototype.raycastClosest = function(from, to, options, result){\n\t    options.mode = Ray.CLOSEST;\n\t    options.from = from;\n\t    options.to = to;\n\t    options.result = result;\n\t    return tmpRay.intersectWorld(this, options);\n\t};\n\t\n\t/**\n\t * Remove a rigid body from the simulation.\n\t * @method remove\n\t * @param {Body} body\n\t * @deprecated Use .removeBody instead\n\t */\n\tWorld.prototype.remove = function(body){\n\t    body.world = null;\n\t    var n = this.bodies.length-1,\n\t        bodies = this.bodies,\n\t        idx = bodies.indexOf(body);\n\t    if(idx !== -1){\n\t        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\t\n\t        // Recompute index\n\t        for(var i=0; i!==bodies.length; i++){\n\t            bodies[i].index = i;\n\t        }\n\t\n\t        this.collisionMatrix.setNumObjects(n);\n\t        this.removeBodyEvent.body = body;\n\t        this.dispatchEvent(this.removeBodyEvent);\n\t    }\n\t};\n\t\n\t/**\n\t * Remove a rigid body from the simulation.\n\t * @method removeBody\n\t * @param {Body} body\n\t */\n\tWorld.prototype.removeBody = World.prototype.remove;\n\t\n\t/**\n\t * Adds a material to the World.\n\t * @method addMaterial\n\t * @param {Material} m\n\t * @todo Necessary?\n\t */\n\tWorld.prototype.addMaterial = function(m){\n\t    this.materials.push(m);\n\t};\n\t\n\t/**\n\t * Adds a contact material to the World\n\t * @method addContactMaterial\n\t * @param {ContactMaterial} cmat\n\t */\n\tWorld.prototype.addContactMaterial = function(cmat) {\n\t\n\t    // Add contact material\n\t    this.contactmaterials.push(cmat);\n\t\n\t    // Add current contact material to the material table\n\t    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n\t};\n\t\n\t// performance.now()\n\tif(typeof performance === 'undefined'){\n\t    performance = {};\n\t}\n\tif(!performance.now){\n\t    var nowOffset = Date.now();\n\t    if (performance.timing && performance.timing.navigationStart){\n\t        nowOffset = performance.timing.navigationStart;\n\t    }\n\t    performance.now = function(){\n\t        return Date.now() - nowOffset;\n\t    };\n\t}\n\t\n\tvar step_tmp1 = new Vec3();\n\t\n\t/**\n\t * Step the physics world forward in time.\n\t *\n\t * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n\t *\n\t * @method step\n\t * @param {Number} dt                       The fixed time step size to use.\n\t * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n\t * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n\t *\n\t * @example\n\t *     // fixed timestepping without interpolation\n\t *     world.step(1/60);\n\t *\n\t * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n\t */\n\tWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n\t    maxSubSteps = maxSubSteps || 10;\n\t    timeSinceLastCalled = timeSinceLastCalled || 0;\n\t\n\t    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\t\n\t        this.internalStep(dt);\n\t\n\t        // Increment time\n\t        this.time += dt;\n\t\n\t    } else {\n\t\n\t        // Compute the number of fixed steps we should have taken since the last step\n\t        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n\t        internalSteps = Math.min(internalSteps,maxSubSteps);\n\t\n\t        // Do some fixed steps to catch up\n\t        var t0 = performance.now();\n\t        for(var i=0; i!==internalSteps; i++){\n\t            this.internalStep(dt);\n\t            if(performance.now() - t0 > dt * 1000){\n\t                // We are slower than real-time. Better bail out.\n\t                break;\n\t            }\n\t        }\n\t\n\t        // Increment internal clock\n\t        this.time += timeSinceLastCalled;\n\t\n\t        // Compute \"Left over\" time step\n\t        var h = this.time % dt;\n\t        var h_div_dt = h / dt;\n\t        var interpvelo = step_tmp1;\n\t        var bodies = this.bodies;\n\t\n\t        for(var j=0; j !== bodies.length; j++){\n\t            var b = bodies[j];\n\t            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\t\n\t                // Interpolate\n\t                b.position.vsub(b.previousPosition, interpvelo);\n\t                interpvelo.scale(h_div_dt, interpvelo);\n\t                b.position.vadd(interpvelo, b.interpolatedPosition);\n\t\n\t                // TODO: interpolate quaternion\n\t                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\t\n\t            } else {\n\t\n\t                // For static bodies, just copy. Who else will do it?\n\t                b.interpolatedPosition.copy(b.position);\n\t                b.interpolatedQuaternion.copy(b.quaternion);\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Step the simulation\n\t * @method step\n\t * @param {Number} dt\n\t */\n\tvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n\t    World_step_preStepEvent = {type:\"preStep\"},\n\t    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n\t    World_step_oldContacts = [], // Pools for unused objects\n\t    World_step_frictionEquationPool = [],\n\t    World_step_p1 = [], // Reusable arrays for collision pairs\n\t    World_step_p2 = [],\n\t    World_step_gvec = new Vec3(), // Temporary vectors and quats\n\t    World_step_vi = new Vec3(),\n\t    World_step_vj = new Vec3(),\n\t    World_step_wi = new Vec3(),\n\t    World_step_wj = new Vec3(),\n\t    World_step_t1 = new Vec3(),\n\t    World_step_t2 = new Vec3(),\n\t    World_step_rixn = new Vec3(),\n\t    World_step_rjxn = new Vec3(),\n\t    World_step_step_q = new Quaternion(),\n\t    World_step_step_w = new Quaternion(),\n\t    World_step_step_wq = new Quaternion(),\n\t    invI_tau_dt = new Vec3();\n\tWorld.prototype.internalStep = function(dt){\n\t    this.dt = dt;\n\t\n\t    var world = this,\n\t        that = this,\n\t        contacts = this.contacts,\n\t        p1 = World_step_p1,\n\t        p2 = World_step_p2,\n\t        N = this.numObjects(),\n\t        bodies = this.bodies,\n\t        solver = this.solver,\n\t        gravity = this.gravity,\n\t        doProfiling = this.doProfiling,\n\t        profile = this.profile,\n\t        DYNAMIC = Body.DYNAMIC,\n\t        profilingStart,\n\t        constraints = this.constraints,\n\t        frictionEquationPool = World_step_frictionEquationPool,\n\t        gnorm = gravity.norm(),\n\t        gx = gravity.x,\n\t        gy = gravity.y,\n\t        gz = gravity.z,\n\t        i=0;\n\t\n\t    if(doProfiling){\n\t        profilingStart = performance.now();\n\t    }\n\t\n\t    // Add gravity to all objects\n\t    for(i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n\t            var f = bi.force, m = bi.mass;\n\t            f.x += m*gx;\n\t            f.y += m*gy;\n\t            f.z += m*gz;\n\t        }\n\t    }\n\t\n\t    // Update subsystems\n\t    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n\t        this.subsystems[i].update();\n\t    }\n\t\n\t    // Collision detection\n\t    if(doProfiling){ profilingStart = performance.now(); }\n\t    p1.length = 0; // Clean up pair arrays from last step\n\t    p2.length = 0;\n\t    this.broadphase.collisionPairs(this,p1,p2);\n\t    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\t\n\t    // Remove constrained pairs with collideConnected == false\n\t    var Nconstraints = constraints.length;\n\t    for(i=0; i!==Nconstraints; i++){\n\t        var c = constraints[i];\n\t        if(!c.collideConnected){\n\t            for(var j = p1.length-1; j>=0; j-=1){\n\t                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n\t                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n\t                    p1.splice(j, 1);\n\t                    p2.splice(j, 1);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    this.collisionMatrixTick();\n\t\n\t    // Generate contacts\n\t    if(doProfiling){ profilingStart = performance.now(); }\n\t    var oldcontacts = World_step_oldContacts;\n\t    var NoldContacts = contacts.length;\n\t\n\t    for(i=0; i!==NoldContacts; i++){\n\t        oldcontacts.push(contacts[i]);\n\t    }\n\t    contacts.length = 0;\n\t\n\t    // Transfer FrictionEquation from current list to the pool for reuse\n\t    var NoldFrictionEquations = this.frictionEquations.length;\n\t    for(i=0; i!==NoldFrictionEquations; i++){\n\t        frictionEquationPool.push(this.frictionEquations[i]);\n\t    }\n\t    this.frictionEquations.length = 0;\n\t\n\t    this.narrowphase.getContacts(\n\t        p1,\n\t        p2,\n\t        this,\n\t        contacts,\n\t        oldcontacts, // To be reused\n\t        this.frictionEquations,\n\t        frictionEquationPool\n\t    );\n\t\n\t    if(doProfiling){\n\t        profile.narrowphase = performance.now() - profilingStart;\n\t    }\n\t\n\t    // Loop over all collisions\n\t    if(doProfiling){\n\t        profilingStart = performance.now();\n\t    }\n\t\n\t    // Add all friction eqs\n\t    for (var i = 0; i < this.frictionEquations.length; i++) {\n\t        solver.addEquation(this.frictionEquations[i]);\n\t    }\n\t\n\t    var ncontacts = contacts.length;\n\t    for(var k=0; k!==ncontacts; k++){\n\t\n\t        // Current contact\n\t        var c = contacts[k];\n\t\n\t        // Get current collision indeces\n\t        var bi = c.bi,\n\t            bj = c.bj,\n\t            si = c.si,\n\t            sj = c.sj;\n\t\n\t        // Get collision properties\n\t        var cm;\n\t        if(bi.material && bj.material){\n\t            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n\t        } else {\n\t            cm = this.defaultContactMaterial;\n\t        }\n\t\n\t        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\t\n\t        var mu = cm.friction;\n\t        // c.restitution = cm.restitution;\n\t\n\t        // If friction or restitution were specified in the material, use them\n\t        if(bi.material && bj.material){\n\t            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n\t                mu = bi.material.friction * bj.material.friction;\n\t            }\n\t\n\t            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n\t                c.restitution = bi.material.restitution * bj.material.restitution;\n\t            }\n\t        }\n\t\n\t\t\t// c.setSpookParams(\n\t  //           cm.contactEquationStiffness,\n\t  //           cm.contactEquationRelaxation,\n\t  //           dt\n\t  //       );\n\t\n\t\t\tsolver.addEquation(c);\n\t\n\t\t\t// // Add friction constraint equation\n\t\t\t// if(mu > 0){\n\t\n\t\t\t// \t// Create 2 tangent equations\n\t\t\t// \tvar mug = mu * gnorm;\n\t\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t\t// \tif(reducedMass > 0){\n\t\t\t// \t\treducedMass = 1/reducedMass;\n\t\t\t// \t}\n\t\t\t// \tvar pool = frictionEquationPool;\n\t\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t\t// \tthis.frictionEquations.push(c1, c2);\n\t\n\t\t\t// \tc1.bi = c2.bi = bi;\n\t\t\t// \tc1.bj = c2.bj = bj;\n\t\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\t\n\t\t\t// \t// Copy over the relative vectors\n\t\t\t// \tc1.ri.copy(c.ri);\n\t\t\t// \tc1.rj.copy(c.rj);\n\t\t\t// \tc2.ri.copy(c.ri);\n\t\t\t// \tc2.rj.copy(c.rj);\n\t\n\t\t\t// \t// Construct tangents\n\t\t\t// \tc.ni.tangents(c1.t, c2.t);\n\t\n\t  //           // Set spook params\n\t  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\t  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\t\n\t  //           c1.enabled = c2.enabled = c.enabled;\n\t\n\t\t\t// \t// Add equations to solver\n\t\t\t// \tsolver.addEquation(c1);\n\t\t\t// \tsolver.addEquation(c2);\n\t\t\t// }\n\t\n\t        if( bi.allowSleep &&\n\t            bi.type === Body.DYNAMIC &&\n\t            bi.sleepState  === Body.SLEEPING &&\n\t            bj.sleepState  === Body.AWAKE &&\n\t            bj.type !== Body.STATIC\n\t        ){\n\t            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n\t            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n\t            if(speedSquaredB >= speedLimitSquaredB*2){\n\t                bi._wakeUpAfterNarrowphase = true;\n\t            }\n\t        }\n\t\n\t        if( bj.allowSleep &&\n\t            bj.type === Body.DYNAMIC &&\n\t            bj.sleepState  === Body.SLEEPING &&\n\t            bi.sleepState  === Body.AWAKE &&\n\t            bi.type !== Body.STATIC\n\t        ){\n\t            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n\t            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n\t            if(speedSquaredA >= speedLimitSquaredA*2){\n\t                bj._wakeUpAfterNarrowphase = true;\n\t            }\n\t        }\n\t\n\t        // Now we know that i and j are in contact. Set collision matrix state\n\t\t\tthis.collisionMatrix.set(bi, bj, true);\n\t\n\t        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n\t            // First contact!\n\t            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n\t            World_step_collideEvent.body = bj;\n\t            World_step_collideEvent.contact = c;\n\t            bi.dispatchEvent(World_step_collideEvent);\n\t\n\t            World_step_collideEvent.body = bi;\n\t            bj.dispatchEvent(World_step_collideEvent);\n\t        }\n\t    }\n\t    if(doProfiling){\n\t        profile.makeContactConstraints = performance.now() - profilingStart;\n\t        profilingStart = performance.now();\n\t    }\n\t\n\t    // Wake up bodies\n\t    for(i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        if(bi._wakeUpAfterNarrowphase){\n\t            bi.wakeUp();\n\t            bi._wakeUpAfterNarrowphase = false;\n\t        }\n\t    }\n\t\n\t    // Add user-added constraints\n\t    var Nconstraints = constraints.length;\n\t    for(i=0; i!==Nconstraints; i++){\n\t        var c = constraints[i];\n\t        c.update();\n\t        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n\t            var eq = c.equations[j];\n\t            solver.addEquation(eq);\n\t        }\n\t    }\n\t\n\t    // Solve the constrained system\n\t    solver.solve(dt,this);\n\t\n\t    if(doProfiling){\n\t        profile.solve = performance.now() - profilingStart;\n\t    }\n\t\n\t    // Remove all contacts from solver\n\t    solver.removeAllEquations();\n\t\n\t    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\t    var pow = Math.pow;\n\t    for(i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n\t            var ld = pow(1.0 - bi.linearDamping,dt);\n\t            var v = bi.velocity;\n\t            v.mult(ld,v);\n\t            var av = bi.angularVelocity;\n\t            if(av){\n\t                var ad = pow(1.0 - bi.angularDamping,dt);\n\t                av.mult(ad,av);\n\t            }\n\t        }\n\t    }\n\t\n\t    this.dispatchEvent(World_step_preStepEvent);\n\t\n\t    // Invoke pre-step callbacks\n\t    for(i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        if(bi.preStep){\n\t            bi.preStep.call(bi);\n\t        }\n\t    }\n\t\n\t    // Leap frog\n\t    // vnew = v + h*f/m\n\t    // xnew = x + h*vnew\n\t    if(doProfiling){\n\t        profilingStart = performance.now();\n\t    }\n\t    var q = World_step_step_q;\n\t    var w = World_step_step_w;\n\t    var wq = World_step_step_wq;\n\t    var stepnumber = this.stepnumber;\n\t    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n\t    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n\t    var quatNormalizeFast = this.quatNormalizeFast;\n\t    var half_dt = dt * 0.5;\n\t    var PLANE = Shape.types.PLANE,\n\t        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\t\n\t    for(i=0; i!==N; i++){\n\t        var b = bodies[i],\n\t            force = b.force,\n\t            tau = b.torque;\n\t        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n\t            var velo = b.velocity,\n\t                angularVelo = b.angularVelocity,\n\t                pos = b.position,\n\t                quat = b.quaternion,\n\t                invMass = b.invMass,\n\t                invInertia = b.invInertiaWorld;\n\t\n\t            velo.x += force.x * invMass * dt;\n\t            velo.y += force.y * invMass * dt;\n\t            velo.z += force.z * invMass * dt;\n\t\n\t            if(b.angularVelocity){\n\t                invInertia.vmult(tau,invI_tau_dt);\n\t                invI_tau_dt.mult(dt,invI_tau_dt);\n\t                invI_tau_dt.vadd(angularVelo,angularVelo);\n\t            }\n\t\n\t            // Use new velocity  - leap frog\n\t            pos.x += velo.x * dt;\n\t            pos.y += velo.y * dt;\n\t            pos.z += velo.z * dt;\n\t\n\t            if(b.angularVelocity){\n\t                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n\t                w.mult(quat,wq);\n\t                quat.x += half_dt * wq.x;\n\t                quat.y += half_dt * wq.y;\n\t                quat.z += half_dt * wq.z;\n\t                quat.w += half_dt * wq.w;\n\t                if(quatNormalize){\n\t                    if(quatNormalizeFast){\n\t                        quat.normalizeFast();\n\t                    } else {\n\t                        quat.normalize();\n\t                    }\n\t                }\n\t            }\n\t\n\t            if(b.aabb){\n\t                b.aabbNeedsUpdate = true;\n\t            }\n\t\n\t            // Update world inertia\n\t            if(b.updateInertiaWorld){\n\t                b.updateInertiaWorld();\n\t            }\n\t        }\n\t    }\n\t    this.clearForces();\n\t\n\t    this.broadphase.dirty = true;\n\t\n\t    if(doProfiling){\n\t        profile.integrate = performance.now() - profilingStart;\n\t    }\n\t\n\t    // Update world time\n\t    this.time += dt;\n\t    this.stepnumber += 1;\n\t\n\t    this.dispatchEvent(World_step_postStepEvent);\n\t\n\t    // Invoke post-step callbacks\n\t    for(i=0; i!==N; i++){\n\t        var bi = bodies[i];\n\t        var postStep = bi.postStep;\n\t        if(postStep){\n\t            postStep.call(bi);\n\t        }\n\t    }\n\t\n\t    // Sleeping update\n\t    if(this.allowSleep){\n\t        for(i=0; i!==N; i++){\n\t            bodies[i].sleepTick(this.time);\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Sets all body forces in the world to zero.\n\t * @method clearForces\n\t */\n\tWorld.prototype.clearForces = function(){\n\t    var bodies = this.bodies;\n\t    var N = bodies.length;\n\t    for(var i=0; i !== N; i++){\n\t        var b = bodies[i],\n\t            force = b.force,\n\t            tau = b.torque;\n\t\n\t        b.force.set(0,0,0);\n\t        b.torque.set(0,0,0);\n\t    }\n\t};\n\n\n/***/ },\n/* 418 */\n/***/ function(module, exports) {\n\n\tmodule.exports = TupleDictionary;\n\t\n\t/**\n\t * @class TupleDictionary\n\t * @constructor\n\t */\n\tfunction TupleDictionary() {\n\t\n\t    /**\n\t     * The data storage\n\t     * @property data\n\t     * @type {Object}\n\t     */\n\t    this.data = { keys:[] };\n\t}\n\t\n\t/**\n\t * @method get\n\t * @param  {Number} i\n\t * @param  {Number} j\n\t * @return {Number}\n\t */\n\tTupleDictionary.prototype.get = function(i, j) {\n\t    if (i > j) {\n\t        // swap\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t    }\n\t    return this.data[i+'-'+j];\n\t};\n\t\n\t/**\n\t * @method set\n\t * @param  {Number} i\n\t * @param  {Number} j\n\t * @param {Number} value\n\t */\n\tTupleDictionary.prototype.set = function(i, j, value) {\n\t    if (i > j) {\n\t        var temp = j;\n\t        j = i;\n\t        i = temp;\n\t    }\n\t    var key = i+'-'+j;\n\t\n\t    // Check if key already exists\n\t    if(!this.get(i,j)){\n\t        this.data.keys.push(key);\n\t    }\n\t\n\t    this.data[key] = value;\n\t};\n\t\n\t/**\n\t * @method reset\n\t */\n\tTupleDictionary.prototype.reset = function() {\n\t    var data = this.data,\n\t        keys = data.keys;\n\t    while(keys.length > 0){\n\t        var key = keys.pop();\n\t        delete data[key];\n\t    }\n\t};\n\n\n/***/ },\n/* 419 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Cannon = __webpack_require__(363);\n\t\n\tvar _Cannon2 = _interopRequireDefault(_Cannon);\n\t\n\tvar _MouseInput = __webpack_require__(355);\n\t\n\tvar _MouseInput2 = _interopRequireDefault(_MouseInput);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _PickableMesh = __webpack_require__(420);\n\t\n\tvar _PickableMesh2 = _interopRequireDefault(_PickableMesh);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar backVector = new _three2.default.Vector3(0, 0, -1);\n\tvar dragPlane = new _three2.default.Plane();\n\t\n\tvar PhysicsMousePick = function (_ExampleBase) {\n\t  (0, _inherits3.default)(PhysicsMousePick, _ExampleBase);\n\t\n\t  function PhysicsMousePick(props, context) {\n\t    (0, _classCallCheck3.default)(this, PhysicsMousePick);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PhysicsMousePick).call(this, props, context));\n\t\n\t    _this._onMeshMouseDown = function (bodyIndex, intersection) {\n\t      var camera = _this.refs.camera;\n\t\n\t      var pos = intersection.point;\n\t\n\t      _this.setState((0, _extends3.default)({}, _this._setClickMarker(pos.x, pos.y, pos.z)));\n\t\n\t      dragPlane.setFromNormalAndCoplanarPoint(backVector.clone().applyQuaternion(camera.quaternion), pos);\n\t\n\t      _this._addMouseConstraint(pos, bodyIndex);\n\t\n\t      window.addEventListener('mousemove', _this._onMouseMove, false);\n\t      window.addEventListener('mouseup', _this._onMouseUp, false);\n\t    };\n\t\n\t    _this._onMouseUp = function () {\n\t      window.removeEventListener('mousemove', _this._onMouseMove, false);\n\t      window.removeEventListener('mouseup', _this._onMouseUp, false);\n\t\n\t      _this.setState({\n\t        clickMarkerVisible: false\n\t      });\n\t\n\t      _this.world.removeConstraint(_this.mouseConstraint);\n\t      _this.mouseConstraint = false;\n\t    };\n\t\n\t    _this._onMouseMove = function (event) {\n\t      var mouseInput = _this.refs.mouseInput;\n\t\n\t      var ray = mouseInput.getCameraRay(new _three2.default.Vector2(event.clientX, event.clientY));\n\t\n\t      var pos = dragPlane.intersectLine(new _three2.default.Line3(ray.origin, ray.origin.clone().add(ray.direction.clone().multiplyScalar(10000))));\n\t\n\t      if (pos) {\n\t        _this.setState((0, _extends3.default)({}, _this._setClickMarker(pos.x, pos.y, pos.z)));\n\t\n\t        // Move the joint body to a new position\n\t        _this.jointBody.position.set(pos.x, pos.y, pos.z);\n\t        _this.mouseConstraint.update();\n\t      }\n\t    };\n\t\n\t    var N = 100;\n\t\n\t    _this._raycaster = new _three2.default.Raycaster();\n\t\n\t    _this.fog = new _three2.default.Fog(0x001525, 10, 40);\n\t\n\t    var d = 20;\n\t\n\t    _this.lightPosition = new _three2.default.Vector3(d, d, d);\n\t    _this.groundQuaternion = new _three2.default.Quaternion().setFromAxisAngle(new _three2.default.Vector3(1, 0, 0), -Math.PI / 2);\n\t    _this.cameraPosition = new _three2.default.Vector3(10, 2, 0);\n\t    _this.cameraQuaternion = new _three2.default.Quaternion().setFromAxisAngle(new _three2.default.Vector3(0, 1, 0), Math.PI / 2);\n\t\n\t    var world = new _Cannon2.default.World();\n\t\n\t    var bodies = [];\n\t    var meshRefs = [];\n\t\n\t    var constrainedBody = undefined;\n\t    var pivot = undefined;\n\t\n\t    var initCannon = function initCannon() {\n\t      world.quatNormalizeSkip = 0;\n\t      world.quatNormalizeFast = false;\n\t\n\t      world.gravity.set(0, -10, 0);\n\t      world.broadphase = new _Cannon2.default.NaiveBroadphase();\n\t\n\t      var mass = 5;\n\t\n\t      var boxShape = new _Cannon2.default.Box(new _Cannon2.default.Vec3(0.25, 0.25, 0.25));\n\t\n\t      var _loop = function _loop(i) {\n\t        var boxBody = new _Cannon2.default.Body({\n\t          mass: mass\n\t        });\n\t\n\t        boxBody.addShape(boxShape);\n\t        boxBody.position.set(-2.5 + Math.random() * 5, 2.5 + Math.random() * 5, -2.5 + Math.random() * 5);\n\t        world.addBody(boxBody);\n\t        bodies.push(boxBody);\n\t\n\t        meshRefs.push(function (mesh) {\n\t          if (mesh) {\n\t            mesh.userData._bodyIndex = i;\n\t\n\t            _this.meshes.push(mesh);\n\t          }\n\t        });\n\t      };\n\t\n\t      for (var i = 0; i < N; ++i) {\n\t        _loop(i);\n\t      }\n\t\n\t      var groundShape = new _Cannon2.default.Plane();\n\t      var groundBody = new _Cannon2.default.Body({ mass: 0 });\n\t\n\t      groundBody.addShape(groundShape);\n\t      groundBody.quaternion.setFromAxisAngle(new _Cannon2.default.Vec3(1, 0, 0), -Math.PI / 2);\n\t\n\t      // WAIT A MINUTE I CAN CREATE A REACT RENDERER FOR CANNON\n\t      // patience is a virtue\n\t      // breathe in breathe out breathe in breathe out\n\t      // let's finish this one first\n\t\n\t      world.addBody(groundBody);\n\t\n\t      var shape = new _Cannon2.default.Sphere(0.1);\n\t      var jointBody = new _Cannon2.default.Body({ mass: 0 });\n\t      jointBody.addShape(shape);\n\t      jointBody.collisionFilterGroup = 0;\n\t      jointBody.collisionFilterMask = 0;\n\t\n\t      world.addBody(jointBody);\n\t\n\t      _this.jointBody = jointBody;\n\t    };\n\t\n\t    initCannon();\n\t\n\t    var timeStep = 1 / 60;\n\t    var updatePhysics = function updatePhysics() {\n\t      // Step the physics world\n\t      world.step(timeStep);\n\t    };\n\t\n\t    var _getMeshStates = function _getMeshStates() {\n\t      return bodies.map(function (_ref, bodyIndex) {\n\t        var position = _ref.position;\n\t        var quaternion = _ref.quaternion;\n\t\n\t        return {\n\t          position: new _three2.default.Vector3().copy(position),\n\t          quaternion: new _three2.default.Quaternion().copy(quaternion),\n\t          ref: meshRefs[bodyIndex]\n\t        };\n\t      });\n\t    };\n\t\n\t    _this._onAnimate = function () {\n\t      updatePhysics();\n\t\n\t      _this.setState({\n\t        meshStates: _getMeshStates()\n\t      });\n\t\n\t      _this.stats.update();\n\t    };\n\t\n\t    _this._addMouseConstraint = function (_ref2, bodyIndex) {\n\t      var x = _ref2.x;\n\t      var y = _ref2.y;\n\t      var z = _ref2.z;\n\t\n\t      // The cannon body constrained by the mouse joint\n\t      constrainedBody = bodies[bodyIndex];\n\t      // Vector to the clicked point, relative to the body\n\t      var v1 = new _Cannon2.default.Vec3(x, y, z).vsub(constrainedBody.position);\n\t      // Apply anti-quaternion to vector to transform it into the local body coordinate system\n\t      var antiRot = constrainedBody.quaternion.inverse();\n\t      pivot = antiRot.vmult(v1); // pivot is not in local body coordinates\n\t      // Move the cannon click marker particle to the click position\n\t      _this.jointBody.position.set(x, y, z);\n\t      // Create a new constraint\n\t      // The pivot for the jointBody is zero\n\t      _this.mouseConstraint = new _Cannon2.default.PointToPointConstraint(constrainedBody, pivot, _this.jointBody, new _Cannon2.default.Vec3(0, 0, 0));\n\t      // Add the t to world\n\t      world.addConstraint(_this.mouseConstraint);\n\t\n\t      _this.world = world;\n\t    };\n\t\n\t    _this.state = {\n\t      clickMarkerVisible: false,\n\t      clickMarkerPosition: new _three2.default.Vector3(),\n\t\n\t      meshStates: _getMeshStates()\n\t    };\n\t\n\t    _this.meshes = [];\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(PhysicsMousePick, [{\n\t    key: '_setClickMarker',\n\t    value: function _setClickMarker(x, y, z) {\n\t      return {\n\t        clickMarkerPosition: new _three2.default.Vector3(x, y, z),\n\t        clickMarkerVisible: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _refs = this.refs;\n\t      var mouseInput = _refs.mouseInput;\n\t      var container = _refs.container;\n\t\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      container.appendChild(this.stats.domElement);\n\t\n\t      if (!mouseInput.isReady()) {\n\t        var _refs2 = this.refs;\n\t        var scene = _refs2.scene;\n\t        var camera = _refs2.camera;\n\t\n\t        mouseInput.ready(scene, container, camera);\n\t        mouseInput.restrictIntersections(this.meshes);\n\t        mouseInput.setActive(false);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate(newProps) {\n\t      var mouseInput = this.refs.mouseInput;\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t\n\t      if (width !== newProps.width || height !== newProps.height) {\n\t        mouseInput.containerResized();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      delete this.world;\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var _props2 = this.props;\n\t      var width = _props2.width;\n\t      var height = _props2.height;\n\t      var _state = this.state;\n\t      var clickMarkerVisible = _state.clickMarkerVisible;\n\t      var clickMarkerPosition = _state.clickMarkerPosition;\n\t      var meshStates = _state.meshStates;\n\t\n\t      var d = 20;\n\t\n\t      var cubeMeshes = meshStates.map(function (_ref3, i) {\n\t        var position = _ref3.position;\n\t        var quaternion = _ref3.quaternion;\n\t\n\t        return _react2.default.createElement(_PickableMesh2.default, {\n\t          key: i,\n\t\n\t          position: position,\n\t          quaternion: quaternion,\n\t\n\t          bodyIndex: i,\n\t\n\t          meshes: _this2.meshes,\n\t\n\t          onMouseDown: _this2._onMeshMouseDown\n\t        });\n\t      });\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        {\n\t          ref: 'container'\n\t        },\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            antialias: true,\n\t            mainCamera: 'camera',\n\t            width: width,\n\t            height: height,\n\t\n\t            onAnimate: this._onAnimate,\n\t\n\t            clearColor: this.fog.color,\n\t\n\t            gammaInput: true,\n\t            gammaOutput: true,\n\t            shadowMapEnabled: true\n\t          },\n\t          _react2.default.createElement('module', {\n\t            ref: 'mouseInput',\n\t            descriptor: _MouseInput2.default\n\t          }),\n\t          _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            _react2.default.createElement('boxGeometry', {\n\t              resourceId: 'cubeGeo',\n\t\n\t              width: 0.5,\n\t              height: 0.5,\n\t              depth: 0.5,\n\t\n\t              widthSegments: 10,\n\t              heightSegments: 10\n\t            }),\n\t            _react2.default.createElement('meshPhongMaterial', {\n\t              resourceId: 'cubeMaterial',\n\t\n\t              color: 0x888888\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            {\n\t              ref: 'scene',\n\t              fog: this.fog\n\t            },\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              name: 'camera',\n\t              fov: 30,\n\t              aspect: width / height,\n\t              near: 0.5,\n\t              far: 10000,\n\t\n\t              position: this.cameraPosition,\n\t              quaternion: this.cameraQuaternion,\n\t\n\t              ref: 'camera'\n\t            }),\n\t            _react2.default.createElement('ambientLight', {\n\t              color: 0x666666\n\t            }),\n\t            _react2.default.createElement('directionalLight', {\n\t              color: 0xffffff,\n\t              intensity: 1.75,\n\t\n\t              castShadow: true,\n\t\n\t              shadowMapWidth: 1024,\n\t              shadowMapHeight: 1024,\n\t\n\t              shadowCameraLeft: -d,\n\t              shadowCameraRight: d,\n\t              shadowCameraTop: d,\n\t              shadowCameraBottom: -d,\n\t\n\t              shadowCameraFar: 3 * d,\n\t              shadowCameraNear: d,\n\t              shadowDarkness: 0.5,\n\t\n\t              position: this.lightPosition\n\t            }),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                castShadow: true,\n\t                receiveShadow: true,\n\t\n\t                quaternion: this.groundQuaternion\n\t              },\n\t              _react2.default.createElement('planeBufferGeometry', {\n\t                width: 100,\n\t                height: 100,\n\t                widthSegments: 1,\n\t                heightSegments: 1\n\t              }),\n\t              _react2.default.createElement('meshLambertMaterial', {\n\t                color: 0x777777\n\t              })\n\t            ),\n\t            cubeMeshes,\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              { // click marker\n\t                visible: clickMarkerVisible,\n\t\n\t                position: clickMarkerPosition\n\t              },\n\t              _react2.default.createElement('sphereGeometry', {\n\t                radius: 0.2,\n\t                widthSegments: 8,\n\t                heightSegments: 8\n\t              }),\n\t              _react2.default.createElement('meshLambertMaterial', {\n\t                color: 0x772211\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return PhysicsMousePick;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = PhysicsMousePick;\n\n/***/ },\n/* 420 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp2;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\tvar PickableMesh = (_temp2 = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(PickableMesh, _React$Component);\n\t\n\t  function PickableMesh() {\n\t    var _Object$getPrototypeO;\n\t\n\t    var _temp, _this, _ret;\n\t\n\t    (0, _classCallCheck3.default)(this, PickableMesh);\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(PickableMesh)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this._onMouseDown = function (event, intersection) {\n\t      event.preventDefault();\n\t\n\t      _this.props.onMouseDown(_this.refs.mesh.userData._bodyIndex, intersection);\n\t    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n\t  }\n\t\n\t  (0, _createClass3.default)(PickableMesh, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var mesh = this.refs.mesh;\n\t      var _props = this.props;\n\t      var bodyIndex = _props.bodyIndex;\n\t      var meshes = _props.meshes;\n\t\n\t      mesh.userData._bodyIndex = bodyIndex;\n\t\n\t      meshes.push(mesh);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      var mesh = this.refs.mesh;\n\t      var meshes = this.props.meshes;\n\t\n\t      meshes.splice(meshes.indexOf(mesh), 1);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props2 = this.props;\n\t      var position = _props2.position;\n\t      var quaternion = _props2.quaternion;\n\t\n\t      return _react2.default.createElement(\n\t        'mesh',\n\t        {\n\t          position: position,\n\t          quaternion: quaternion,\n\t\n\t          ref: 'mesh',\n\t\n\t          castShadow: true,\n\t\n\t          onMouseDown: this._onMouseDown\n\t        },\n\t        _react2.default.createElement('geometryResource', {\n\t          resourceId: 'cubeGeo'\n\t        }),\n\t        _react2.default.createElement('materialResource', {\n\t          resourceId: 'cubeMaterial'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return PickableMesh;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  position: PropTypes.instanceOf(_three2.default.Vector3).isRequired,\n\t  quaternion: PropTypes.instanceOf(_three2.default.Quaternion).isRequired,\n\t  meshes: PropTypes.arrayOf(PropTypes.instanceOf(_three2.default.Mesh)).isRequired,\n\t  bodyIndex: PropTypes.number.isRequired,\n\t\n\t  onMouseDown: PropTypes.func.isRequired\n\t}, _temp2);\n\texports.default = PickableMesh;\n\n/***/ },\n/* 421 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _ExampleBase2 = __webpack_require__(332);\n\t\n\tvar _ExampleBase3 = _interopRequireDefault(_ExampleBase2);\n\t\n\tvar _stats = __webpack_require__(331);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _RotatingCube = __webpack_require__(422);\n\t\n\tvar _RotatingCube2 = _interopRequireDefault(_RotatingCube);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar RotatingCubes = function (_ExampleBase) {\n\t  (0, _inherits3.default)(RotatingCubes, _ExampleBase);\n\t\n\t  function RotatingCubes(props, context) {\n\t    (0, _classCallCheck3.default)(this, RotatingCubes);\n\t\n\t    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RotatingCubes).call(this, props, context));\n\t\n\t    _this._onAnimate = function () {\n\t      _this._updatePhysics();\n\t\n\t      _this._updateGraphics();\n\t\n\t      _this.stats.update();\n\t    };\n\t\n\t    _this._onBodiesSelectChange = function (event) {\n\t      var numBodies = event.target.value;\n\t\n\t      _this.bodies.length = numBodies;\n\t      _this._createBodies();\n\t\n\t      _this.setState({\n\t        numBodies: numBodies,\n\t        meshStates: _this._getMeshStates()\n\t      });\n\t\n\t      _this._updateGraphics();\n\t    };\n\t\n\t    var N = 200;\n\t\n\t    _this.fog = new _three2.default.Fog(0x001525, 10, 40);\n\t\n\t    var d = 20;\n\t\n\t    _this.lightPosition = new _three2.default.Vector3(d, d, d);\n\t    _this.groundQuaternion = new _three2.default.Quaternion().setFromAxisAngle(new _three2.default.Vector3(1, 0, 0), -Math.PI / 2);\n\t    _this.cameraPosition = new _three2.default.Vector3(10, 2, 0);\n\t    _this.cameraQuaternion = new _three2.default.Quaternion().setFromAxisAngle(new _three2.default.Vector3(0, 1, 0), Math.PI / 2);\n\t\n\t    var bodies = [];\n\t    bodies.length = N;\n\t\n\t    _this.bodies = bodies;\n\t\n\t    _this._createBodies();\n\t\n\t    _this.state = {\n\t      numBodies: N,\n\t      meshStates: _this._getMeshStates()\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  (0, _createClass3.default)(RotatingCubes, [{\n\t    key: '_getMeshStates',\n\t    value: function _getMeshStates() {\n\t      return this.bodies.map(function (_ref) {\n\t        var position = _ref.position;\n\t        var quaternion = _ref.quaternion;\n\t\n\t        return {\n\t          position: new _three2.default.Vector3().copy(position),\n\t          quaternion: new _three2.default.Quaternion().copy(quaternion)\n\t        };\n\t      });\n\t    }\n\t  }, {\n\t    key: '_updateGraphics',\n\t    value: function _updateGraphics() {\n\t      this.setState({\n\t        meshStates: this._getMeshStates()\n\t      });\n\t    }\n\t  }, {\n\t    key: '_updatePhysics',\n\t    value: function _updatePhysics() {\n\t      var time = new Date().getTime();\n\t      var bodies = this.bodies;\n\t\n\t      for (var i = 0; i < bodies.length; ++i) {\n\t        var body = bodies[i];\n\t\n\t        var sinTime = Math.sin(time * body.timeScale);\n\t\n\t        body.quaternion.multiply(body.rotationDeltaPerFrame);\n\t\n\t        var movementPerFrame = body.movementPerFrame;\n\t\n\t        body.position.copy(body.startPosition.clone().add(movementPerFrame.clone().multiplyScalar(sinTime)));\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var container = this.refs.container;\n\t\n\t      this.stats = new _stats2.default();\n\t\n\t      this.stats.domElement.style.position = 'absolute';\n\t      this.stats.domElement.style.top = '0px';\n\t\n\t      container.appendChild(this.stats.domElement);\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      delete this.stats;\n\t    }\n\t  }, {\n\t    key: '_createBodies',\n\t    value: function _createBodies() {\n\t      var bodies = this.bodies;\n\t\n\t      var N = bodies.length;\n\t\n\t      for (var i = 0; i < N; ++i) {\n\t        bodies[i] = this._createBody(i);\n\t      }\n\t    }\n\t  }, {\n\t    key: '_createBody',\n\t    value: function _createBody() {\n\t      var position = new _three2.default.Vector3(-2.5 + Math.random() * 5, 0.5 + Math.random() * 5, -2.5 + Math.random() * 5);\n\t\n\t      return {\n\t        position: position,\n\t        timeScale: Math.random() * 0.005,\n\t        startPosition: position.clone(),\n\t        movementPerFrame: new _three2.default.Vector3(Math.random(), Math.random(), Math.random()),\n\t        rotationDeltaPerFrame: new _three2.default.Quaternion().setFromEuler(new _three2.default.Euler(Math.random() * 0.05, Math.random() * 0.05, Math.random() * 0.05)),\n\t        quaternion: new _three2.default.Quaternion()\n\t      };\n\t    }\n\t  }, {\n\t    key: '_getInputBox',\n\t    value: function _getInputBox(title) {\n\t      var numBodies = this.state.numBodies;\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { style: {\n\t            position: 'absolute',\n\t            top: 0,\n\t            color: 'white',\n\t            width: '100%',\n\t            textAlign: 'center',\n\t            background: 'rgba(1,1,1,0.75)'\n\t          } },\n\t        _react2.default.createElement(\n\t          'div',\n\t          null,\n\t          title\n\t        ),\n\t        _react2.default.createElement(\n\t          'label',\n\t          null,\n\t          'Bodies: ',\n\t          _react2.default.createElement(\n\t            'select',\n\t            {\n\t              value: numBodies,\n\t              onChange: this._onBodiesSelectChange },\n\t            [10, 50, 100, 200, 300, 500, 1000, 1500, 2000, 2500, 3000].map(function (val) {\n\t              return _react2.default.createElement(\n\t                'option',\n\t                { value: val, key: val },\n\t                val\n\t              );\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var meshStates = this.state.meshStates;\n\t\n\t      var d = 20;\n\t\n\t      var cubeMeshes = meshStates.map(function (_ref2, i) {\n\t        var position = _ref2.position;\n\t        var quaternion = _ref2.quaternion;\n\t\n\t        return _react2.default.createElement(_RotatingCube2.default, {\n\t          key: i,\n\t\n\t          position: position,\n\t          quaternion: quaternion,\n\t\n\t          bodyIndex: i,\n\t\n\t          meshes: _this2.meshes\n\t        });\n\t      });\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        {\n\t          ref: 'container'\n\t        },\n\t        this._getInputBox('Rotating Cubes - Through React'),\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            antialias: true,\n\t            mainCamera: 'camera',\n\t            width: width,\n\t            height: height,\n\t\n\t            onAnimate: this._onAnimate,\n\t\n\t            clearColor: this.fog.color,\n\t\n\t            gammaInput: true,\n\t            gammaOutput: true,\n\t            shadowMapEnabled: true\n\t          },\n\t          _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            _react2.default.createElement('boxGeometry', {\n\t              resourceId: 'cubeGeo',\n\t\n\t              width: 0.5,\n\t              height: 0.5,\n\t              depth: 0.5,\n\t\n\t              widthSegments: 10,\n\t              heightSegments: 10\n\t            }),\n\t            _react2.default.createElement('meshPhongMaterial', {\n\t              resourceId: 'cubeMaterial',\n\t\n\t              color: 0x888888\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            {\n\t              ref: 'scene',\n\t              fog: this.fog\n\t            },\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              name: 'camera',\n\t              fov: 30,\n\t              aspect: width / height,\n\t              near: 0.5,\n\t              far: 10000,\n\t\n\t              position: this.cameraPosition,\n\t              quaternion: this.cameraQuaternion,\n\t\n\t              ref: 'camera'\n\t            }),\n\t            _react2.default.createElement('ambientLight', {\n\t              color: 0x666666\n\t            }),\n\t            _react2.default.createElement('directionalLight', {\n\t              color: 0xffffff,\n\t              intensity: 1.75,\n\t\n\t              castShadow: true,\n\t\n\t              shadowMapWidth: 1024,\n\t              shadowMapHeight: 1024,\n\t\n\t              shadowCameraLeft: -d,\n\t              shadowCameraRight: d,\n\t              shadowCameraTop: d,\n\t              shadowCameraBottom: -d,\n\t\n\t              shadowCameraFar: 3 * d,\n\t              shadowCameraNear: d,\n\t              shadowDarkness: 0.5,\n\t\n\t              position: this.lightPosition\n\t            }),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                castShadow: true,\n\t                receiveShadow: true,\n\t\n\t                quaternion: this.groundQuaternion\n\t              },\n\t              _react2.default.createElement('planeBufferGeometry', {\n\t                width: 100,\n\t                height: 100,\n\t                widthSegments: 1,\n\t                heightSegments: 1\n\t              }),\n\t              _react2.default.createElement('meshLambertMaterial', {\n\t                color: 0x777777\n\t              })\n\t            ),\n\t            cubeMeshes\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return RotatingCubes;\n\t}(_ExampleBase3.default);\n\t\n\texports.default = RotatingCubes;\n\n/***/ },\n/* 422 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _class, _temp;\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar PropTypes = _react2.default.PropTypes;\n\t\n\tvar meshScale = new _three2.default.Vector3(1, 1, 1).multiplyScalar(0.5);\n\t\n\tvar RotatingCube = (_temp = _class = function (_React$Component) {\n\t  (0, _inherits3.default)(RotatingCube, _React$Component);\n\t\n\t  function RotatingCube() {\n\t    (0, _classCallCheck3.default)(this, RotatingCube);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RotatingCube).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(RotatingCube, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var _props = this.props;\n\t      var position = _props.position;\n\t      var quaternion = _props.quaternion;\n\t\n\t      return _react2.default.createElement(\n\t        'mesh',\n\t        {\n\t          position: position,\n\t          quaternion: quaternion,\n\t          scale: meshScale,\n\t\n\t          castShadow: true\n\t        },\n\t        _react2.default.createElement('geometryResource', {\n\t          resourceId: 'cubeGeo'\n\t        }),\n\t        _react2.default.createElement('materialResource', {\n\t          resourceId: 'cubeMaterial'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return RotatingCube;\n\t}(_react2.default.Component), _class.propTypes = {\n\t  position: PropTypes.instanceOf(_three2.default.Vector3).isRequired,\n\t  quaternion: PropTypes.instanceOf(_three2.default.Quaternion).isRequired\n\t}, _temp);\n\texports.default = RotatingCube;\n\n/***/ },\n/* 423 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends2 = __webpack_require__(216);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\tvar _getPrototypeOf = __webpack_require__(199);\n\t\n\tvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\t\n\tvar _classCallCheck2 = __webpack_require__(202);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(203);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(206);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _get2 = __webpack_require__(226);\n\t\n\tvar _get3 = _interopRequireDefault(_get2);\n\t\n\tvar _inherits2 = __webpack_require__(207);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactThreeRenderer = __webpack_require__(326);\n\t\n\tvar _reactThreeRenderer2 = _interopRequireDefault(_reactThreeRenderer);\n\t\n\tvar _three = __webpack_require__(214);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _RotatingCube = __webpack_require__(422);\n\t\n\tvar _RotatingCube2 = _interopRequireDefault(_RotatingCube);\n\t\n\tvar _RotatingCubes2 = __webpack_require__(421);\n\t\n\tvar _RotatingCubes3 = _interopRequireDefault(_RotatingCubes2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar RotatingCubesDirectUpdates = function (_RotatingCubes) {\n\t  (0, _inherits3.default)(RotatingCubesDirectUpdates, _RotatingCubes);\n\t\n\t  function RotatingCubesDirectUpdates() {\n\t    (0, _classCallCheck3.default)(this, RotatingCubesDirectUpdates);\n\t    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(RotatingCubesDirectUpdates).apply(this, arguments));\n\t  }\n\t\n\t  (0, _createClass3.default)(RotatingCubesDirectUpdates, [{\n\t    key: '_getMeshStates',\n\t    value: function _getMeshStates() {\n\t      var bodies = this.bodies;\n\t\n\t      return bodies.map(function (_ref) {\n\t        var position = _ref.position;\n\t        var quaternion = _ref.quaternion;\n\t        var ref = _ref.ref;\n\t\n\t        return {\n\t          position: new _three2.default.Vector3().copy(position),\n\t          quaternion: new _three2.default.Quaternion().copy(quaternion),\n\t          ref: ref\n\t        };\n\t      });\n\t    }\n\t  }, {\n\t    key: '_bodyRef',\n\t    value: function _bodyRef(index, body) {\n\t      if (body === null) {\n\t        // dismounted\n\t        return;\n\t      }\n\t\n\t      this.bodies[index].body = _reactThreeRenderer2.default.findTHREEObject(body);\n\t    }\n\t  }, {\n\t    key: '_updateGraphics',\n\t    value: function _updateGraphics() {\n\t      var bodies = this.bodies;\n\t\n\t      for (var i = 0; i < bodies.length; ++i) {\n\t        var body = bodies[i];\n\t\n\t        if (body.body) {\n\t          body.body.position.copy(body.position);\n\t          body.body.quaternion.copy(body.quaternion);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: '_createBody',\n\t    value: function _createBody(i) {\n\t      return (0, _extends3.default)({}, (0, _get3.default)((0, _getPrototypeOf2.default)(RotatingCubesDirectUpdates.prototype), '_createBody', this).call(this), {\n\t\n\t        ref: this._bodyRef.bind(this, i)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var _props = this.props;\n\t      var width = _props.width;\n\t      var height = _props.height;\n\t      var meshStates = this.state.meshStates;\n\t\n\t      var d = 20;\n\t\n\t      var cubeMeshes = meshStates.map(function (_ref2, i) {\n\t        var position = _ref2.position;\n\t        var quaternion = _ref2.quaternion;\n\t        var ref = _ref2.ref;\n\t\n\t        return _react2.default.createElement(_RotatingCube2.default, {\n\t          key: i,\n\t\n\t          position: position,\n\t          quaternion: quaternion,\n\t\n\t          ref: ref,\n\t\n\t          meshes: _this2.meshes\n\t        });\n\t      });\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        {\n\t          ref: 'container'\n\t        },\n\t        this._getInputBox('Rotating Cubes - Direct Updates'),\n\t        _react2.default.createElement(\n\t          _reactThreeRenderer2.default,\n\t          {\n\t            antialias: true,\n\t            mainCamera: 'camera',\n\t            width: width,\n\t            height: height,\n\t\n\t            onAnimate: this._onAnimate,\n\t\n\t            clearColor: this.fog.color,\n\t\n\t            gammaInput: true,\n\t            gammaOutput: true,\n\t            shadowMapEnabled: true\n\t          },\n\t          _react2.default.createElement(\n\t            'resources',\n\t            null,\n\t            _react2.default.createElement('boxGeometry', {\n\t              resourceId: 'cubeGeo',\n\t\n\t              width: 0.5,\n\t              height: 0.5,\n\t              depth: 0.5,\n\t\n\t              widthSegments: 10,\n\t              heightSegments: 10\n\t            }),\n\t            _react2.default.createElement('meshPhongMaterial', {\n\t              resourceId: 'cubeMaterial',\n\t\n\t              color: 0x888888\n\t            })\n\t          ),\n\t          _react2.default.createElement(\n\t            'scene',\n\t            {\n\t              ref: 'scene',\n\t              fog: this.fog\n\t            },\n\t            _react2.default.createElement('perspectiveCamera', {\n\t              name: 'camera',\n\t              fov: 30,\n\t              aspect: width / height,\n\t              near: 0.5,\n\t              far: 10000,\n\t\n\t              position: this.cameraPosition,\n\t              quaternion: this.cameraQuaternion,\n\t\n\t              ref: 'camera'\n\t            }),\n\t            _react2.default.createElement('ambientLight', {\n\t              color: 0x666666\n\t            }),\n\t            _react2.default.createElement('directionalLight', {\n\t              color: 0xffffff,\n\t              intensity: 1.75,\n\t\n\t              castShadow: true,\n\t\n\t              shadowMapWidth: 1024,\n\t              shadowMapHeight: 1024,\n\t\n\t              shadowCameraLeft: -d,\n\t              shadowCameraRight: d,\n\t              shadowCameraTop: d,\n\t              shadowCameraBottom: -d,\n\t\n\t              shadowCameraFar: 3 * d,\n\t              shadowCameraNear: d,\n\t              shadowDarkness: 0.5,\n\t\n\t              position: this.lightPosition\n\t            }),\n\t            _react2.default.createElement(\n\t              'mesh',\n\t              {\n\t                castShadow: true,\n\t                receiveShadow: true,\n\t\n\t                quaternion: this.groundQuaternion\n\t              },\n\t              _react2.default.createElement('planeBufferGeometry', {\n\t                width: 100,\n\t                height: 100,\n\t                widthSegments: 1,\n\t                heightSegments: 1\n\t              }),\n\t              _react2.default.createElement('meshLambertMaterial', {\n\t                color: 0x777777\n\t              })\n\t            ),\n\t            cubeMeshes\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t  return RotatingCubesDirectUpdates;\n\t}(_RotatingCubes3.default);\n\t\n\texports.default = RotatingCubesDirectUpdates;\n\n/***/ },\n/* 424 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(425);\n\n/***/ },\n/* 425 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactDefaultPerf\n\t * @typechecks static-only\n\t */\n\t\n\t'use strict';\n\t\n\tvar DOMProperty = __webpack_require__(23);\n\tvar ReactDefaultPerfAnalysis = __webpack_require__(426);\n\tvar ReactMount = __webpack_require__(28);\n\tvar ReactPerf = __webpack_require__(18);\n\t\n\tvar performanceNow = __webpack_require__(427);\n\t\n\tfunction roundFloat(val) {\n\t  return Math.floor(val * 100) / 100;\n\t}\n\t\n\tfunction addValue(obj, key, val) {\n\t  obj[key] = (obj[key] || 0) + val;\n\t}\n\t\n\tvar ReactDefaultPerf = {\n\t  _allMeasurements: [], // last item in the list is the current one\n\t  _mountStack: [0],\n\t  _injected: false,\n\t\n\t  start: function () {\n\t    if (!ReactDefaultPerf._injected) {\n\t      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n\t    }\n\t\n\t    ReactDefaultPerf._allMeasurements.length = 0;\n\t    ReactPerf.enableMeasure = true;\n\t  },\n\t\n\t  stop: function () {\n\t    ReactPerf.enableMeasure = false;\n\t  },\n\t\n\t  getLastMeasurements: function () {\n\t    return ReactDefaultPerf._allMeasurements;\n\t  },\n\t\n\t  printExclusive: function (measurements) {\n\t    measurements = measurements || ReactDefaultPerf._allMeasurements;\n\t    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n\t    console.table(summary.map(function (item) {\n\t      return {\n\t        'Component class name': item.componentName,\n\t        'Total inclusive time (ms)': roundFloat(item.inclusive),\n\t        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n\t        'Exclusive render time (ms)': roundFloat(item.render),\n\t        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n\t        'Render time per instance (ms)': roundFloat(item.render / item.count),\n\t        'Instances': item.count\n\t      };\n\t    }));\n\t    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n\t    // number.\n\t  },\n\t\n\t  printInclusive: function (measurements) {\n\t    measurements = measurements || ReactDefaultPerf._allMeasurements;\n\t    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n\t    console.table(summary.map(function (item) {\n\t      return {\n\t        'Owner > component': item.componentName,\n\t        'Inclusive time (ms)': roundFloat(item.time),\n\t        'Instances': item.count\n\t      };\n\t    }));\n\t    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n\t  },\n\t\n\t  getMeasurementsSummaryMap: function (measurements) {\n\t    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n\t    return summary.map(function (item) {\n\t      return {\n\t        'Owner > component': item.componentName,\n\t        'Wasted time (ms)': item.time,\n\t        'Instances': item.count\n\t      };\n\t    });\n\t  },\n\t\n\t  printWasted: function (measurements) {\n\t    measurements = measurements || ReactDefaultPerf._allMeasurements;\n\t    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n\t    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n\t  },\n\t\n\t  printDOM: function (measurements) {\n\t    measurements = measurements || ReactDefaultPerf._allMeasurements;\n\t    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n\t    console.table(summary.map(function (item) {\n\t      var result = {};\n\t      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n\t      result.type = item.type;\n\t      result.args = JSON.stringify(item.args);\n\t      return result;\n\t    }));\n\t    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n\t  },\n\t\n\t  _recordWrite: function (id, fnName, totalTime, args) {\n\t    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n\t    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n\t    writes[id] = writes[id] || [];\n\t    writes[id].push({\n\t      type: fnName,\n\t      time: totalTime,\n\t      args: args\n\t    });\n\t  },\n\t\n\t  measure: function (moduleName, fnName, func) {\n\t    return function () {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      var totalTime;\n\t      var rv;\n\t      var start;\n\t\n\t      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n\t        // A \"measurement\" is a set of metrics recorded for each flush. We want\n\t        // to group the metrics for a given flush together so we can look at the\n\t        // components that rendered and the DOM operations that actually\n\t        // happened to determine the amount of \"wasted work\" performed.\n\t        ReactDefaultPerf._allMeasurements.push({\n\t          exclusive: {},\n\t          inclusive: {},\n\t          render: {},\n\t          counts: {},\n\t          writes: {},\n\t          displayNames: {},\n\t          totalTime: 0,\n\t          created: {}\n\t        });\n\t        start = performanceNow();\n\t        rv = func.apply(this, args);\n\t        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n\t        return rv;\n\t      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n\t        start = performanceNow();\n\t        rv = func.apply(this, args);\n\t        totalTime = performanceNow() - start;\n\t\n\t        if (fnName === '_mountImageIntoNode') {\n\t          var mountID = ReactMount.getID(args[1]);\n\t          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n\t        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n\t          // special format\n\t          args[0].forEach(function (update) {\n\t            var writeArgs = {};\n\t            if (update.fromIndex !== null) {\n\t              writeArgs.fromIndex = update.fromIndex;\n\t            }\n\t            if (update.toIndex !== null) {\n\t              writeArgs.toIndex = update.toIndex;\n\t            }\n\t            if (update.textContent !== null) {\n\t              writeArgs.textContent = update.textContent;\n\t            }\n\t            if (update.markupIndex !== null) {\n\t              writeArgs.markup = args[1][update.markupIndex];\n\t            }\n\t            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n\t          });\n\t        } else {\n\t          // basic format\n\t          var id = args[0];\n\t          if (typeof id === 'object') {\n\t            id = ReactMount.getID(args[0]);\n\t          }\n\t          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n\t        }\n\t        return rv;\n\t      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n\t      fnName === '_renderValidatedComponent')) {\n\t\n\t        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n\t          return func.apply(this, args);\n\t        }\n\t\n\t        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n\t        var isRender = fnName === '_renderValidatedComponent';\n\t        var isMount = fnName === 'mountComponent';\n\t\n\t        var mountStack = ReactDefaultPerf._mountStack;\n\t        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\t\n\t        if (isRender) {\n\t          addValue(entry.counts, rootNodeID, 1);\n\t        } else if (isMount) {\n\t          entry.created[rootNodeID] = true;\n\t          mountStack.push(0);\n\t        }\n\t\n\t        start = performanceNow();\n\t        rv = func.apply(this, args);\n\t        totalTime = performanceNow() - start;\n\t\n\t        if (isRender) {\n\t          addValue(entry.render, rootNodeID, totalTime);\n\t        } else if (isMount) {\n\t          var subMountTime = mountStack.pop();\n\t          mountStack[mountStack.length - 1] += totalTime;\n\t          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n\t          addValue(entry.inclusive, rootNodeID, totalTime);\n\t        } else {\n\t          addValue(entry.inclusive, rootNodeID, totalTime);\n\t        }\n\t\n\t        entry.displayNames[rootNodeID] = {\n\t          current: this.getName(),\n\t          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n\t        };\n\t\n\t        return rv;\n\t      } else {\n\t        return func.apply(this, args);\n\t      }\n\t    };\n\t  }\n\t};\n\t\n\tmodule.exports = ReactDefaultPerf;\n\n/***/ },\n/* 426 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule ReactDefaultPerfAnalysis\n\t */\n\t\n\t'use strict';\n\t\n\tvar assign = __webpack_require__(39);\n\t\n\t// Don't try to save users less than 1.2ms (a number I made up)\n\tvar DONT_CARE_THRESHOLD = 1.2;\n\tvar DOM_OPERATION_TYPES = {\n\t  '_mountImageIntoNode': 'set innerHTML',\n\t  INSERT_MARKUP: 'set innerHTML',\n\t  MOVE_EXISTING: 'move',\n\t  REMOVE_NODE: 'remove',\n\t  SET_MARKUP: 'set innerHTML',\n\t  TEXT_CONTENT: 'set textContent',\n\t  'setValueForProperty': 'update attribute',\n\t  'setValueForAttribute': 'update attribute',\n\t  'deleteValueForProperty': 'remove attribute',\n\t  'setValueForStyles': 'update styles',\n\t  'replaceNodeWithMarkup': 'replace',\n\t  'updateTextContent': 'set textContent'\n\t};\n\t\n\tfunction getTotalTime(measurements) {\n\t  // TODO: return number of DOM ops? could be misleading.\n\t  // TODO: measure dropped frames after reconcile?\n\t  // TODO: log total time of each reconcile and the top-level component\n\t  // class that triggered it.\n\t  var totalTime = 0;\n\t  for (var i = 0; i < measurements.length; i++) {\n\t    var measurement = measurements[i];\n\t    totalTime += measurement.totalTime;\n\t  }\n\t  return totalTime;\n\t}\n\t\n\tfunction getDOMSummary(measurements) {\n\t  var items = [];\n\t  measurements.forEach(function (measurement) {\n\t    Object.keys(measurement.writes).forEach(function (id) {\n\t      measurement.writes[id].forEach(function (write) {\n\t        items.push({\n\t          id: id,\n\t          type: DOM_OPERATION_TYPES[write.type] || write.type,\n\t          args: write.args\n\t        });\n\t      });\n\t    });\n\t  });\n\t  return items;\n\t}\n\t\n\tfunction getExclusiveSummary(measurements) {\n\t  var candidates = {};\n\t  var displayName;\n\t\n\t  for (var i = 0; i < measurements.length; i++) {\n\t    var measurement = measurements[i];\n\t    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\t\n\t    for (var id in allIDs) {\n\t      displayName = measurement.displayNames[id].current;\n\t\n\t      candidates[displayName] = candidates[displayName] || {\n\t        componentName: displayName,\n\t        inclusive: 0,\n\t        exclusive: 0,\n\t        render: 0,\n\t        count: 0\n\t      };\n\t      if (measurement.render[id]) {\n\t        candidates[displayName].render += measurement.render[id];\n\t      }\n\t      if (measurement.exclusive[id]) {\n\t        candidates[displayName].exclusive += measurement.exclusive[id];\n\t      }\n\t      if (measurement.inclusive[id]) {\n\t        candidates[displayName].inclusive += measurement.inclusive[id];\n\t      }\n\t      if (measurement.counts[id]) {\n\t        candidates[displayName].count += measurement.counts[id];\n\t      }\n\t    }\n\t  }\n\t\n\t  // Now make a sorted array with the results.\n\t  var arr = [];\n\t  for (displayName in candidates) {\n\t    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n\t      arr.push(candidates[displayName]);\n\t    }\n\t  }\n\t\n\t  arr.sort(function (a, b) {\n\t    return b.exclusive - a.exclusive;\n\t  });\n\t\n\t  return arr;\n\t}\n\t\n\tfunction getInclusiveSummary(measurements, onlyClean) {\n\t  var candidates = {};\n\t  var inclusiveKey;\n\t\n\t  for (var i = 0; i < measurements.length; i++) {\n\t    var measurement = measurements[i];\n\t    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\t    var cleanComponents;\n\t\n\t    if (onlyClean) {\n\t      cleanComponents = getUnchangedComponents(measurement);\n\t    }\n\t\n\t    for (var id in allIDs) {\n\t      if (onlyClean && !cleanComponents[id]) {\n\t        continue;\n\t      }\n\t\n\t      var displayName = measurement.displayNames[id];\n\t\n\t      // Inclusive time is not useful for many components without knowing where\n\t      // they are instantiated. So we aggregate inclusive time with both the\n\t      // owner and current displayName as the key.\n\t      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\t\n\t      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n\t        componentName: inclusiveKey,\n\t        time: 0,\n\t        count: 0\n\t      };\n\t\n\t      if (measurement.inclusive[id]) {\n\t        candidates[inclusiveKey].time += measurement.inclusive[id];\n\t      }\n\t      if (measurement.counts[id]) {\n\t        candidates[inclusiveKey].count += measurement.counts[id];\n\t      }\n\t    }\n\t  }\n\t\n\t  // Now make a sorted array with the results.\n\t  var arr = [];\n\t  for (inclusiveKey in candidates) {\n\t    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n\t      arr.push(candidates[inclusiveKey]);\n\t    }\n\t  }\n\t\n\t  arr.sort(function (a, b) {\n\t    return b.time - a.time;\n\t  });\n\t\n\t  return arr;\n\t}\n\t\n\tfunction getUnchangedComponents(measurement) {\n\t  // For a given reconcile, look at which components did not actually\n\t  // render anything to the DOM and return a mapping of their ID to\n\t  // the amount of time it took to render the entire subtree.\n\t  var cleanComponents = {};\n\t  var dirtyLeafIDs = Object.keys(measurement.writes);\n\t  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\t\n\t  for (var id in allIDs) {\n\t    var isDirty = false;\n\t    // For each component that rendered, see if a component that triggered\n\t    // a DOM op is in its subtree.\n\t    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n\t      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n\t        isDirty = true;\n\t        break;\n\t      }\n\t    }\n\t    // check if component newly created\n\t    if (measurement.created[id]) {\n\t      isDirty = true;\n\t    }\n\t    if (!isDirty && measurement.counts[id] > 0) {\n\t      cleanComponents[id] = true;\n\t    }\n\t  }\n\t  return cleanComponents;\n\t}\n\t\n\tvar ReactDefaultPerfAnalysis = {\n\t  getExclusiveSummary: getExclusiveSummary,\n\t  getInclusiveSummary: getInclusiveSummary,\n\t  getDOMSummary: getDOMSummary,\n\t  getTotalTime: getTotalTime\n\t};\n\t\n\tmodule.exports = ReactDefaultPerfAnalysis;\n\n/***/ },\n/* 427 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule performanceNow\n\t * @typechecks\n\t */\n\t\n\t'use strict';\n\t\n\tvar performance = __webpack_require__(428);\n\t\n\tvar performanceNow;\n\t\n\t/**\n\t * Detect if we can use `window.performance.now()` and gracefully fallback to\n\t * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n\t * because of Facebook's testing infrastructure.\n\t */\n\tif (performance.now) {\n\t  performanceNow = function () {\n\t    return performance.now();\n\t  };\n\t} else {\n\t  performanceNow = function () {\n\t    return Date.now();\n\t  };\n\t}\n\t\n\tmodule.exports = performanceNow;\n\n/***/ },\n/* 428 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright 2013-2015, Facebook, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under the BSD-style license found in the\n\t * LICENSE file in the root directory of this source tree. An additional grant\n\t * of patent rights can be found in the PATENTS file in the same directory.\n\t *\n\t * @providesModule performance\n\t * @typechecks\n\t */\n\t\n\t'use strict';\n\t\n\tvar ExecutionEnvironment = __webpack_require__(9);\n\t\n\tvar performance;\n\t\n\tif (ExecutionEnvironment.canUseDOM) {\n\t  performance = window.performance || window.msPerformance || window.webkitPerformance;\n\t}\n\t\n\tmodule.exports = performance || {};\n\n/***/ }\n]);\n\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ExampleBrowser from './examples/ExampleBrowser';\r\nimport Perf from 'react-addons-perf';\r\n\r\nwindow.Perf = Perf;\r\n\r\nReactDOM.render(<ExampleBrowser/>, document.getElementById('content'));\r\n\n\n\n","'use strict';\n\nmodule.exports = require('react/lib/ReactDOM');\n\n\n\n","import React from 'react';\r\n\r\nimport SimpleExample from './Simple/index';\r\nimport ClothExample from './AnimationCloth/index';\r\nimport GeometriesExample from './Geometries/index';\r\nimport CameraExample from './WebGLCameraExample/index';\r\nimport GeometryShapesExample from './GeometryShapes/index';\r\nimport DraggableCubes from './DraggableCubes/index';\r\nimport Physics from './Physics/index';\r\nimport PhysicsMousePick from './Physics/mousePick';\r\nimport BenchmarkRotatingCubes from './Benchmark/RotatingCubes';\r\nimport RotatingCubesDirectUpdates from './Benchmark/RotatingCubesDirectUpdates';\r\n\r\nconst examples = [\r\n  {\r\n    name: 'Simple',\r\n    component: SimpleExample,\r\n    url: 'Simple/index',\r\n  },\r\n  {\r\n    name: 'Cloth',\r\n    component: ClothExample,\r\n    url: 'AnimationCloth/index',\r\n  },\r\n  {\r\n    name: 'Camera',\r\n    component: CameraExample,\r\n    url: 'WebGLCameraExample/index',\r\n  },\r\n  {\r\n    name: 'Geometries',\r\n    component: GeometriesExample,\r\n    url: 'Geometries/index',\r\n  },\r\n  {\r\n    name: 'Geometry Shapes',\r\n    component: GeometryShapesExample,\r\n    url: 'GeometryShapes/index',\r\n  },\r\n  {\r\n    name: 'Draggable Cubes',\r\n    component: DraggableCubes,\r\n    url: 'DraggableCubes/index',\r\n  },\r\n  {\r\n    name: 'Advanced',\r\n    advanced: true,\r\n    page: 'advanced.html',\r\n  },\r\n  {\r\n    name: 'Physics',\r\n    component: Physics,\r\n    url: 'Physics/index',\r\n  },\r\n  {\r\n    name: 'Physics - MousePick',\r\n    component: PhysicsMousePick,\r\n    url: 'Physics/mousePick',\r\n  },\r\n  {\r\n    name: 'Benchmark - RotatingCubes - Through React',\r\n    component: BenchmarkRotatingCubes,\r\n    url: 'Benchmark/RotatingCubes',\r\n  },\r\n  {\r\n    name: 'Benchmark - RotatingCubes - Direct Updates',\r\n    component: RotatingCubesDirectUpdates,\r\n    url: 'Benchmark/RotatingCubesDirectUpdates',\r\n  },\r\n];\r\n\r\nclass ExampleBrowser extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      activeExample: null,\r\n      viewerWidth: 0,\r\n      viewerHeight: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this._onWindowResize, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this._onWindowResize, false);\r\n  }\r\n\r\n  _onWindowResize = () => {\r\n    const viewer = this.refs.viewer;\r\n\r\n    this.setState({\r\n      viewerWidth: viewer.offsetWidth,\r\n      viewerHeight: viewer.offsetHeight,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let exampleContent = null;\r\n\r\n    const {\r\n      viewerWidth,\r\n      viewerHeight,\r\n      } = this.state;\r\n\r\n    let sourceButton = null;\r\n\r\n    if (this.state.activeExample !== null) {\r\n      const {\r\n        component: ExampleComponent,\r\n        url,\r\n        } = examples[this.state.activeExample];\r\n\r\n      exampleContent = (<ExampleComponent\r\n        width={viewerWidth}\r\n        height={viewerHeight}/>);\r\n\r\n      sourceButton = (<div key=\"src\" id=\"button\">\r\n        <a\r\n          href={`https://github.com/toxicFork/react-three-renderer-example/blob/master/src/examples/${url}.js`}\r\n          target=\"_blank\">\r\n          View source\r\n        </a>\r\n      </div>);\r\n    }\r\n\r\n    return (<div>\r\n      <div id=\"panel\" className=\"collapsed\">\r\n        <h1><a href=\"https://github.com/toxicFork/react-three-renderer/\">react-three-renderer</a> / examples</h1>\r\n        <div id=\"content\">\r\n          <div>\r\n            <h2>webgl</h2>\r\n            {examples.map((example, index) => {\r\n              if (example.advanced) {\r\n                return (<div className=\"link\" key={index}>\r\n                  <a href={example.page}>{example.name}</a>\r\n                </div>);\r\n              }\r\n              return (<div className=\"link\" key={index} onClick={() => {\r\n                const viewer = this.refs.viewer;\r\n\r\n                this.setState({\r\n                  viewerWidth: viewer.offsetWidth,\r\n                  viewerHeight: viewer.offsetHeight,\r\n                  activeExample: index,\r\n                });\r\n              }}>\r\n                {example.name}\r\n              </div>);\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"viewer\" ref=\"viewer\">\r\n        {exampleContent}\r\n        {sourceButton}\r\n      </div>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default ExampleBrowser;\r\n\n\n\n","import React from 'react';\r\nimport React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\n\r\nclass Simple extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.cameraPosition = new THREE.Vector3(0, 0, 5);\r\n\r\n    this.state = {\r\n      cubeRotation: new THREE.Euler(),\r\n    };\r\n\r\n    this._onAnimate = () => {\r\n      this.setState({\r\n        cubeRotation: new THREE.Euler(\r\n          this.state.cubeRotation.x + 0.1,\r\n          this.state.cubeRotation.y + 0.1,\r\n          0\r\n        ),\r\n      });\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    return (<React3\r\n      mainCamera=\"camera\"\r\n      width={width}\r\n      height={height}\r\n\r\n      onAnimate={this._onAnimate}\r\n    >\r\n      <scene>\r\n        <perspectiveCamera\r\n          name=\"camera\"\r\n          fov={75}\r\n          aspect={width / height}\r\n          near={0.1}\r\n          far={1000}\r\n\r\n          position={this.cameraPosition}\r\n        />\r\n        <mesh\r\n          rotation={this.state.cubeRotation}\r\n        >\r\n          <boxGeometry\r\n            width={1}\r\n            height={1}\r\n            depth={1}\r\n          />\r\n          <meshBasicMaterial\r\n            color={0x00ff00}\r\n          />\r\n        </mesh>\r\n      </scene>\r\n    </React3>);\r\n  }\r\n}\r\n\r\nexport default Simple;\r\n\n\n\n","// Use this file if you like to compile from the source files instead of the lib.\r\n// It may save you some bytes, as for example babel runtime is no longer a hidden dependency.\r\n\r\nimport React3 from './lib/React3';\r\n\r\nmodule.exports = React3;\r\n\n\n\n","import React from 'react';\r\nimport React3Renderer from './React3Renderer';\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nimport THREE from 'three';\r\n\r\nconst { PropTypes } = React;\r\n\r\nimport propTypeInstanceOf from './utils/propTypeInstanceOf';\r\n\r\nclass React3 extends React.Component {\r\n  static propTypes = {\r\n    context: PropTypes.string,\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    children: PropTypes.any,\r\n    canvasStyle: PropTypes.any,\r\n    gammaInput: PropTypes.bool,\r\n    gammaOutput: PropTypes.bool,\r\n    sortObjects: PropTypes.bool,\r\n    mainCamera: PropTypes.string,\r\n    onAnimate: PropTypes.func,\r\n    clearColor: PropTypes.oneOfType([\r\n      propTypeInstanceOf(THREE.Color),\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n    shadowMapEnabled: PropTypes.bool,\r\n    shadowMapType: PropTypes.oneOf([\r\n      THREE.BasicShadowMap,\r\n      THREE.PCFShadowMap,\r\n      THREE.PCFSoftShadowMap,\r\n    ]),\r\n    shadowMapCullFace: PropTypes.oneOf([\r\n      THREE.CullFaceNone,\r\n      THREE.CullFaceBack,\r\n      THREE.CullFaceFront,\r\n      THREE.CullFaceFrontBack,\r\n    ]),\r\n    shadowMapDebug: PropTypes.bool,\r\n    pixelRatio: PropTypes.number,\r\n    antialias: PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.number,\r\n    ]),\r\n  };\r\n\r\n  static defaultProps = {\r\n    context: '3d',\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      canvasKey: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.react3Renderer = new React3Renderer();\r\n\r\n    this._render();\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  componentDidUpdate() {\r\n    this._render();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.react3Renderer.dispose();\r\n    delete this.react3Renderer;\r\n  }\r\n\r\n  _onRecreateCanvas = () => {\r\n    this.setState({\r\n      // changing the key will recreate the element\r\n      canvasKey: this.state.canvasKey + 1,\r\n    });\r\n  };\r\n\r\n  _render() {\r\n    const canvas = this.refs.canvas;\r\n\r\n    const propsToClone = { ...this.props };\r\n\r\n    delete propsToClone.canvasStyle;\r\n\r\n    this.react3Renderer.render(<react3\r\n      {...propsToClone}\r\n      onRecreateCanvas={this._onRecreateCanvas}>\r\n      {this.props.children}\r\n    </react3>, canvas);\r\n  }\r\n\r\n  static findTHREEObject = React3Renderer.findTHREEObject;\r\n  static eventDispatcher = React3Renderer.eventDispatcher;\r\n\r\n  render() {\r\n    const {\r\n      canvasKey,\r\n      } = this.state;\r\n\r\n    return (<canvas\r\n      ref=\"canvas\"\r\n      key={canvasKey}\r\n      width={this.props.width}\r\n      height={this.props.height}\r\n      style={{\r\n        ...this.props.canvasStyle,\r\n        width: this.props.width,\r\n        height: this.props.height,\r\n      }}\r\n    />);\r\n  }\r\n}\r\n\r\nmodule.exports = React3;\r\n\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentWithPureRenderMixin\n */\n\n'use strict';\n\nvar shallowCompare = require('./shallowCompare');\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function (nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule shallowCompare\n*/\n\n'use strict';\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\n/**\n * Does a shallow comparison for props and state.\n * See ReactComponentWithPureRenderMixin\n */\nfunction shallowCompare(instance, nextProps, nextState) {\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n}\n\nmodule.exports = shallowCompare;\n\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport THREE from 'three';\r\nimport Stats from 'stats.js';\r\n\r\nimport React3 from 'react-three-renderer';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nimport Info from './Info';\r\n\r\nimport Cloth from './Cloth';\r\nimport StaticWorld from './StaticWorld';\r\nimport Sphere from './Sphere';\r\n\r\nconst ballSize = 60; // 40\r\n\r\nconst GRAVITY = 981 * 1.4; //\r\nconst gravity = new THREE.Vector3(0, -GRAVITY, 0).multiplyScalar(Cloth.MASS);\r\n\r\nconst TIMESTEP = 18 / 1000;\r\nconst TIMESTEP_SQ = TIMESTEP * TIMESTEP;\r\n\r\nconst diff = new THREE.Vector3();\r\n\r\nimport TrackballControls from '../../ref/trackball';\r\n\r\n\r\nfunction satisfyConstrains(p1, p2, distance) {\r\n  diff.subVectors(p2.position, p1.position);\r\n  const currentDist = diff.length();\r\n  if (currentDist === 0) return; // prevents division by 0\r\n  const correction = diff.multiplyScalar(1 - distance / currentDist);\r\n  const correctionHalf = correction.multiplyScalar(0.5);\r\n  p1.position.add(correctionHalf);\r\n  p2.position.sub(correctionHalf);\r\n}\r\n\r\nconst tmpForce = new THREE.Vector3();\r\n\r\nclass AnimationCloth extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      minTimePerFrame: 0,\r\n      rotate: true,\r\n      wind: true,\r\n      sphere: false,\r\n    };\r\n\r\n    const xSegs = 10; //\r\n    const ySegs = 10; //\r\n\r\n    this.cloth = new Cloth(xSegs, ySegs);\r\n\r\n    const pinsFormation = [];\r\n    let pins = [6];\r\n\r\n    pinsFormation.push(pins);\r\n\r\n    pins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    pinsFormation.push(pins);\r\n\r\n    pins = [0];\r\n    pinsFormation.push(pins);\r\n\r\n    pins = []; // cut the rope ;)\r\n    pinsFormation.push(pins);\r\n\r\n    pins = [0, this.cloth.w]; // classic 2 pins\r\n    pinsFormation.push(pins);\r\n\r\n    pins = pinsFormation[1];\r\n\r\n    this.pins = pins;\r\n    this.pinsFormation = pinsFormation;\r\n\r\n    this.fog = new THREE.Fog(0xcce0ff, 500, 10000);\r\n\r\n    this.windForce = new THREE.Vector3(0, 0, 0);\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      ballPosition: new THREE.Vector3(0, -45, 0),\r\n      cameraPosition: new THREE.Vector3(0, 50, 1500),\r\n    };\r\n\r\n    this.scenePosition = new THREE.Vector3(0, 0, 0);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const controls = new TrackballControls(this.refs.mainCamera, ReactDOM.findDOMNode(this.refs.react3));\r\n    controls.rotateSpeed = 1.0;\r\n    controls.zoomSpeed = 1.2;\r\n    controls.panSpeed = 0.8;\r\n\r\n    controls.noZoom = false;\r\n    controls.noPan = false;\r\n\r\n    controls.staticMoving = true;\r\n    controls.dynamicDampingFactor = 0.3;\r\n\r\n    controls.addEventListener('change', () => {\r\n      this.setState({\r\n        cameraPosition: this.refs.mainCamera.position,\r\n      });\r\n    });\r\n\r\n    this.controls = controls;\r\n\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    this.refs.container.appendChild(this.stats.domElement);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.stats;\r\n    this.controls.dispose();\r\n    delete this.controls;\r\n  }\r\n\r\n  _toggleRotate = () => {\r\n    this.setState({rotate: !this.state.rotate});\r\n  };\r\n\r\n  _toggleWind = () => {\r\n    this.setState({wind: !this.state.wind});\r\n  };\r\n\r\n  _toggleSphere = () => {\r\n    this.setState({sphere: !this.state.sphere});\r\n  };\r\n\r\n  _togglePins = () => {\r\n    this.pins = this.pinsFormation[~~( Math.random() * this.pinsFormation.length )];\r\n  };\r\n\r\n  _simulate(time) {\r\n    if (!this.lastTime) {\r\n      this.lastTime = time;\r\n      return;\r\n    }\r\n\r\n    let i;\r\n    let il;\r\n    let particles;\r\n    let particle;\r\n    let constrains;\r\n    let constrain;\r\n\r\n    const clothGeometry = React3.findTHREEObject(this._clothGeometry);\r\n\r\n    const sphere = React3.findTHREEObject(this.refs.sphere);\r\n\r\n    // Aerodynamics forces\r\n    if (this.state.wind) {\r\n      let face;\r\n      const faces = clothGeometry.faces;\r\n      let normal;\r\n\r\n      particles = this.cloth.particles;\r\n\r\n      for (i = 0, il = faces.length; i < il; i++) {\r\n        face = faces[i];\r\n        normal = face.normal;\r\n\r\n        tmpForce.copy(normal).normalize().multiplyScalar(normal.dot(this.windForce));\r\n        particles[face.a].addForce(tmpForce);\r\n        particles[face.b].addForce(tmpForce);\r\n        particles[face.c].addForce(tmpForce);\r\n      }\r\n    }\r\n\r\n    for (particles = this.cloth.particles, i = 0, il = particles.length; i < il; i++) {\r\n      particle = particles[i];\r\n      particle.addForce(gravity);\r\n\r\n      particle.integrate(TIMESTEP_SQ);\r\n    }\r\n\r\n    // Start Constrains\r\n\r\n    constrains = this.cloth.constrains;\r\n    il = constrains.length;\r\n\r\n    for (i = 0; i < il; i++) {\r\n      constrain = constrains[i];\r\n      satisfyConstrains(constrain[0], constrain[1], constrain[2]);\r\n    }\r\n\r\n    const ballPosition = this.state.ballPosition.clone();\r\n\r\n    // Ball Constrains\r\n    ballPosition.z = -Math.sin(Date.now() / 600) * 90; // + 40;\r\n    ballPosition.x = Math.cos(Date.now() / 400) * 70;\r\n\r\n    if (sphere.visible) {\r\n      for (particles = this.cloth.particles,\r\n             i = 0,\r\n             il = particles.length; i < il; i++) {\r\n        particle = particles[i];\r\n        const pos = particle.position;\r\n        diff.subVectors(pos, ballPosition);\r\n        if (diff.length() < ballSize) {\r\n          // collided\r\n          diff.normalize().multiplyScalar(ballSize);\r\n          pos.copy(ballPosition).add(diff);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Floor Constraints\r\n    for (particles = this.cloth.particles, i = 0, il = particles.length\r\n      ; i < il; i++) {\r\n      particle = particles[i];\r\n      const pos = particle.position;\r\n      if (pos.y < -250) {\r\n        pos.y = -250;\r\n      }\r\n    }\r\n\r\n    // Pin Constrains\r\n    for (i = 0, il = this.pins.length; i < il; i++) {\r\n      const xy = this.pins[i];\r\n      const p = particles[xy];\r\n      p.position.copy(p.original);\r\n      p.previous.copy(p.original);\r\n    }\r\n\r\n    this.setState({\r\n      ballPosition,\r\n    });\r\n  }\r\n\r\n  _onAnimate = () => {\r\n    this.controls.update();\r\n\r\n    const {\r\n      minTimePerFrame,\r\n      } = this.state;\r\n\r\n    let time;\r\n\r\n    if (minTimePerFrame > 0) {\r\n      time = Math.round(Date.now() / minTimePerFrame) * minTimePerFrame;\r\n    } else {\r\n      time = Date.now();\r\n    }\r\n\r\n    if (time === this.state.time) {\r\n      return;\r\n    }\r\n\r\n    const windStrength = Math.cos(time / 7000) * 20 + 40;\r\n    this.windForce.set(Math.sin(time / 2000), Math.cos(time / 3000), Math.sin(time / 1000)).normalize().multiplyScalar(windStrength);\r\n\r\n    this._simulate(time);\r\n\r\n    const clothGeometry = React3.findTHREEObject(this._clothGeometry);\r\n\r\n    // render\r\n\r\n    const timer = time * 0.0002;\r\n\r\n    const p = this.cloth.particles;\r\n\r\n    let il;\r\n    let i;\r\n    for (i = 0, il = p.length; i < il; ++i) {\r\n      clothGeometry.vertices[i].copy(p[i].position);\r\n    }\r\n\r\n    clothGeometry.computeFaceNormals();\r\n    clothGeometry.computeVertexNormals();\r\n\r\n    clothGeometry.normalsNeedUpdate = true;\r\n    clothGeometry.verticesNeedUpdate = true;\r\n\r\n    const newState = {\r\n      time: time,\r\n      spherePosition: this.ballPosition,\r\n    };\r\n\r\n    if (this.state.rotate) {\r\n      newState.cameraPosition = new THREE.Vector3(Math.cos(timer) * 1500, this.state.cameraPosition.y, Math.sin(timer) * 1500);\r\n    }\r\n\r\n    this.setState(newState);\r\n    this.stats.update();\r\n  };\r\n\r\n  _clothRef = (ref) => {\r\n    this._clothGeometry = ref;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      minTimePerFrame,\r\n      } = this.state;\r\n\r\n    return (<div ref=\"container\">\r\n      <Info\r\n        toggleRotate={this._toggleRotate}\r\n        toggleWind={this._toggleWind}\r\n        toggleSphere={this._toggleSphere}\r\n        togglePins={this._togglePins}\r\n        rotating={this.state.rotate}\r\n        winding={this.state.wind}\r\n        balling={this.state.sphere}\r\n        onFrameChange={(event) => {\r\n          this.setState({\r\n            minTimePerFrame: +event.target.value,\r\n          });\r\n        }}\r\n        minTimePerFrame={minTimePerFrame}/>\r\n      <React3\r\n        ref=\"react3\"\r\n        width={width}\r\n        height={height}\r\n        antialias\r\n        pixelRatio={window.devicePixelRatio}\r\n        clearColor={this.fog.color}\r\n        gammaInput\r\n        gammaOutput\r\n        shadowMapEnabled\r\n        shadowMapDebug\r\n        mainCamera=\"mainCamera\"\r\n        onAnimate={this._onAnimate}\r\n      >\r\n        <scene fog={this.fog}>\r\n          <perspectiveCamera\r\n            name=\"mainCamera\"\r\n            fov={30}\r\n            aspect={width / height}\r\n            ref=\"mainCamera\"\r\n            position={this.state.cameraPosition}\r\n            near={1}\r\n            far={10000}\r\n            lookAt={this.state.rotate ? this.scenePosition : null}\r\n          />\r\n          <StaticWorld\r\n            clothRef={this._clothRef}\r\n            cloth={this.cloth}\r\n          />\r\n          <Sphere\r\n            ref=\"sphere\"\r\n            visible={this.state.sphere}\r\n            position={this.state.ballPosition}\r\n          />\r\n        </scene>\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default AnimationCloth;\r\n\n\n\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar startTime = Date.now(), prevTime = startTime;\n\tvar ms = 0, msMin = Infinity, msMax = 0;\n\tvar fps = 0, fpsMin = Infinity, fpsMax = 0;\n\tvar frames = 0, mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.id = 'stats';\n\tcontainer.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );\n\tcontainer.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n\n\tvar fpsDiv = document.createElement( 'div' );\n\tfpsDiv.id = 'fps';\n\tfpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\n\tcontainer.appendChild( fpsDiv );\n\n\tvar fpsText = document.createElement( 'div' );\n\tfpsText.id = 'fpsText';\n\tfpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\tfpsText.innerHTML = 'FPS';\n\tfpsDiv.appendChild( fpsText );\n\n\tvar fpsGraph = document.createElement( 'div' );\n\tfpsGraph.id = 'fpsGraph';\n\tfpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\n\tfpsDiv.appendChild( fpsGraph );\n\n\twhile ( fpsGraph.children.length < 74 ) {\n\n\t\tvar bar = document.createElement( 'span' );\n\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';\n\t\tfpsGraph.appendChild( bar );\n\n\t}\n\n\tvar msDiv = document.createElement( 'div' );\n\tmsDiv.id = 'ms';\n\tmsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\n\tcontainer.appendChild( msDiv );\n\n\tvar msText = document.createElement( 'div' );\n\tmsText.id = 'msText';\n\tmsText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n\tmsText.innerHTML = 'MS';\n\tmsDiv.appendChild( msText );\n\n\tvar msGraph = document.createElement( 'div' );\n\tmsGraph.id = 'msGraph';\n\tmsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\n\tmsDiv.appendChild( msGraph );\n\n\twhile ( msGraph.children.length < 74 ) {\n\n\t\tvar bar = document.createElement( 'span' );\n\t\tbar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';\n\t\tmsGraph.appendChild( bar );\n\n\t}\n\n\tvar setMode = function ( value ) {\n\n\t\tmode = value;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 0:\n\t\t\t\tfpsDiv.style.display = 'block';\n\t\t\t\tmsDiv.style.display = 'none';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tfpsDiv.style.display = 'none';\n\t\t\t\tmsDiv.style.display = 'block';\n\t\t\t\tbreak;\n\t\t}\n\n\t};\n\n\tvar updateGraph = function ( dom, value ) {\n\n\t\tvar child = dom.appendChild( dom.firstChild );\n\t\tchild.style.height = value + 'px';\n\n\t};\n\n\treturn {\n\n\t\tREVISION: 12,\n\n\t\tdomElement: container,\n\n\t\tsetMode: setMode,\n\n\t\tbegin: function () {\n\n\t\t\tstartTime = Date.now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tvar time = Date.now();\n\n\t\t\tms = time - startTime;\n\t\t\tmsMin = Math.min( msMin, ms );\n\t\t\tmsMax = Math.max( msMax, ms );\n\n\t\t\tmsText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';\n\t\t\tupdateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );\n\n\t\t\tframes ++;\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );\n\t\t\t\tfpsMin = Math.min( fpsMin, fps );\n\t\t\t\tfpsMax = Math.max( fpsMax, fps );\n\n\t\t\t\tfpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';\n\t\t\t\tupdateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tstartTime = this.end();\n\n\t\t}\n\n\t}\n\n};\n\nif ( typeof module === 'object' ) {\n\n\tmodule.exports = Stats;\n\n}\n\n\n","import React from 'react';\r\n\r\nconst {PropTypes} = React;\r\n\r\nclass ExampleBase extends React.Component {\r\n  static propTypes = {\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n  };\r\n}\r\n\r\nexport default ExampleBase;\r\n\n\n\n","import React from 'react';\r\n\r\nconst {PropTypes} = React;\r\n\r\nclass Info extends React.Component {\r\n  static propTypes = {\r\n    toggleWind: PropTypes.func.isRequired,\r\n    toggleSphere: PropTypes.func.isRequired,\r\n    togglePins: PropTypes.func.isRequired,\r\n    toggleRotate: PropTypes.func.isRequired,\r\n    onFrameChange: PropTypes.func.isRequired,\r\n    minTimePerFrame: PropTypes.number.isRequired,\r\n    rotating: PropTypes.bool.isRequired,\r\n    winding: PropTypes.bool.isRequired,\r\n    balling: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  render() {\r\n    const linkStyle = {\r\n      textDecoration: 'underline',\r\n      cursor: 'pointer',\r\n    };\r\n\r\n    const {\r\n      toggleRotate,\r\n      toggleWind,\r\n      toggleSphere,\r\n      togglePins,\r\n      minTimePerFrame,\r\n      onFrameChange,\r\n      rotating,\r\n      winding,\r\n      balling,\r\n      } = this.props;\r\n\r\n    return (<div style={{\r\n      textAlign: 'center',\r\n      padding: 10,\r\n      zIndex: 10,\r\n      width: '100%',\r\n      position: 'absolute',\r\n      color: '#000',\r\n    }}>\r\n      <a href=\"http://threejs.org\" style={{\r\n        color: '#0080ff',\r\n      }}>three.js</a> - Simple Cloth Simulation<br/>\r\n      Verlet integration with Constrains relaxation<br/>\r\n      Toggle: <a onClick={toggleRotate} style={linkStyle}>Camera{rotating ? '*' : null}</a> |\r\n      <span> <a onClick={toggleWind} style={linkStyle}>Wind{winding ? '*' : null}</a></span> |\r\n      <span> <a onClick={toggleSphere} style={linkStyle}>Ball{balling ? '*' : null}</a></span> |\r\n      <span> <a onClick={togglePins} style={linkStyle}>Pins</a></span> |\r\n      <span> Time between frames (ms): <input\r\n        onChange={onFrameChange}\r\n        value={minTimePerFrame}\r\n        type=\"number\"\r\n        style={{width: 40}}\r\n        min=\"0\"/> </span>\r\n      <br/>\r\n      <span>Note: add some time between frames (e.g. 60ms) if you would like to inspect the scene through react devtools, because updating every frame kills the addon.</span>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Info;\r\n\n\n\n","/*\r\n * Cloth Simulation using a relaxed constrains solver\r\n */\r\n\r\n// Suggested Readings\r\n\r\n// Advanced Character Physics by Thomas Jakobsen Character\r\n// http://freespace.virgin.net/hugo.elias/models/m_cloth.htm\r\n// http://en.wikipedia.org/wiki/Cloth_modeling\r\n// http://cg.alexandra.dk/tag/spring-mass-system/\r\n// Real-time Cloth Animation http://www.darwin3d.com/gamedev/articles/col0599.pdf\r\nimport THREE from 'three';\r\n\r\n\r\nfunction plane(width, height) {\r\n  return (u, v) => {\r\n    const x = (u - 0.5) * width;\r\n    const y = (v + 0.5) * height;\r\n    const z = 0;\r\n\r\n    return new THREE.Vector3(x, y, z);\r\n  };\r\n}\r\n\r\nconst DAMPING = 0.03;\r\nconst DRAG = 1 - DAMPING;\r\nconst MASS = 0.1;\r\nconst restDistance = 25;\r\n\r\nconst xSegs = 10; //\r\nconst ySegs = 10; //\r\n\r\nconst clothFunction = plane(restDistance * xSegs, restDistance * ySegs);\r\n\r\nclass Particle {\r\n  constructor(x, y, z, mass) {\r\n    void z;\r\n\r\n    this.position = clothFunction(x, y); // position\r\n    this.previous = clothFunction(x, y); // previous\r\n    this.original = clothFunction(x, y);\r\n    this.a = new THREE.Vector3(0, 0, 0); // acceleration\r\n    this.mass = mass;\r\n    this.invMass = 1 / mass;\r\n    this.tmp = new THREE.Vector3();\r\n    this.tmp2 = new THREE.Vector3();\r\n  }\r\n\r\n  // Force -> Acceleration\r\n  addForce(force) {\r\n    this.a.add(\r\n      this.tmp2.copy(force).multiplyScalar(this.invMass)\r\n    );\r\n  }\r\n\r\n  // Performs verlet integration\r\n  integrate(timesQ) {\r\n    const newPos = this.tmp.subVectors(this.position, this.previous);\r\n    newPos.multiplyScalar(DRAG).add(this.position);\r\n    newPos.add(this.a.multiplyScalar(timesQ));\r\n\r\n    this.tmp = this.previous;\r\n    this.previous = this.position;\r\n    this.position = newPos;\r\n\r\n    this.a.set(0, 0, 0);\r\n  }\r\n}\r\n\r\nclass Cloth {\r\n  static clothFunction = clothFunction;\r\n  static MASS = MASS;\r\n\r\n  constructor(w = 10, h = 10) {\r\n    this.w = w;\r\n    this.h = h;\r\n\r\n    const particles = [];\r\n    const constrains = [];\r\n\r\n    let u;\r\n    let v;\r\n\r\n    // Create particles\r\n    for (v = 0; v <= h; v++) {\r\n      for (u = 0; u <= w; u++) {\r\n        particles.push(\r\n          new Particle(u / w, v / h, 0, MASS)\r\n        );\r\n      }\r\n    }\r\n\r\n    function index(indexU, indexV) {\r\n      return indexU + indexV * (w + 1);\r\n    }\r\n\r\n    // Structural\r\n\r\n    for (v = 0; v < h; v++) {\r\n      for (u = 0; u < w; u++) {\r\n        constrains.push([\r\n          particles[index(u, v)],\r\n          particles[index(u, v + 1)],\r\n          restDistance,\r\n        ]);\r\n\r\n        constrains.push([\r\n          particles[index(u, v)],\r\n          particles[index(u + 1, v)],\r\n          restDistance,\r\n        ]);\r\n      }\r\n    }\r\n\r\n    for (u = w, v = 0; v < h; v++) {\r\n      constrains.push([\r\n        particles[index(u, v)],\r\n        particles[index(u, v + 1)],\r\n        restDistance,\r\n      ]);\r\n    }\r\n\r\n    for (v = h, u = 0; u < w; u++) {\r\n      constrains.push([\r\n        particles[index(u, v)],\r\n        particles[index(u + 1, v)],\r\n        restDistance,\r\n      ]);\r\n    }\r\n\r\n\r\n    this.particles = particles;\r\n    this.constrains = constrains;\r\n\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nexport default Cloth;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\nimport ClothGeometry from './ClothGeometry';\r\nimport Poles from './Poles';\r\nimport Cloth from './Cloth';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nconst { PropTypes } = React;\r\n\r\nimport fragmentShaderDepth from 'raw!./shaders/depth.frag';\r\nimport vertexShaderDepth from 'raw!./shaders/depth.vert';\r\n\r\nclass StaticWorld extends React.Component {\r\n  static propTypes = {\r\n    clothRef: PropTypes.func.isRequired,\r\n    cloth: PropTypes.instanceOf(Cloth).isRequired,\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.directionalLightPosition = new THREE.Vector3(50, 200, 100).multiplyScalar(1.3);\r\n    this.groundPosition = new THREE.Vector3(0, -250, 0);\r\n    this.groundRotation = new THREE.Euler(-Math.PI / 2, 0, 0);\r\n    this.groundRepeat = new THREE.Vector2(25, 25);\r\n\r\n    this.state = {\r\n      ambientLightColor: '666666',\r\n      directionalLightColor: 'dfebff',\r\n      fragmentShaderDepth,\r\n      vertexShaderDepth,\r\n    };\r\n\r\n    // check if HMR is enabled\r\n    if (module.hot) {\r\n      // accept update of dependency\r\n      module.hot.accept('raw!./shaders/depth.frag', () => {\r\n        this.setState({\r\n          fragmentShaderDepth: require('raw!./shaders/depth.frag'),\r\n        });\r\n      });\r\n\r\n      module.hot.accept('raw!./shaders/depth.vert', () => {\r\n        this.setState({\r\n          vertexShaderDepth: require('raw!./shaders/depth.vert'),\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  render() {\r\n    const shadowCameraSize = 300;\r\n\r\n    const {\r\n      ambientLightColor,\r\n      directionalLightColor,\r\n      fragmentShaderDepth: frag,\r\n      vertexShaderDepth: vert,\r\n      } = this.state;\r\n\r\n    return (<object3D>\r\n      <resources>\r\n        <texture\r\n          url=\"textures/patterns/circuit_pattern.png\"\r\n          wrapS={THREE.RepeatWrapping}\r\n          wrapT={THREE.RepeatWrapping}\r\n          anisotropy={16}\r\n          resourceId=\"clothTexture\"\r\n        />\r\n      </resources>\r\n      <ambientLight\r\n        color={Number.parseInt(ambientLightColor, 16)}\r\n      />\r\n      <directionalLight\r\n        color={Number.parseInt(directionalLightColor, 16)}\r\n        intensity={1.75}\r\n        position={this.directionalLightPosition}\r\n        castShadow\r\n        shadowMapWidth={1024}\r\n        shadowMapHeight={1024}\r\n        shadowCameraLeft={-shadowCameraSize}\r\n        shadowCameraRight={shadowCameraSize}\r\n        shadowCameraTop={shadowCameraSize}\r\n        shadowCameraBottom={-shadowCameraSize}\r\n        shadowCameraFar={1000}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n      >\r\n        <ClothGeometry\r\n          ref={this.props.clothRef}\r\n          cloth={this.props.cloth}\r\n        />\r\n        <meshPhongMaterial\r\n          alphaTest={0.5}\r\n          color={0xffffff}\r\n          specular={0x030303}\r\n          emissive={0x111111}\r\n          shininess={10}\r\n          side={THREE.DoubleSide}\r\n        >\r\n          <textureResource\r\n            resourceId=\"clothTexture\"\r\n          />\r\n        </meshPhongMaterial>\r\n        <shaderMaterial\r\n          slot=\"customDepthMaterial\"\r\n          fragmentShader={frag}\r\n          vertexShader={vert}\r\n        >\r\n          <uniforms>\r\n            <uniform\r\n              name=\"texture\"\r\n              type=\"t\"\r\n            >\r\n              <textureResource\r\n                resourceId=\"clothTexture\"\r\n              />\r\n            </uniform>\r\n          </uniforms>\r\n        </shaderMaterial>\r\n      </mesh>\r\n      { /* <arrowHelper\r\n       direction={this.arrowDirection}\r\n       origin={this.arrowOrigin}\r\n       length={this.arrowLength}\r\n       color={0xff0000}\r\n       position={this.arrowPosition}\r\n       /> */ }\r\n      <mesh\r\n        position={this.groundPosition}\r\n        rotation={this.groundRotation}\r\n        receiveShadow\r\n      >\r\n        <planeBufferGeometry\r\n          width={20000}\r\n          height={20000}\r\n        />\r\n        <meshPhongMaterial\r\n          color={0xffffff}\r\n          specular={0x111111}\r\n        >\r\n          <texture\r\n            url=\"textures/terrain/grasslight-big.jpg\"\r\n            wrapS={THREE.RepeatWrapping}\r\n            wrapT={THREE.RepeatWrapping}\r\n            repeat={this.groundRepeat}\r\n            anisotropy={16}\r\n          />\r\n        </meshPhongMaterial>\r\n      </mesh>\r\n      <Poles/>\r\n    </object3D>);\r\n  }\r\n}\r\n\r\nexport default StaticWorld;\r\n\n\n\n","module.exports = { \"default\": require(\"core-js/library/fn/number/parse-int\"), __esModule: true };\n\n\n","require('../../modules/es6.number.parse-int');\nmodule.exports = parseInt;\n\n\n","// 20.1.2.13 Number.parseInt(string, radix)\nvar $export = require('./$.export');\n\n$export($export.S, 'Number', {parseInt: parseInt});\n\n\n","import React from 'react';\r\n\r\nconst {PropTypes} = React;\r\n\r\nimport Cloth from './Cloth';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nclass ClothGeometry extends React.Component {\r\n  static propTypes = {\r\n    cloth: PropTypes.instanceOf(Cloth).isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const geometry = this.refs.geometry;\r\n\r\n    geometry.computeFaceNormals();\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  render() {\r\n    const {\r\n      cloth,\r\n      } = this.props;\r\n\r\n    return (<parametricGeometry\r\n      ref={'geometry'}\r\n      parametricFunction={Cloth.clothFunction}\r\n      slices={cloth.w}\r\n      stacks={cloth.h}\r\n      dynamic\r\n    />);\r\n  }\r\n}\r\n\r\nexport default ClothGeometry;\r\n\n\n\n","import React from 'react';\r\n\r\nimport THREE from 'three';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nclass Poles extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      poleMaterialColor: Number(0xffffff).toString(16),\r\n      poleMaterialSpecular: Number(0x111111).toString(16),\r\n      poleMaterialShininess: 100,\r\n      sidePolePositions: [\r\n        new THREE.Vector3(-125, -62, 0),\r\n        new THREE.Vector3(125, -62, 0),\r\n      ],\r\n      boxPositions: [\r\n        new THREE.Vector3(125, -250, 0),\r\n        new THREE.Vector3(-125, -250, 0),\r\n      ],\r\n      topPolePosition: new THREE.Vector3(0, -250 + 750 / 2, 0),\r\n      subResource: false,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  render() {\r\n    return (<object3D>\r\n      <resources>\r\n        <boxGeometry\r\n          resourceId=\"poleGeometry\"\r\n          width={5}\r\n          height={375}\r\n          depth={5}/>\r\n        <boxGeometry\r\n          resourceId=\"boxGeometry\"\r\n          width={10}\r\n          height={10}\r\n          depth={10}/>\r\n        <meshPhongMaterial\r\n          resourceId=\"poleMaterial\"\r\n          color={Number.parseInt(this.state.poleMaterialColor, 16)}\r\n          specular={Number.parseInt(this.state.poleMaterialSpecular, 16)}\r\n          shininess={this.state.poleMaterialShininess}\r\n        />\r\n      </resources>\r\n      {this.state.sidePolePositions.map((position, i) => {\r\n        return (<mesh\r\n          key={i}\r\n          position={position}\r\n          receiveShadow\r\n          castShadow\r\n        >\r\n          <geometryResource\r\n            resourceId=\"poleGeometry\"\r\n          />\r\n          <materialResource\r\n            resourceId=\"poleMaterial\"\r\n          />\r\n        </mesh>);\r\n      })}\r\n      <mesh\r\n        position={this.state.topPolePosition}\r\n        receiveShadow\r\n        castShadow\r\n      >\r\n        <boxGeometry\r\n          width={255}\r\n          height={5}\r\n          depth={5}\r\n        />\r\n        <materialResource\r\n          resourceId=\"poleMaterial\"\r\n        />\r\n      </mesh>\r\n      <object3D>\r\n        { this.state.subResource ? <resources>\r\n          {this.state.subResource ? <meshPhongMaterial\r\n            resourceId=\"poleMaterial\"\r\n            color={0x00ff00}\r\n            specular={0x111111}\r\n            shininess={100}\r\n          /> : null}\r\n          {\r\n            <sphereGeometry resourceId=\"boxGeometry\"\r\n                            radius={20}/> }\r\n        </resources> : null }\r\n        {this.state.boxPositions.map((position, i) => {\r\n          return (<mesh\r\n            key={i}\r\n            position={position}\r\n            receiveShadow\r\n            castShadow\r\n          >\r\n            <geometryResource\r\n              resourceId=\"boxGeometry\"\r\n            />\r\n            <materialResource\r\n              resourceId=\"poleMaterial\"\r\n            />\r\n          </mesh>);\r\n        })}\r\n      </object3D>\r\n    </object3D>);\r\n  }\r\n}\r\n\r\nexport default Poles;\r\n\n\n\n","module.exports = \"uniform sampler2D texture;\\r\\nvarying vec2 vUV;\\r\\n\\r\\nvec4 pack_depth( const in float depth ) {\\r\\n  const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\r\\n  const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\r\\n  vec4 res = fract( depth * bit_shift );\\r\\n  res -= res.xxyz * bit_mask;\\r\\n\\r\\n  return res;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n  vec4 pixel = texture2D( texture, vUV );\\r\\n\\r\\n  if ( pixel.a < 0.5 ) discard;\\r\\n\\r\\n  gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\\r\\n}\\r\\n\"\n\n\n","module.exports = \"varying vec2 vUV;\\r\\n\\r\\nvoid main() {\\r\\n  vUV = 0.75 * uv;\\r\\n\\r\\n  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\r\\n\\r\\n  gl_Position = projectionMatrix * mvPosition;\\r\\n}\\r\\n\"\n\n\n","import React from 'react';\r\n\r\nimport THREE from 'three';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nconst { PropTypes } = React;\r\n\r\nconst ballSize = 60; // 40\r\n\r\nclass Sphere extends React.Component {\r\n  static propTypes = {\r\n    visible: PropTypes.bool.isRequired,\r\n    position: PropTypes.instanceOf(THREE.Vector3).isRequired,\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      color: '0xaaaaaa',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  render() {\r\n    const {\r\n      visible,\r\n      position,\r\n      } = this.props;\r\n\r\n    return (<mesh\r\n      castShadow\r\n      receiveShadow\r\n      visible={visible}\r\n      position={position}\r\n    >\r\n      <sphereGeometry\r\n        radius={ballSize}\r\n        widthSegments={20}\r\n        heightSegments={20}\r\n      />\r\n      <meshPhongMaterial\r\n        color={Number.parseInt(this.state.color, 16)}\r\n      />\r\n    </mesh>);\r\n  }\r\n}\r\n\r\nexport default Sphere;\r\n\n\n\n","import THREE from 'three';\r\n\r\n/**\r\n * @author Eberhard Graether / http://egraether.com/\r\n * @author Mark Lundin  / http://mark-lundin.com\r\n * @author Simone Manini / http://daron1337.github.io\r\n * @author Luca Antiga  / http://lantiga.github.io\r\n */\r\n\r\nclass TrackballControls extends THREE.EventDispatcher {\r\n  constructor(object, domElement) {\r\n    super();\r\n\r\n    const _this = this;\r\n    const STATE = {NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4};\r\n\r\n    this.object = object;\r\n    this.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n    // API\r\n\r\n    this.enabled = true;\r\n\r\n    this.screen = {left: 0, top: 0, width: 0, height: 0};\r\n\r\n    this.rotateSpeed = 1.0;\r\n    this.zoomSpeed = 1.2;\r\n    this.panSpeed = 0.3;\r\n\r\n    this.noRotate = false;\r\n    this.noZoom = false;\r\n    this.noPan = false;\r\n\r\n    this.staticMoving = false;\r\n    this.dynamicDampingFactor = 0.2;\r\n\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    this.keys = [\r\n      65/* A */,\r\n      83/* S */,\r\n      68/* D */,\r\n    ];\r\n\r\n    // internals\r\n\r\n    this.target = new THREE.Vector3();\r\n\r\n    const EPS = 0.000001;\r\n\r\n    const lastPosition = new THREE.Vector3();\r\n\r\n    let _state = STATE.NONE;\r\n    let _prevState = STATE.NONE;\r\n\r\n    const _eye = new THREE.Vector3();\r\n    const _movePrev = new THREE.Vector2();\r\n    const _moveCurr = new THREE.Vector2();\r\n    const _lastAxis = new THREE.Vector3();\r\n\r\n    let _lastAngle = 0;\r\n\r\n    const _zoomStart = new THREE.Vector2();\r\n    const _zoomEnd = new THREE.Vector2();\r\n\r\n    let _touchZoomDistanceStart = 0;\r\n    let _touchZoomDistanceEnd = 0;\r\n    const _panStart = new THREE.Vector2();\r\n    const _panEnd = new THREE.Vector2();\r\n\r\n    // for reset\r\n\r\n    this.target0 = this.target.clone();\r\n    this.position0 = this.object.position.clone();\r\n    this.up0 = this.object.up.clone();\r\n\r\n    // events\r\n\r\n    const changeEvent = {type: 'change'};\r\n    const startEvent = {type: 'start'};\r\n    const endEvent = {type: 'end'};\r\n\r\n    // methods\r\n\r\n    this.handleResize = () => {\r\n      if (this.domElement === document) {\r\n        this.screen.left = 0;\r\n        this.screen.top = 0;\r\n        this.screen.width = window.innerWidth;\r\n        this.screen.height = window.innerHeight;\r\n      } else {\r\n        const box = this.domElement.getBoundingClientRect();\r\n        // adjustments come from similar code in the jquery offset() function\r\n        const d = this.domElement.ownerDocument.documentElement;\r\n        this.screen.left = box.left + window.pageXOffset - d.clientLeft;\r\n        this.screen.top = box.top + window.pageYOffset - d.clientTop;\r\n        this.screen.width = box.width;\r\n        this.screen.height = box.height;\r\n      }\r\n    };\r\n\r\n    this.handleEvent = (event) => {\r\n      if (typeof this[event.type] === 'function') {\r\n        this[event.type](event);\r\n      }\r\n    };\r\n\r\n    const getMouseOnScreen = ( function wrapper() {\r\n      const vector = new THREE.Vector2();\r\n\r\n      return (pageX, pageY) => {\r\n        vector.set(\r\n          ( pageX - _this.screen.left ) / _this.screen.width,\r\n          ( pageY - _this.screen.top ) / _this.screen.height\r\n        );\r\n\r\n        return vector;\r\n      };\r\n    }() );\r\n\r\n    const getMouseOnCircle = ( function wrapper() {\r\n      const vector = new THREE.Vector2();\r\n\r\n      return (pageX, pageY) => {\r\n        vector.set(\r\n          ( ( pageX - _this.screen.width * 0.5 - _this.screen.left ) / ( _this.screen.width * 0.5 ) ),\r\n          ( ( _this.screen.height + 2 * ( _this.screen.top - pageY ) ) / _this.screen.width ) // screen.width intentional\r\n        );\r\n\r\n        return vector;\r\n      };\r\n    }() );\r\n\r\n    this.rotateCamera = ( function wrapper() {\r\n      const axis = new THREE.Vector3();\r\n      const quaternion = new THREE.Quaternion();\r\n      const eyeDirection = new THREE.Vector3();\r\n      const objectUpDirection = new THREE.Vector3();\r\n      const objectSidewaysDirection = new THREE.Vector3();\r\n      const moveDirection = new THREE.Vector3();\r\n\r\n      let angle;\r\n\r\n      return function rotateCamera() {\r\n        moveDirection.set(_moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0);\r\n        angle = moveDirection.length();\r\n\r\n        if (angle) {\r\n          _eye.copy(_this.object.position).sub(_this.target);\r\n\r\n          eyeDirection.copy(_eye).normalize();\r\n          objectUpDirection.copy(_this.object.up).normalize();\r\n          objectSidewaysDirection.crossVectors(objectUpDirection, eyeDirection).normalize();\r\n\r\n          objectUpDirection.setLength(_moveCurr.y - _movePrev.y);\r\n          objectSidewaysDirection.setLength(_moveCurr.x - _movePrev.x);\r\n\r\n          moveDirection.copy(objectUpDirection.add(objectSidewaysDirection));\r\n\r\n          axis.crossVectors(moveDirection, _eye).normalize();\r\n\r\n          angle *= _this.rotateSpeed;\r\n          quaternion.setFromAxisAngle(axis, angle);\r\n\r\n          _eye.applyQuaternion(quaternion);\r\n          _this.object.up.applyQuaternion(quaternion);\r\n\r\n          _lastAxis.copy(axis);\r\n          _lastAngle = angle;\r\n        } else if (!_this.staticMoving && _lastAngle) {\r\n          _lastAngle *= Math.sqrt(1.0 - _this.dynamicDampingFactor);\r\n          _eye.copy(_this.object.position).sub(_this.target);\r\n          quaternion.setFromAxisAngle(_lastAxis, _lastAngle);\r\n          _eye.applyQuaternion(quaternion);\r\n          _this.object.up.applyQuaternion(quaternion);\r\n        }\r\n\r\n        _movePrev.copy(_moveCurr);\r\n      };\r\n    }() );\r\n\r\n    this.zoomCamera = () => {\r\n      let factor;\r\n\r\n      if (_state === STATE.TOUCH_ZOOM_PAN) {\r\n        factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;\r\n        _touchZoomDistanceStart = _touchZoomDistanceEnd;\r\n        _eye.multiplyScalar(factor);\r\n      } else {\r\n        factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * _this.zoomSpeed;\r\n\r\n        if (factor !== 1.0 && factor > 0.0) {\r\n          _eye.multiplyScalar(factor);\r\n\r\n          if (_this.staticMoving) {\r\n            _zoomStart.copy(_zoomEnd);\r\n          } else {\r\n            _zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    this.panCamera = ( function wrapper() {\r\n      const mouseChange = new THREE.Vector2();\r\n      const objectUp = new THREE.Vector3();\r\n      const pan = new THREE.Vector3();\r\n\r\n      return function panCamera() {\r\n        mouseChange.copy(_panEnd).sub(_panStart);\r\n\r\n        if (mouseChange.lengthSq()) {\r\n          mouseChange.multiplyScalar(_eye.length() * _this.panSpeed);\r\n\r\n          pan.copy(_eye).cross(_this.object.up).setLength(mouseChange.x);\r\n          pan.add(objectUp.copy(_this.object.up).setLength(mouseChange.y));\r\n\r\n          _this.object.position.add(pan);\r\n          _this.target.add(pan);\r\n\r\n          if (_this.staticMoving) {\r\n            _panStart.copy(_panEnd);\r\n          } else {\r\n            _panStart.add(mouseChange.subVectors(_panEnd, _panStart).multiplyScalar(_this.dynamicDampingFactor));\r\n          }\r\n        }\r\n      };\r\n    }() );\r\n\r\n    this.checkDistances = () => {\r\n      if (!_this.noZoom || !_this.noPan) {\r\n        if (_eye.lengthSq() > _this.maxDistance * _this.maxDistance) {\r\n          _this.object.position.addVectors(_this.target, _eye.setLength(_this.maxDistance));\r\n          _zoomStart.copy(_zoomEnd);\r\n        }\r\n\r\n        if (_eye.lengthSq() < _this.minDistance * _this.minDistance) {\r\n          _this.object.position.addVectors(_this.target, _eye.setLength(_this.minDistance));\r\n          _zoomStart.copy(_zoomEnd);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.update = () => {\r\n      _eye.subVectors(_this.object.position, _this.target);\r\n\r\n      if (!_this.noRotate) {\r\n        _this.rotateCamera();\r\n      }\r\n\r\n      if (!_this.noZoom) {\r\n        _this.zoomCamera();\r\n      }\r\n\r\n      if (!_this.noPan) {\r\n        _this.panCamera();\r\n      }\r\n\r\n      _this.object.position.addVectors(_this.target, _eye);\r\n\r\n      _this.checkDistances();\r\n\r\n      _this.object.lookAt(_this.target);\r\n\r\n      if (lastPosition.distanceToSquared(_this.object.position) > EPS) {\r\n        _this.dispatchEvent(changeEvent);\r\n\r\n        lastPosition.copy(_this.object.position);\r\n      }\r\n    };\r\n\r\n    this.reset = () => {\r\n      _state = STATE.NONE;\r\n      _prevState = STATE.NONE;\r\n\r\n      _this.target.copy(_this.target0);\r\n      _this.object.position.copy(_this.position0);\r\n      _this.object.up.copy(_this.up0);\r\n\r\n      _eye.subVectors(_this.object.position, _this.target);\r\n\r\n      _this.object.lookAt(_this.target);\r\n\r\n      _this.dispatchEvent(changeEvent);\r\n\r\n      lastPosition.copy(_this.object.position);\r\n    };\r\n\r\n    // listeners\r\n\r\n    function keydown(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      window.removeEventListener('keydown', keydown);\r\n\r\n      _prevState = _state;\r\n\r\n      if (_state !== STATE.NONE) {\r\n        return;\r\n      }\r\n\r\n      if (event.keyCode === _this.keys[STATE.ROTATE] && !_this.noRotate) {\r\n        _state = STATE.ROTATE;\r\n      } else if (event.keyCode === _this.keys[STATE.ZOOM] && !_this.noZoom) {\r\n        _state = STATE.ZOOM;\r\n      } else if (event.keyCode === _this.keys[STATE.PAN] && !_this.noPan) {\r\n        _state = STATE.PAN;\r\n      }\r\n    }\r\n\r\n    function keyup() {\r\n      if (_this.enabled === false) return;\r\n\r\n      _state = _prevState;\r\n\r\n      window.addEventListener('keydown', keydown, false);\r\n    }\r\n\r\n\r\n    function mousemove(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      if (_state === STATE.ROTATE && !_this.noRotate) {\r\n        _movePrev.copy(_moveCurr);\r\n        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\r\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\r\n        _zoomEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\r\n      } else if (_state === STATE.PAN && !_this.noPan) {\r\n        _panEnd.copy(getMouseOnScreen(event.pageX, event.pageY));\r\n      }\r\n    }\r\n\r\n    function mouseup(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      _state = STATE.NONE;\r\n\r\n      document.removeEventListener('mousemove', mousemove);\r\n      document.removeEventListener('mouseup', mouseup);\r\n      _this.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function mousedown(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      if (_state === STATE.NONE) {\r\n        _state = event.button;\r\n      }\r\n\r\n      if (_state === STATE.ROTATE && !_this.noRotate) {\r\n        _moveCurr.copy(getMouseOnCircle(event.pageX, event.pageY));\r\n        _movePrev.copy(_moveCurr);\r\n      } else if (_state === STATE.ZOOM && !_this.noZoom) {\r\n        _zoomStart.copy(getMouseOnScreen(event.pageX, event.pageY));\r\n        _zoomEnd.copy(_zoomStart);\r\n      } else if (_state === STATE.PAN && !_this.noPan) {\r\n        _panStart.copy(getMouseOnScreen(event.pageX, event.pageY));\r\n        _panEnd.copy(_panStart);\r\n      }\r\n\r\n      document.addEventListener('mousemove', mousemove, false);\r\n      document.addEventListener('mouseup', mouseup, false);\r\n\r\n      _this.dispatchEvent(startEvent);\r\n    }\r\n\r\n\r\n    function mousewheel(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      let delta = 0;\r\n\r\n      if (event.wheelDelta) {\r\n        // WebKit / Opera / Explorer 9\r\n\r\n        delta = event.wheelDelta / 40;\r\n      } else if (event.detail) {\r\n        // Firefox\r\n\r\n        delta = -event.detail / 3;\r\n      }\r\n\r\n      _zoomStart.y += delta * 0.01;\r\n      _this.dispatchEvent(startEvent);\r\n      _this.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function touchstart(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n      case 1:\r\n        _state = STATE.TOUCH_ROTATE;\r\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\r\n        _movePrev.copy(_moveCurr);\r\n        break;\r\n\r\n      case 2:\r\n        _state = STATE.TOUCH_ZOOM_PAN;\r\n        const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n        const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n        _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        const x = ( event.touches[0].pageX + event.touches[1].pageX ) / 2;\r\n        const y = ( event.touches[0].pageY + event.touches[1].pageY ) / 2;\r\n        _panStart.copy(getMouseOnScreen(x, y));\r\n        _panEnd.copy(_panStart);\r\n        break;\r\n\r\n      default:\r\n        _state = STATE.NONE;\r\n\r\n      }\r\n      _this.dispatchEvent(startEvent);\r\n    }\r\n\r\n    function touchmove(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      switch (event.touches.length) {\r\n\r\n      case 1:\r\n        _movePrev.copy(_moveCurr);\r\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\r\n        break;\r\n\r\n      case 2:\r\n        const dx = event.touches[0].pageX - event.touches[1].pageX;\r\n        const dy = event.touches[0].pageY - event.touches[1].pageY;\r\n        _touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        const x = ( event.touches[0].pageX + event.touches[1].pageX ) / 2;\r\n        const y = ( event.touches[0].pageY + event.touches[1].pageY ) / 2;\r\n        _panEnd.copy(getMouseOnScreen(x, y));\r\n        break;\r\n\r\n      default:\r\n        _state = STATE.NONE;\r\n      }\r\n    }\r\n\r\n    function touchend(event) {\r\n      if (_this.enabled === false) return;\r\n\r\n      switch (event.touches.length) {\r\n      default:\r\n        // no touches\r\n        break;\r\n      case 1:\r\n        _moveCurr.copy(getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\r\n        _movePrev.copy(_moveCurr);\r\n        break;\r\n\r\n      case 2:\r\n        _touchZoomDistanceStart = _touchZoomDistanceEnd = 0;\r\n\r\n        const x = ( event.touches[0].pageX + event.touches[1].pageX ) / 2;\r\n        const y = ( event.touches[0].pageY + event.touches[1].pageY ) / 2;\r\n        _panEnd.copy(getMouseOnScreen(x, y));\r\n        _panStart.copy(_panEnd);\r\n        break;\r\n\r\n      }\r\n\r\n      _state = STATE.NONE;\r\n      _this.dispatchEvent(endEvent);\r\n    }\r\n\r\n    function contextmenu(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.dispose = () => {\r\n      this.domElement.removeEventListener('contextmenu', contextmenu, false);\r\n      this.domElement.removeEventListener('mousedown', mousedown, false);\r\n      this.domElement.removeEventListener('mousewheel', mousewheel, false);\r\n      this.domElement.removeEventListener('DOMMouseScroll', mousewheel, false); // firefox\r\n\r\n      this.domElement.removeEventListener('touchstart', touchstart, false);\r\n      this.domElement.removeEventListener('touchend', touchend, false);\r\n      this.domElement.removeEventListener('touchmove', touchmove, false);\r\n\r\n      document.removeEventListener('mousemove', mousemove, false);\r\n      document.removeEventListener('mouseup', mouseup, false);\r\n\r\n      window.removeEventListener('keydown', keydown, false);\r\n      window.removeEventListener('keyup', keyup, false);\r\n    };\r\n\r\n    this.domElement.addEventListener('contextmenu', contextmenu, false);\r\n    this.domElement.addEventListener('mousedown', mousedown, false);\r\n    this.domElement.addEventListener('mousewheel', mousewheel, false);\r\n    this.domElement.addEventListener('DOMMouseScroll', mousewheel, false); // firefox\r\n\r\n    this.domElement.addEventListener('touchstart', touchstart, false);\r\n    this.domElement.addEventListener('touchend', touchend, false);\r\n    this.domElement.addEventListener('touchmove', touchmove, false);\r\n\r\n    window.addEventListener('keydown', keydown, false);\r\n    window.addEventListener('keyup', keyup, false);\r\n\r\n    this.handleResize();\r\n\r\n    // force an update at start\r\n    this.update();\r\n  }\r\n}\r\n\r\nexport default TrackballControls;\r\n\n\n\n","import React from 'react';\r\n\r\nimport THREE from 'three';\r\nimport Stats from 'stats.js';\r\n\r\nimport React3 from 'react-three-renderer';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\n\r\nclass Geometries extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.directionalLightPosition = new THREE.Vector3(0, 1, 0);\r\n\r\n    this.objectPositions = [\r\n      new THREE.Vector3(-400, 0, 200),\r\n      new THREE.Vector3(-200, 0, 200),\r\n      new THREE.Vector3(0, 0, 200),\r\n      new THREE.Vector3(200, 0, 200),\r\n      new THREE.Vector3(-400, 0, 0),\r\n      new THREE.Vector3(-200, 0, 0),\r\n      new THREE.Vector3(0, 0, 0),\r\n      new THREE.Vector3(200, 0, 0),\r\n      new THREE.Vector3(400, 0, 0),\r\n\r\n      new THREE.Vector3(-400, 0, -200),\r\n      new THREE.Vector3(-200, 0, -200),\r\n      new THREE.Vector3(0, 0, -200),\r\n      new THREE.Vector3(200, 0, -200),\r\n      new THREE.Vector3(400, 0, -200),\r\n    ];\r\n\r\n    this.lathePoints = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n      this.lathePoints.push(new THREE.Vector3(Math.sin(i * 0.2) * Math.sin(i * 0.1) * 15 + 50, 0, ( i - 5 ) * 2));\r\n    }\r\n\r\n    this.arrowDir = new THREE.Vector3(0, 1, 0);\r\n    this.arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n\r\n    this.scenePosition = new THREE.Vector3(0, 0, 0);\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      timer: Date.now() * 0.0001,\r\n    };\r\n  }\r\n\r\n  _onAnimate = () => {\r\n    this._onAnimateInternal();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    this.refs.container.appendChild(this.stats.domElement);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.stats;\r\n  }\r\n\r\n  _onAnimateInternal() {\r\n    const timer = Date.now() * 0.0001;\r\n\r\n    this.setState({\r\n      timer,\r\n    });\r\n\r\n    this.stats.update();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      timer,\r\n      } = this.state;\r\n\r\n    const objectRotation = new THREE.Euler(\r\n      timer * 5,\r\n      timer * 2.5,\r\n      0\r\n    );\r\n\r\n    return (<div ref=\"container\">\r\n      <React3\r\n        width={width}\r\n        height={height}\r\n        antialias\r\n        pixelRatio={window.devicePixelRatio}\r\n        mainCamera=\"mainCamera\"\r\n        onAnimate={this._onAnimate}\r\n      >\r\n        <resources>\r\n          <texture\r\n            resourceId=\"texture\"\r\n            url=\"textures/UV_Grid_Sm.jpg\"\r\n            wrapS={THREE.RepeatWrapping}\r\n            wrapT={THREE.RepeatWrapping}\r\n            anisotropy={16}\r\n          />\r\n          <meshLambertMaterial\r\n            resourceId=\"material\"\r\n            side={THREE.DoubleSide}\r\n          >\r\n            <textureResource\r\n              resourceId=\"texture\"\r\n            />\r\n          </meshLambertMaterial>\r\n        </resources>\r\n        <scene>\r\n          <perspectiveCamera\r\n            fov={45}\r\n            aspect={width / height}\r\n            near={1}\r\n            far={2000}\r\n            lookAt={this.scenePosition}\r\n            name=\"mainCamera\"\r\n            position={new THREE.Vector3(\r\n              Math.cos(timer) * 800,\r\n              400,\r\n              Math.sin(timer) * 800\r\n            )}\r\n          />\r\n          <ambientLight\r\n            color={0x404040}\r\n          />\r\n          <directionalLight\r\n            color={0xffffff}\r\n            position={this.directionalLightPosition}\r\n          />\r\n          <mesh\r\n            position={this.objectPositions[0]}\r\n            rotation={objectRotation}\r\n          >\r\n            <sphereGeometry\r\n              radius={75}\r\n              widthSegments={20}\r\n              heightSegments={10}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[1]}\r\n            rotation={objectRotation}\r\n          >\r\n            <icosahedronGeometry\r\n              radius={75}\r\n              detail={1}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[2]}\r\n            rotation={objectRotation}\r\n          >\r\n            <octahedronGeometry\r\n              radius={75}\r\n              detail={2}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[3]}\r\n            rotation={objectRotation}\r\n          >\r\n            <tetrahedronGeometry\r\n              radius={75}\r\n              detail={0}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[4]}\r\n            rotation={objectRotation}\r\n          >\r\n            <planeBufferGeometry\r\n              width={100}\r\n              height={100}\r\n              widthSegments={4}\r\n              heightSegments={4}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[5]}\r\n            rotation={objectRotation}\r\n          >\r\n            <boxGeometry\r\n              width={100}\r\n              height={100}\r\n              depth={100}\r\n              widthSegments={4}\r\n              heightSegments={4}\r\n              depthSegments={4}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[6]}\r\n            rotation={objectRotation}\r\n          >\r\n            <circleGeometry\r\n              radius={50}\r\n              segments={20}\r\n              thetaStart={0}\r\n              thetaLength={Math.PI * 2}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[7]}\r\n            rotation={objectRotation}\r\n          >\r\n            <ringGeometry\r\n              innerRadius={10}\r\n              outerRadius={50}\r\n              thetaSegments={20}\r\n              phiSegments={5}\r\n              thetaStart={0}\r\n              thetaLength={Math.PI * 2}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[8]}\r\n            rotation={objectRotation}\r\n          >\r\n            <cylinderGeometry\r\n              radiusTop={25}\r\n              radiusBottom={75}\r\n              height={100}\r\n              radialSegments={40}\r\n              heightSegments={5}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[9]}\r\n            rotation={objectRotation}\r\n          >\r\n            <latheGeometry\r\n              points={this.lathePoints}\r\n              segments={20}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[10]}\r\n            rotation={objectRotation}\r\n          >\r\n            <torusGeometry\r\n              radius={50}\r\n              tube={20}\r\n              radialSegments={20}\r\n              tubularSegments={20}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <mesh\r\n            position={this.objectPositions[11]}\r\n            rotation={objectRotation}\r\n          >\r\n            <torusKnotGeometry\r\n              radius={50}\r\n              tube={10}\r\n              radialSegments={50}\r\n              tubularSegments={20}\r\n            />\r\n            <materialResource\r\n              resourceId=\"material\"\r\n            />\r\n          </mesh>\r\n          <axisHelper\r\n            position={this.objectPositions[12]}\r\n            size={50}\r\n            rotation={objectRotation}\r\n          />\r\n          <arrowHelper\r\n            dir={this.arrowDir}\r\n            origin={this.arrowOrigin}\r\n            length={50}\r\n            position={this.objectPositions[13]}\r\n            rotation={objectRotation}\r\n          />\r\n        </scene>\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Geometries;\r\n\n\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport THREE from 'three';\r\nimport ExampleBase from './../ExampleBase';\r\n\r\nimport React3 from 'react-three-renderer';\r\n\r\nimport Info from './Info';\r\n\r\nimport PointCloud from './PointCloud';\r\n\r\nimport TrackballControls from '../../ref/trackball';\r\n\r\nconst perspectiveCameraName = 'perspectiveCamera';\r\nconst orthographicCameraName = 'orthographicCamera';\r\nconst mainCameraName = 'mainCamera';\r\n\r\nconst perspectiveCameraRotation = new THREE.Euler(0, Math.PI, 0);\r\nconst orthographicCameraRotation = new THREE.Euler(0, Math.PI, 0);\r\n\r\nconst spherePosition = new THREE.Vector3(0, 0, 150);\r\n\r\nclass WebGLCameraExample extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const r = Date.now() * 0.0005;\r\n\r\n    this.state = {\r\n      ... this.state,\r\n      meshPosition: new THREE.Vector3(Math.cos(r), Math.sin(r), Math.sin(r)).multiplyScalar(700),\r\n      childPosition: new THREE.Vector3(70 * Math.cos(2 * r), 150, 70 * Math.sin(r)),\r\n      activeCameraName: perspectiveCameraName,\r\n      paused: false,\r\n      mainCameraPosition: new THREE.Vector3(0, 0, 2500),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this._onKeyDown, false);\r\n\r\n    const controls = new TrackballControls(this.refs.mainCamera, ReactDOM.findDOMNode(this.refs.react3));\r\n    controls.rotateSpeed = 1.0;\r\n    controls.zoomSpeed = 1.2;\r\n    controls.panSpeed = 0.8;\r\n\r\n    controls.noZoom = false;\r\n    controls.noPan = false;\r\n\r\n    controls.staticMoving = true;\r\n    controls.dynamicDampingFactor = 0.3;\r\n\r\n    controls.addEventListener('change', () => {\r\n      this.setState({\r\n        mainCameraPosition: this.refs.mainCamera.position,\r\n      });\r\n    });\r\n\r\n    this.controls = controls;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this._onKeyDown, false);\r\n\r\n    this.controls.dispose();\r\n    delete this.controls;\r\n  }\r\n\r\n  _onKeyDown = (event) => {\r\n    switch (event.keyCode) {\r\n    default:\r\n      break;\r\n    case 79: // O\r\n      this.setState({\r\n        activeCameraName: orthographicCameraName,\r\n      });\r\n      break;\r\n    case 80: // P\r\n      this.setState({\r\n        activeCameraName: perspectiveCameraName,\r\n      });\r\n\r\n      break;\r\n    }\r\n  };\r\n\r\n  _onAnimate = () => {\r\n    this.controls.update();\r\n\r\n    if (this.state.paused) {\r\n      return;\r\n    }\r\n\r\n    const r = Date.now() * 0.0005;\r\n\r\n    this.setState({\r\n      r,\r\n      meshPosition: new THREE.Vector3(Math.cos(r), Math.sin(r), Math.sin(r)).multiplyScalar(700),\r\n      childPosition: new THREE.Vector3(70 * Math.cos(2 * r), 150, 70 * Math.sin(r)),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      meshPosition,\r\n      childPosition,\r\n      r,\r\n      } = this.state;\r\n\r\n    const aspectRatio = 0.5 * width / height;\r\n\r\n    return (<div>\r\n      <Info\r\n        pause={() => {\r\n          this.setState({\r\n            paused: !this.state.paused,\r\n          });\r\n        }}\r\n        frame={() => {\r\n          this.setState({\r\n            paused: false,\r\n          }, () => {\r\n            this._onAnimate();\r\n            this.setState({\r\n              paused: true,\r\n            });\r\n          });\r\n        }}\r\n      />\r\n      <React3\r\n        ref=\"react3\"\r\n        width={width}\r\n        height={height}\r\n        antialias\r\n        onAnimate={this._onAnimate}\r\n      >\r\n        <viewport\r\n          x={0}\r\n          y={0}\r\n          width={width / 2}\r\n          height={height}\r\n          cameraName={this.state.activeCameraName}/>\r\n        <viewport\r\n          x={width / 2}\r\n          y={0}\r\n          width={width / 2}\r\n          height={height}\r\n          cameraName={mainCameraName}/>\r\n        <scene>\r\n          <perspectiveCamera\r\n            ref=\"mainCamera\"\r\n            name={mainCameraName}\r\n            fov={50}\r\n            aspect={aspectRatio}\r\n            near={1}\r\n            far={10000}\r\n            position={this.state.mainCameraPosition}/>\r\n          <object3D\r\n            lookAt={meshPosition}>\r\n            <perspectiveCamera\r\n              name={perspectiveCameraName}\r\n              fov={35 + 30 * Math.sin( 0.5 * r )}\r\n              aspect={aspectRatio}\r\n              near={150}\r\n              far={meshPosition.length()}\r\n              rotation={perspectiveCameraRotation}/>\r\n            <orthographicCamera\r\n              name={orthographicCameraName}\r\n              left={0.5 * width / -2}\r\n              right={0.5 * width / 2}\r\n              top={height / 2}\r\n              bottom={height / -2}\r\n              near={150}\r\n              far={meshPosition.length()}\r\n              rotation={orthographicCameraRotation}/>\r\n            <mesh\r\n              position={spherePosition}>\r\n              <sphereGeometry\r\n                radius={5}\r\n                widthSegments={16}\r\n                heightSegments={8}/>\r\n              <meshBasicMaterial\r\n                color={0x0000ff}\r\n                wireframe/>\r\n            </mesh>\r\n          </object3D>\r\n          <cameraHelper\r\n            cameraName={this.state.activeCameraName}/>\r\n          <object3D\r\n            position={meshPosition}>\r\n            <mesh>\r\n              <sphereGeometry\r\n                radius={100}\r\n                widthSegments={16}\r\n                heightSegments={8}/>\r\n              <meshBasicMaterial\r\n                color={0xffffff}\r\n                wireframe/>\r\n            </mesh>\r\n            <mesh\r\n              position={childPosition}>\r\n              <sphereGeometry\r\n                radius={50}\r\n                widthSegments={16}\r\n                heightSegments={8}/>\r\n              <meshBasicMaterial\r\n                color={0x00ff00}\r\n                wireframe/>\r\n            </mesh>\r\n          </object3D>\r\n          {\r\n            <PointCloud/>\r\n          }\r\n        </scene>\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default WebGLCameraExample;\r\n\n\n\n","import React from 'react';\r\n\r\nconst {PropTypes} = React;\r\n\r\nclass Info extends React.Component {\r\n  static propTypes = {\r\n    pause: PropTypes.func.isRequired,\r\n    frame: PropTypes.func.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (<div style={{\r\n      position: 'absolute',\r\n      textAlign: 'center',\r\n      top: 0,\r\n      width: '100%',\r\n      padding: 5,\r\n      color: 'white',\r\n      zIndex: 100,\r\n    }}>\r\n      <a href=\"http://threejs.org\" style={{\r\n        color: '#0080ff',\r\n      }}>three.js</a> - cameras<br/>\r\n      <b style={{\r\n        color: 'lightgreen',\r\n      }}>O</b> orthographic <b style={{\r\n        color: 'lightgreen',\r\n      }}>P</b> perspective <br/>\r\n      <button onClick={this.props.pause}>Pause</button>\r\n      <button onClick={this.props.frame}>Frame</button>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Info;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\n\r\nclass PointCloud extends React.Component {\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.pointCloudVertices = [];\r\n\r\n    for (let i = 0; i < 10000; i++) {\r\n      const vertex = new THREE.Vector3();\r\n\r\n      vertex.x = THREE.Math.randFloatSpread(2000);\r\n      vertex.y = THREE.Math.randFloatSpread(2000);\r\n      vertex.z = THREE.Math.randFloatSpread(2000);\r\n\r\n      this.pointCloudVertices.push(vertex);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (<points>\r\n      <geometry vertices={this.pointCloudVertices}/>\r\n      <pointsMaterial\r\n        color={0x888888}\r\n      />\r\n    </points>);\r\n  }\r\n}\r\n\r\nexport default PointCloud;\r\n\n\n\n","import React from 'react';\r\n\r\nimport THREE from 'three';\r\nimport Stats from 'stats.js';\r\n\r\nimport React3 from 'react-three-renderer';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nimport Resources from './Resources';\r\n\r\nimport Shapes from './Shapes';\r\n\r\nclass GeometryShapes extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.cameraPosition = new THREE.Vector3(0, 150, 500);\r\n    this.groupPosition = new THREE.Vector3(0, 50, 0);\r\n\r\n    this.targetRotationOnMouseDown = 0;\r\n\r\n    this.mouseX = 0;\r\n    this.mouseXOnMouseDown = 0;\r\n    this.targetRotation = 0;\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      groupRotation: new THREE.Euler(0, 0, 0),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.stats = new Stats();\r\n\r\n    const container = this.refs.container;\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    container.appendChild(this.stats.domElement);\r\n\r\n    container.addEventListener('mousedown', this._onDocumentMouseDown, false);\r\n    container.addEventListener('touchstart', this._onDocumentTouchStart, false);\r\n    document.addEventListener('touchmove', this._onDocumentTouchMove, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const container = this.refs.container;\r\n\r\n    container.removeEventListener('mousedown', this._onDocumentMouseDown, false);\r\n    container.removeEventListener('touchstart', this._onDocumentTouchStart, false);\r\n    document.removeEventListener('touchmove', this._onDocumentTouchMove, false);\r\n    document.removeEventListener('mousemove', this._onDocumentMouseMove, false);\r\n    document.removeEventListener('mouseup', this._onDocumentMouseUp, false);\r\n    document.removeEventListener('mouseout', this._onDocumentMouseOut, false);\r\n\r\n    delete this.stats;\r\n  }\r\n\r\n  _onDocumentMouseDown = (event) => {\r\n    event.preventDefault();\r\n\r\n    document.addEventListener('mousemove', this._onDocumentMouseMove, false);\r\n    document.addEventListener('mouseup', this._onDocumentMouseUp, false);\r\n    document.addEventListener('mouseout', this._onDocumentMouseOut, false);\r\n\r\n    const {\r\n      width,\r\n      } = this.props;\r\n\r\n    const windowHalfX = width / 2;\r\n\r\n    this.mouseXOnMouseDown = event.clientX - windowHalfX;\r\n    this.targetRotationOnMouseDown = this.targetRotation;\r\n  };\r\n\r\n  _onDocumentMouseMove = (event) => {\r\n    const {\r\n      width,\r\n      } = this.props;\r\n\r\n    const windowHalfX = width / 2;\r\n\r\n    this.mouseX = event.clientX - windowHalfX;\r\n    this.targetRotation = this.targetRotationOnMouseDown +\r\n      ( this.mouseX - this.mouseXOnMouseDown ) * 0.02;\r\n  };\r\n\r\n  _onDocumentMouseUp = () => {\r\n    document.removeEventListener('mousemove', this._onDocumentMouseMove, false);\r\n    document.removeEventListener('mouseup', this._onDocumentMouseUp, false);\r\n    document.removeEventListener('mouseout', this._onDocumentMouseOut, false);\r\n  };\r\n\r\n  _onDocumentMouseOut = () => {\r\n    document.removeEventListener('mousemove', this._onDocumentMouseMove, false);\r\n    document.removeEventListener('mouseup', this._onDocumentMouseUp, false);\r\n    document.removeEventListener('mouseout', this._onDocumentMouseOut, false);\r\n  };\r\n\r\n  _onDocumentTouchStart = (event) => {\r\n    if (event.touches.length === 1) {\r\n      event.preventDefault();\r\n\r\n      const {\r\n        width,\r\n        } = this.props;\r\n\r\n      const windowHalfX = width / 2;\r\n\r\n      this.mouseXOnMouseDown = event.touches[0].pageX - windowHalfX;\r\n      this.targetRotationOnMouseDown = this.targetRotation;\r\n    }\r\n  };\r\n\r\n  _onDocumentTouchMove = (event) => {\r\n    if (event.touches.length === 1) {\r\n      event.preventDefault();\r\n\r\n      const {\r\n        width,\r\n        } = this.props;\r\n\r\n      const windowHalfX = width / 2;\r\n\r\n      this.mouseX = event.touches[0].pageX - windowHalfX;\r\n      this.targetRotation = this.targetRotationOnMouseDown +\r\n        ( this.mouseX - this.mouseXOnMouseDown ) * 0.05;\r\n    }\r\n  };\r\n\r\n  _onAnimate = () => {\r\n    this._onAnimateInternal();\r\n  };\r\n\r\n  _onAnimateInternal() {\r\n    const groupRotationY = this.state.groupRotation.y;\r\n\r\n    if (Math.abs(groupRotationY - this.targetRotation) > 0.0001) {\r\n      this.setState({\r\n        groupRotation: new THREE.Euler(0, groupRotationY +\r\n          ( this.targetRotation - groupRotationY ) * 0.05, 0),\r\n      });\r\n    }\r\n\r\n    this.stats.update();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      groupRotation,\r\n      } = this.state;\r\n\r\n    return (<div ref=\"container\">\r\n      <div style={{\r\n        color: 'black',\r\n        position: 'absolute',\r\n        top: '10px',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n      }}>\r\n        Simple procedurally generated 3D shapes<br/>\r\n        Drag to spin\r\n      </div>\r\n      <React3\r\n        width={width}\r\n        height={height}\r\n        antialias\r\n        pixelRatio={window.devicePixelRatio}\r\n        mainCamera=\"mainCamera\"\r\n        clearColor={0xf0f0f0}\r\n        onAnimate={this._onAnimate}\r\n      >\r\n        <scene ref=\"scene\">\r\n          <perspectiveCamera\r\n            name=\"mainCamera\"\r\n            ref=\"camera\"\r\n            fov={50}\r\n            aspect={width / height}\r\n            near={1}\r\n            far={1000}\r\n\r\n            position={this.cameraPosition}\r\n          >\r\n            <pointLight\r\n              color={0xffffff}\r\n              intensity={0.8}\r\n            />\r\n          </perspectiveCamera>\r\n          <Resources/>\r\n          <group\r\n            position={this.groupPosition}\r\n            rotation={groupRotation}\r\n          >\r\n            <Shapes/>\r\n          </group>\r\n        </scene>\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default GeometryShapes;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\n\r\nimport Rect from './Rect';\r\n\r\nclass Resources extends React.Component {\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    this.textureRepeat = new THREE.Vector2(0.008, 0.008);\r\n\r\n    const x = 0;\r\n    const y = 0;\r\n\r\n    const sqLength = 80;\r\n\r\n    const rectLength = 120;\r\n    const rectWidth = 40;\r\n\r\n    const californiaPts = [];\r\n\r\n    californiaPts.push(new THREE.Vector2(610, 320));\r\n    californiaPts.push(new THREE.Vector2(450, 300));\r\n    californiaPts.push(new THREE.Vector2(392, 392));\r\n    californiaPts.push(new THREE.Vector2(266, 438));\r\n    californiaPts.push(new THREE.Vector2(190, 570));\r\n    californiaPts.push(new THREE.Vector2(190, 600));\r\n    californiaPts.push(new THREE.Vector2(160, 620));\r\n    californiaPts.push(new THREE.Vector2(160, 650));\r\n    californiaPts.push(new THREE.Vector2(180, 640));\r\n    californiaPts.push(new THREE.Vector2(165, 680));\r\n    californiaPts.push(new THREE.Vector2(150, 670));\r\n    californiaPts.push(new THREE.Vector2(90, 737));\r\n    californiaPts.push(new THREE.Vector2(80, 795));\r\n    californiaPts.push(new THREE.Vector2(50, 835));\r\n    californiaPts.push(new THREE.Vector2(64, 870));\r\n    californiaPts.push(new THREE.Vector2(60, 945));\r\n    californiaPts.push(new THREE.Vector2(300, 945));\r\n    californiaPts.push(new THREE.Vector2(300, 743));\r\n    californiaPts.push(new THREE.Vector2(600, 473));\r\n    californiaPts.push(new THREE.Vector2(626, 425));\r\n    californiaPts.push(new THREE.Vector2(600, 370));\r\n    californiaPts.push(new THREE.Vector2(610, 320));\r\n\r\n    for (let i = 0; i < californiaPts.length; i++) californiaPts[i].multiplyScalar(0.25);\r\n\r\n    this.californiaPts = californiaPts;\r\n\r\n    return (\r\n      <resources>\r\n        <texture\r\n          resourceId=\"texture\"\r\n          url=\"textures/UV_Grid_Sm.jpg\"\r\n          wrapS={THREE.RepeatWrapping}\r\n          wrapT={THREE.RepeatWrapping}\r\n          repeat={this.textureRepeat}\r\n        />\r\n        <meshBasicMaterial\r\n          resourceId=\"hoverMaterial\"\r\n          color={0xff0000}\r\n          side={THREE.DoubleSide}\r\n        />\r\n        <meshPhongMaterial\r\n          resourceId=\"phongMaterial\"\r\n          side={THREE.DoubleSide}\r\n        >\r\n          <textureResource\r\n            resourceId=\"texture\"\r\n          />\r\n        </meshPhongMaterial>\r\n        <shape\r\n          resourceId=\"california\"\r\n          points={this.californiaPts}\r\n        />\r\n        <shape resourceId=\"triangle\">\r\n          <moveTo\r\n            x={80}\r\n            y={20}\r\n          />\r\n          <lineTo\r\n            x={40}\r\n            y={80}\r\n          />\r\n          <lineTo\r\n            x={120}\r\n            y={80}\r\n          />\r\n          <lineTo\r\n            x={80}\r\n            y={20}\r\n          />\r\n        </shape>\r\n        <shape resourceId=\"heart\">\r\n          <moveTo\r\n            x={x + 25}\r\n            y={y + 25}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={x + 25}\r\n            cp1Y={y + 25}\r\n            cp2X={x + 20}\r\n            cp2Y={y}\r\n            aX={x}\r\n            aY={y}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={x - 30}\r\n            cp1Y={y}\r\n            cp2X={x - 30}\r\n            cp2Y={y + 35}\r\n            aX={x - 30}\r\n            aY={y + 35}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={x - 30}\r\n            cp1Y={y + 55}\r\n            cp2X={x - 10}\r\n            cp2Y={y + 77}\r\n            aX={x + 25}\r\n            aY={y + 95}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={x + 60}\r\n            cp1Y={y + 77}\r\n            cp2X={x + 80}\r\n            cp2Y={y + 55}\r\n            aX={x + 80}\r\n            aY={y + 35}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={ x + 80}\r\n            cp1Y={y + 35}\r\n            cp2X={x + 80}\r\n            cp2Y={y}\r\n            aX={x + 50}\r\n            aY={y}\r\n          />\r\n          <bezierCurveTo\r\n            cp1X={x + 35}\r\n            cp1Y={y}\r\n            cp2X={x + 25}\r\n            cp2Y={y + 25}\r\n            aX={x + 25}\r\n            aY={y + 25}\r\n          />\r\n        </shape>\r\n        <Rect\r\n          resourceId=\"square\"\r\n          width={sqLength}\r\n          length={sqLength}\r\n        />\r\n        <Rect\r\n          resourceId=\"rect\"\r\n          width={rectWidth}\r\n          length={rectLength}\r\n        />\r\n        {(function roundedRect(rectX, rectY,\r\n                               roundedRectWidth, roundedRectHeight,\r\n                               radius) {\r\n          return (<shape resourceId=\"roundedRect\">\r\n            <moveTo\r\n              x={rectX}\r\n              y={rectY + radius}\r\n            />\r\n            <lineTo\r\n              x={rectX}\r\n              y={rectY + roundedRectHeight - radius}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={rectX}\r\n              cpY={rectY + roundedRectHeight}\r\n              x={rectX + radius}\r\n              y={rectY + roundedRectHeight}\r\n            />\r\n            <lineTo\r\n              x={rectX + roundedRectWidth - radius}\r\n              y={rectY + roundedRectHeight}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={rectX + roundedRectWidth}\r\n              cpY={rectY + roundedRectHeight}\r\n              x={rectX + roundedRectWidth}\r\n              y={rectY + roundedRectHeight - radius}\r\n            />\r\n            <lineTo\r\n              x={rectX + roundedRectWidth}\r\n              y={rectY + radius}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={rectX + roundedRectWidth}\r\n              cpY={rectY}\r\n              x={rectX + roundedRectWidth - radius}\r\n              y={rectY}\r\n            />\r\n            <lineTo\r\n              x={rectX + radius}\r\n              y={rectY}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={rectX}\r\n              cpY={rectY}\r\n              x={rectX}\r\n              y={rectY + radius}\r\n            />\r\n          </shape>);\r\n        })(0, 0, 50, 50, 20)}\r\n        <shape\r\n          resourceId=\"track\"\r\n        >\r\n          <moveTo\r\n            x={40}\r\n            y={40}\r\n          />\r\n          <lineTo\r\n            x={40}\r\n            y={160}\r\n          />\r\n          <absArc\r\n            x={60}\r\n            y={160}\r\n            radius={20}\r\n            startAngle={Math.PI}\r\n            endAngle={0}\r\n            clockwise\r\n          />\r\n          <lineTo\r\n            x={80}\r\n            y={40}\r\n          />\r\n          <absArc\r\n            x={60}\r\n            y={40}\r\n            radius={20}\r\n            startAngle={2 * Math.PI}\r\n            endAngle={Math.PI}\r\n            clockwise\r\n          />\r\n        </shape>\r\n        {(function circleShape() {\r\n          const circleRadius = 40;\r\n\r\n          return (<shape resourceId=\"circle\">\r\n            <moveTo\r\n              x={0}\r\n              y={circleRadius}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={circleRadius}\r\n              cpY={circleRadius}\r\n              x={circleRadius}\r\n              y={0}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={circleRadius}\r\n              cpY={-circleRadius}\r\n              x={0}\r\n              y={-circleRadius}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={-circleRadius}\r\n              cpY={-circleRadius}\r\n              x={-circleRadius}\r\n              y={0}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={-circleRadius}\r\n              cpY={circleRadius}\r\n              x={0}\r\n              y={circleRadius}\r\n            />\r\n          </shape>);\r\n        })()}\r\n        <shape resourceId=\"arc\">\r\n          <moveTo\r\n            x={50}\r\n            y={10}\r\n          />\r\n          <absArc\r\n            x={10}\r\n            y={10}\r\n            radius={40}\r\n            startAngle={0}\r\n            endAngle={Math.PI * 2}\r\n            clockwise={false}\r\n          />\r\n          <hole>\r\n            <moveTo\r\n              x={20}\r\n              y={10}\r\n            />\r\n            <absArc\r\n              x={10}\r\n              y={10}\r\n              radius={10}\r\n              startAngle={0}\r\n              endAngle={Math.PI * 2}\r\n              clockwise\r\n            />\r\n          </hole>\r\n        </shape>\r\n        <shape resourceId=\"fish\">\r\n          <moveTo\r\n            x={x}\r\n            y={y}\r\n          />\r\n          <quadraticCurveTo\r\n            cpX={x + 50}\r\n            cpY={y - 80}\r\n            x={x + 90}\r\n            y={y - 10}\r\n          />\r\n          <quadraticCurveTo\r\n            cpX={x + 100}\r\n            cpY={y - 10}\r\n            x={x + 115}\r\n            y={y - 40}\r\n          />\r\n          <quadraticCurveTo\r\n            cpX={x + 115}\r\n            cpY={y}\r\n            x={x + 115}\r\n            y={y + 40}\r\n          />\r\n          <quadraticCurveTo\r\n            cpX={x + 100}\r\n            cpY={y + 10}\r\n            x={x + 90}\r\n            y={y + 10}\r\n          />\r\n          <quadraticCurveTo\r\n            cpX={x + 50}\r\n            cpY={y + 80}\r\n            x={x}\r\n            y={y}\r\n          />\r\n        </shape>\r\n        <shape resourceId=\"smiley\">\r\n          <moveTo\r\n            x={80}\r\n            y={40}\r\n          />\r\n          <absArc\r\n            x={40}\r\n            y={40}\r\n            radius={40}\r\n            startAngle={0}\r\n            endAngle={Math.PI * 2}\r\n            clockwise={false}\r\n          />\r\n          <hole key=\"eye1\">\r\n            <moveTo\r\n              x={35}\r\n              y={20}\r\n            />\r\n            <absEllipse\r\n              x={25}\r\n              y={20}\r\n              xRadius={10}\r\n              yRadius={10}\r\n              startAngle={0}\r\n              endAngle={Math.PI * 2}\r\n              clockwise\r\n            />\r\n          </hole>\r\n          <hole key=\"eye2\">\r\n            <moveTo\r\n              x={65}\r\n              y={20}\r\n            />\r\n            <absArc\r\n              x={55}\r\n              y={20}\r\n              radius={10}\r\n              startAngle={0}\r\n              endAngle={Math.PI * 2}\r\n              clockwise\r\n            />\r\n          </hole>\r\n          <hole key=\"mouth\">\r\n            <moveTo\r\n              x={20}\r\n              y={40}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={40}\r\n              cpY={60}\r\n              x={60}\r\n              y={40}\r\n            />\r\n            <bezierCurveTo\r\n              cp1X={70}\r\n              cp1Y={45}\r\n              cp2X={70}\r\n              cp2Y={50}\r\n              aX={60}\r\n              aY={60}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={40}\r\n              cpY={80}\r\n              x={20}\r\n              y={60}\r\n            />\r\n            <quadraticCurveTo\r\n              cpX={5}\r\n              cpY={50}\r\n              x={20}\r\n              y={40}\r\n            />\r\n          </hole>\r\n        </shape>\r\n        {(function splineShape() {\r\n          const splinePoints = [];\r\n          splinePoints.push(new THREE.Vector2(70, 20));\r\n          splinePoints.push(new THREE.Vector2(80, 90));\r\n          splinePoints.push(new THREE.Vector2(-30, 70));\r\n          splinePoints.push(new THREE.Vector2(0, 0));\r\n\r\n          return (<shape resourceId=\"spline\">\r\n            <moveTo\r\n              x={0}\r\n              y={0}\r\n            />\r\n            <splineThru\r\n              points={splinePoints}\r\n            />\r\n          </shape>);\r\n        })()}\r\n      </resources>);\r\n  }\r\n}\r\n\r\nexport default Resources;\r\n\n\n\n","import React from 'react';\r\nimport PropTypes from 'react/lib/ReactPropTypes';\r\nimport PureComponentMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nfunction Rect(props) {\r\n  const {\r\n    width,\r\n    length,\r\n    resourceId,\r\n    } = props;\r\n\r\n  return (<shape resourceId={resourceId}>\r\n    <moveTo\r\n      x={0}\r\n      y={0}\r\n    />\r\n    <lineTo\r\n      x={0}\r\n      y={width}\r\n    />\r\n    <lineTo\r\n      x={length}\r\n      y={width}\r\n    />\r\n    <lineTo\r\n      x={length}\r\n      y={0}\r\n    />\r\n    <lineTo\r\n      x={0}\r\n      y={0}\r\n    />\r\n  </shape>);\r\n}\r\n\r\nRect.propTypes = {\r\n  width: PropTypes.number.isRequired,\r\n  length: PropTypes.number.isRequired,\r\n  resourceId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Rect;\r\n\n\n\n","import React from 'react';\r\nimport Shape from './Shape';\r\n\r\nclass Shapes extends React.Component {\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (<group>\r\n      <Shape\r\n        resourceId=\"california\"\r\n        x={-300}\r\n        y={-100}\r\n        z={0}\r\n        color={0xf08000}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"triangle\"\r\n        color={0x8080f0}\r\n        x={-180}\r\n        y={0}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"roundedRect\"\r\n        x={-150}\r\n        y={150}\r\n        z={0}\r\n        color={0x008000}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"track\"\r\n        x={200}\r\n        y={-100}\r\n        z={0}\r\n        color={0x008080}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"square\"\r\n        color={0x0040f0}\r\n        x={150}\r\n        y={100}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"heart\"\r\n        color={0xf00000}\r\n        x={60}\r\n        y={100}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={Math.PI}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"circle\"\r\n        color={0x00f000}\r\n        x={120}\r\n        y={250}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"fish\"\r\n        color={0x404040}\r\n        x={-60}\r\n        y={200}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"smiley\"\r\n        x={-200}\r\n        y={250}\r\n        z={0}\r\n        color={0xf000f0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={Math.PI}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"arc\"\r\n        color={0x804000}\r\n        x={150}\r\n        y={0}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n      <Shape\r\n        resourceId=\"spline\"\r\n        color={0x808080}\r\n        x={-50}\r\n        y={-100}\r\n        z={0}\r\n        rx={0}\r\n        ry={0}\r\n        rz={0}\r\n        s={1}\r\n      />\r\n    </group>);\r\n  }\r\n}\r\n\r\nexport default Shapes;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\nimport PropTypes from 'react/lib/ReactPropTypes';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nconst extrudeSettings = {\r\n  amount: 8,\r\n  bevelEnabled: true,\r\n  bevelSegments: 2,\r\n  steps: 2,\r\n  bevelSize: 1,\r\n  bevelThickness: 1,\r\n};\r\n\r\nclass Shape extends React.Component {\r\n  static propTypes = {\r\n    resourceId: PropTypes.string.isRequired,\r\n    color: PropTypes.any.isRequired,\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n    z: PropTypes.number.isRequired,\r\n    rx: PropTypes.number.isRequired,\r\n    ry: PropTypes.number.isRequired,\r\n    rz: PropTypes.number.isRequired,\r\n    s: PropTypes.number.isRequired,\r\n  };\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  render() {\r\n    const {\r\n      rx,\r\n      ry,\r\n      rz,\r\n      s,\r\n      resourceId,\r\n      color,\r\n      x,\r\n      y,\r\n      z,\r\n      } = this.props;\r\n\r\n    const rotation = new THREE.Euler(rx, ry, rz);\r\n    const scale = new THREE.Vector3(s, s, s);\r\n\r\n    return (<group>\r\n      <mesh\r\n        // flat shape with texture\r\n        position={new THREE.Vector3(x, y, z - 175)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"shape\"\r\n        />\r\n        <materialResource\r\n          resourceId={'phongMaterial'}\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        // flat shape\r\n        position={new THREE.Vector3(x, y, z - 125)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"shape\"\r\n        />\r\n        <meshPhongMaterial\r\n          color={color}\r\n          side={THREE.DoubleSide}\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        // 3d shape\r\n        position={new THREE.Vector3(x, y, z - 75)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <extrudeGeometry\r\n          settings={extrudeSettings}\r\n        >\r\n          <shapeResource\r\n            resourceId={resourceId}\r\n          />\r\n        </extrudeGeometry>\r\n        <meshPhongMaterial\r\n          color={color}\r\n        />\r\n      </mesh>\r\n      <line\r\n        // solid line\r\n        position={new THREE.Vector3(x, y, z - 25)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"points\"\r\n        />\r\n        <lineBasicMaterial\r\n          color={color}\r\n          // wireframe\r\n        />\r\n      </line>\r\n      <points\r\n        // vertices from real points\r\n        position={new THREE.Vector3(x, y, z + 25)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"points\"\r\n        />\r\n        <pointsMaterial\r\n          color={color}\r\n          size={4}\r\n          // wireframe\r\n        />\r\n      </points>\r\n      <line\r\n        // line from equidistance sampled points\r\n        position={new THREE.Vector3(x, y, z + 75)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"spacedPoints\"\r\n          divisions={50}\r\n        />\r\n        <lineBasicMaterial\r\n          color={color}\r\n          linewidth={3}\r\n          // wireframe\r\n        />\r\n      </line>\r\n      <points\r\n        // equidistance sampled points\r\n        position={new THREE.Vector3(x, y, z + 125)}\r\n        rotation={rotation}\r\n        scale={scale}\r\n      >\r\n        <shapeGeometryResource\r\n          resourceId={resourceId}\r\n          type=\"spacedPoints\"\r\n          divisions={50}\r\n        />\r\n        <pointsMaterial\r\n          color={color}\r\n          size={4}\r\n          // wireframe\r\n        />\r\n      </points>\r\n    </group>);\r\n  }\r\n}\r\n\r\nexport default Shape;\r\n\n\n\n","import React from 'react';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nimport THREE from 'three';\r\nimport Stats from 'stats.js';\r\n\r\nimport React3 from 'react-three-renderer';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nimport TrackballControls from '../../ref/trackball';\r\n\r\nimport MouseInput from '../inputs/MouseInput';\r\n\r\nimport AllCubes from './AllCubes';\r\n\r\nclass DraggableCubes extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      cameraPosition: new THREE.Vector3(0, 0, 1000),\r\n      cameraRotation: new THREE.Euler(),\r\n      mouseInput: null,\r\n      hovering: false,\r\n      dragging: false,\r\n    };\r\n\r\n    this._cursor = {\r\n      hovering: false,\r\n      dragging: false,\r\n    };\r\n\r\n    this.lightPosition = new THREE.Vector3(0, 500, 2000);\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  _onAnimate = () => {\r\n    this._onAnimateInternal();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    const {\r\n      container,\r\n      camera,\r\n      } = this.refs;\r\n\r\n    container.appendChild(this.stats.domElement);\r\n\r\n    const controls = new TrackballControls(camera);\r\n\r\n    controls.rotateSpeed = 1.0;\r\n    controls.zoomSpeed = 1.2;\r\n    controls.panSpeed = 0.8;\r\n    controls.noZoom = false;\r\n    controls.noPan = false;\r\n    controls.staticMoving = true;\r\n    controls.dynamicDampingFactor = 0.3;\r\n\r\n    this.controls = controls;\r\n\r\n    this.controls.addEventListener('change', this._onTrackballChange);\r\n  }\r\n\r\n  _onCubesMounted = (cubes) => {\r\n    this.cubes = cubes;\r\n  };\r\n\r\n  _onHoverStart = () => {\r\n    this.setState({\r\n      hovering: true,\r\n    });\r\n  };\r\n\r\n  _onHoverEnd = () => {\r\n    this.setState({\r\n      hovering: false,\r\n    });\r\n  };\r\n\r\n  _onDragStart = () => {\r\n    this.setState({\r\n      dragging: true,\r\n    });\r\n  };\r\n\r\n  _onDragEnd = () => {\r\n    this.setState({\r\n      dragging: false,\r\n    });\r\n  };\r\n\r\n\r\n  componentDidUpdate(newProps) {\r\n    const {\r\n      mouseInput,\r\n      } = this.refs;\r\n\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    if (width !== newProps.width || height !== newProps.height) {\r\n      mouseInput.containerResized();\r\n    }\r\n  }\r\n\r\n  _onTrackballChange = () => {\r\n    this.setState({\r\n      cameraPosition: this.refs.camera.position.clone(),\r\n      cameraRotation: this.refs.camera.rotation.clone(),\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.controls.removeEventListener('change', this._onTrackballChange);\r\n\r\n    this.controls.dispose();\r\n    delete this.controls;\r\n\r\n    delete this.stats;\r\n  }\r\n\r\n  _onAnimateInternal() {\r\n    const {\r\n      mouseInput,\r\n      camera,\r\n      } = this.refs;\r\n\r\n    if (!mouseInput.isReady()) {\r\n      const {\r\n        scene,\r\n        container,\r\n        } = this.refs;\r\n\r\n      mouseInput.ready(scene, container, camera);\r\n      mouseInput.restrictIntersections(this.cubes);\r\n      mouseInput.setActive(false);\r\n    }\r\n\r\n    if (this.state.mouseInput !== mouseInput) {\r\n      this.setState({\r\n        mouseInput,\r\n      });\r\n    }\r\n\r\n    if (this.state.camera !== camera) {\r\n      this.setState({\r\n        camera,\r\n      });\r\n    }\r\n\r\n    this.stats.update();\r\n    this.controls.update();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      cameraPosition,\r\n      cameraRotation,\r\n\r\n      mouseInput,\r\n      camera,\r\n\r\n      hovering,\r\n      dragging,\r\n      } = this.state;\r\n\r\n    const style = {};\r\n\r\n    if (dragging) {\r\n      style.cursor = 'move';\r\n    } else if (hovering) {\r\n      style.cursor = 'pointer';\r\n    }\r\n\r\n    this._cursor.hovering = hovering;\r\n    this._cursor.dragging = dragging;\r\n\r\n    return (<div\r\n      ref=\"container\"\r\n      style={style}\r\n    >\r\n      <React3\r\n        width={width}\r\n        height={height}\r\n        antialias\r\n        pixelRatio={window.devicePixelRatio}\r\n        mainCamera=\"mainCamera\"\r\n        onAnimate={this._onAnimate}\r\n        sortObjects={false}\r\n        shadowMapEnabled\r\n        shadowMapType={THREE.PCFShadowMap}\r\n        clearColor={0xf0f0f0}\r\n      >\r\n        <module\r\n          ref=\"mouseInput\"\r\n          descriptor={MouseInput}\r\n        />\r\n        <resources>\r\n          <boxGeometry\r\n            resourceId=\"boxGeometry\"\r\n\r\n            width={40}\r\n            height={40}\r\n            depth={40}\r\n          />\r\n          <meshBasicMaterial\r\n            resourceId=\"highlightMaterial\"\r\n\r\n            color={0xffff00}\r\n            wireframe\r\n          />\r\n        </resources>\r\n        <scene ref=\"scene\">\r\n          <perspectiveCamera\r\n            fov={70}\r\n            aspect={width / height}\r\n            near={1}\r\n            far={10000}\r\n            name=\"mainCamera\"\r\n            ref=\"camera\"\r\n            position={cameraPosition}\r\n            rotation={cameraRotation}\r\n          />\r\n          <ambientLight\r\n            color={0x505050}\r\n          />\r\n          <spotLight\r\n            color={0xffffff}\r\n            intensity={1.5}\r\n            position={this.lightPosition}\r\n\r\n            castShadow\r\n            shadowCameraNear={200}\r\n            shadowCameraFar={10000}\r\n            shadowCameraFov={50}\r\n\r\n            shadowBias={-0.00022}\r\n\r\n            shadowMapWidth={2048}\r\n            shadowMapHeight={2048}\r\n          />\r\n          <AllCubes\r\n            mouseInput={mouseInput}\r\n            camera={camera}\r\n\r\n            onCubesMounted={this._onCubesMounted}\r\n\r\n            onHoverStart={this._onHoverStart}\r\n            onHoverEnd={this._onHoverEnd}\r\n            onDragStart={this._onDragStart}\r\n            onDragEnd={this._onDragEnd}\r\n\r\n            cursor={this._cursor}\r\n          />\r\n        </scene>\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default DraggableCubes;\r\n\n\n\n","import React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\nimport ReactUpdates from 'react/lib/ReactUpdates';\r\n\r\nimport SyntheticMouseEvent from 'react/lib/SyntheticMouseEvent';\r\n\r\nimport Module from 'react-three-renderer/lib/Module';\r\n\r\nimport PropTypes from 'react/lib/ReactPropTypes';\r\n\r\nconst tempVector2 = new THREE.Vector2();\r\n\r\nconst listenerCallbackNames = {\r\n  mousedown: 'onMouseDown',\r\n  mouseup: 'onMouseUp',\r\n};\r\n\r\nconst mouseEvents = [\r\n  'onMouseEnter',\r\n  'onMouseLeave',\r\n  'onMouseDown',\r\n  'onMouseUp',\r\n  'onClick',\r\n];\r\n\r\nconst boolProps = {\r\n  ignorePointerEvents: false,\r\n};\r\n\r\nclass MouseInput extends Module {\r\n  constructor() {\r\n    super();\r\n\r\n    this._isReady = false;\r\n    this._active = true;\r\n    this._restrictIntersections = false;\r\n    this._objectsToIntersect = null;\r\n\r\n    this._restrictedIntersectionRecursive = false;\r\n\r\n    this._patchedDescriptors = [];\r\n  }\r\n\r\n  setup(react3RendererInstance) {\r\n    super.setup(react3RendererInstance);\r\n\r\n    this._react3RendererInstance = react3RendererInstance;\r\n\r\n    const Object3DDescriptor = react3RendererInstance.threeElementDescriptors.object3D.constructor;\r\n\r\n    Object.values(react3RendererInstance.threeElementDescriptors).forEach(elementDescriptor => {\r\n      if (elementDescriptor instanceof Object3DDescriptor) {\r\n        mouseEvents.forEach(eventName => {\r\n          elementDescriptor.hasEvent(eventName);\r\n        });\r\n\r\n        Object.keys(boolProps).forEach(propName => {\r\n          elementDescriptor.hasProp(propName, {\r\n            type: PropTypes.bool,\r\n            update(threeObject, value, hasProp) {\r\n              if (hasProp) {\r\n                threeObject.userData[propName] = value;\r\n              } else {\r\n                threeObject.userData[propName] = boolProps[propName];\r\n              }\r\n            },\r\n            default: boolProps[propName],\r\n          });\r\n        });\r\n\r\n        this._patchedDescriptors.push(elementDescriptor);\r\n      }\r\n    });\r\n  }\r\n\r\n  isReady() {\r\n    return this._isReady;\r\n  }\r\n\r\n  setActive(active) {\r\n    this._active = active;\r\n  }\r\n\r\n  restrictIntersections(objects, recursive = false) {\r\n    this._restrictIntersections = true;\r\n    this._objectsToIntersect = objects;\r\n\r\n    this._restrictedIntersectionRecursive = recursive;\r\n  }\r\n\r\n  ready(scene, container, camera) {\r\n    this._isReady = true;\r\n\r\n    this._scene = scene;\r\n    this._container = container;\r\n    this._camera = camera;\r\n\r\n    this._raycaster = new THREE.Raycaster();\r\n    this._mouse = new THREE.Vector2();\r\n\r\n    this._onMouseMove = (event) => {\r\n      this._mouse.set(event.clientX, event.clientY);\r\n\r\n      if (!this._active) {\r\n        this._updateEnterLeave();\r\n      }\r\n    };\r\n\r\n    this._containerRect = this._container.getBoundingClientRect();\r\n\r\n    this._hoverObjectMap = {};\r\n\r\n    document.addEventListener('mousemove', this._onMouseMove, false);\r\n\r\n    this._intersectionsForClick = null;\r\n\r\n    this._caughtListenersCleanupFunctions = [];\r\n\r\n    Object.keys(listenerCallbackNames).forEach(eventName => {\r\n      let boundListener;\r\n\r\n      const listenerCallbackName = listenerCallbackNames[eventName];\r\n      switch (eventName) {\r\n      case 'mousedown':\r\n        boundListener = this._onMouseDown.bind(this, listenerCallbackName);\r\n        break;\r\n      case 'mouseup':\r\n        boundListener = this._onMouseUp.bind(this, listenerCallbackName);\r\n        break;\r\n      default:\r\n        break;\r\n      }\r\n\r\n      if (boundListener) {\r\n        container.addEventListener(eventName, boundListener, true);\r\n\r\n        this._caughtListenersCleanupFunctions.push(() => {\r\n          container.removeEventListener(eventName, boundListener, true);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  _onMouseDown = (callbackName, mouseEvent) => {\r\n    ReactUpdates.batchedUpdates(() => {\r\n      const {\r\n        event,\r\n        intersections,\r\n        } = this._intersectAndDispatch(callbackName, mouseEvent);\r\n\r\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\r\n        this._intersectionsForClick = null;\r\n      } else {\r\n        this._intersectionsForClick = intersections;\r\n      }\r\n    });\r\n  };\r\n\r\n  _onMouseUp = (callbackName, mouseEvent) => {\r\n    ReactUpdates.batchedUpdates(() => {\r\n      const {\r\n        event,\r\n        intersections,\r\n        } = this._intersectAndDispatch(callbackName, mouseEvent);\r\n\r\n      if (!(event.isDefaultPrevented() || event.isPropagationStopped())) {\r\n        if (this._intersectionsForClick === null) {\r\n          return;\r\n        }\r\n\r\n        // intersect current intersections with the intersections for click\r\n        //   call xzibit ASAP we have a good one son\r\n        //     it wasn't that good\r\n\r\n        const intersectionUUIDMap = this._intersectionsForClick.reduce((map, intersection) => {\r\n          map[intersection.object.uuid] = intersection;\r\n\r\n          return map;\r\n        }, {});\r\n\r\n        for (let i = 0; i < intersections.length; ++i) {\r\n          if (event.isDefaultPrevented() || event.isPropagationStopped()) {\r\n            return;\r\n          }\r\n\r\n          const intersection = intersections[i];\r\n\r\n          const object = intersection.object;\r\n\r\n          const uuid = object.uuid;\r\n\r\n          if (intersectionUUIDMap[uuid]) {\r\n            // oh boy oh boy here we go, we got a clicker\r\n\r\n            React3.eventDispatcher.dispatchEvent(object, 'onClick', this._createSyntheticMouseEvent('click', event), intersection);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    this._intersectionsForClick = null;\r\n  };\r\n\r\n  _createSyntheticMouseEvent(eventType, prototype) {\r\n    return SyntheticMouseEvent.getPooled(null, null, new MouseEvent(eventType, prototype), prototype.target);\r\n  }\r\n\r\n  _intersectAndDispatch(callbackName, mouseEvent) {\r\n    const event = SyntheticMouseEvent.getPooled(null, null, mouseEvent, mouseEvent.target);\r\n\r\n    const intersections = this._getIntersections(tempVector2.set(event.clientX, event.clientY));\r\n\r\n    ReactUpdates.batchedUpdates(() => {\r\n      for (let i = 0; i < intersections.length; ++i) {\r\n        const intersection = intersections[i];\r\n\r\n        if (event.isDefaultPrevented() || event.isPropagationStopped()) {\r\n          return;\r\n        }\r\n\r\n        const object = intersection.object;\r\n\r\n        React3.eventDispatcher.dispatchEvent(object, callbackName, event, intersection);\r\n      }\r\n    });\r\n\r\n    return {\r\n      event,\r\n      intersections,\r\n    };\r\n  }\r\n\r\n  _getIntersections(mouseCoords) {\r\n    const relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\r\n\r\n    this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\r\n\r\n    if (this._restrictIntersections) {\r\n      return this._raycaster.intersectObjects(this._objectsToIntersect, this._restrictedIntersectionRecursive);\r\n    }\r\n\r\n    return this._raycaster.intersectObject(this._scene, true);\r\n  }\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  /**\r\n   *\r\n   * @param {THREE.Vector2} mouseCoords usually an event's clientX and clientY\r\n   * @returns {THREE.Ray}\r\n   */\r\n  getCameraRay(mouseCoords) {\r\n    const relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\r\n\r\n    const originalRay = this._raycaster.ray.clone();\r\n\r\n    this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\r\n\r\n    const resultRay = this._raycaster.ray.clone();\r\n\r\n    this._raycaster.ray.copy(originalRay);\r\n\r\n    return resultRay;\r\n  }\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  intersectObject(mouseCoords, object, recursive = false) {\r\n    const relativeMouseCoords = this._getRelativeMouseCoords(mouseCoords);\r\n\r\n    const originalRay = this._raycaster.ray.clone();\r\n\r\n    this._raycaster.setFromCamera(relativeMouseCoords, this._camera);\r\n\r\n    const intersections = this._raycaster.intersectObject(object, recursive);\r\n\r\n    this._raycaster.ray.copy(originalRay);\r\n\r\n    return intersections;\r\n  }\r\n\r\n  containerResized() {\r\n    this._containerRect = this._container.getBoundingClientRect();\r\n  }\r\n\r\n  update() {\r\n    if (!this._isReady) {\r\n      return;\r\n    }\r\n\r\n    if (this._active) {\r\n      this._updateEnterLeave();\r\n    }\r\n  }\r\n\r\n  _updateEnterLeave() {\r\n    const intersections = this._getIntersections(this._mouse);\r\n\r\n    const hoverMapToUpdate = {\r\n      ...this._hoverObjectMap,\r\n    };\r\n\r\n    const mouseEnterEvent = this._createSyntheticMouseEvent('mouseEnter', {\r\n      target: this._container,\r\n      clientX: this._mouse.x,\r\n      clientY: this._mouse.y,\r\n    });\r\n\r\n    // find first intersection that does not ignore pointer events\r\n    for (let depth = 0; depth < intersections.length; ++depth) {\r\n      const intersection = intersections[depth];\r\n      const object = intersection.object;\r\n\r\n      if (object.userData && object.userData.ignorePointerEvents) {\r\n        continue;\r\n      }\r\n\r\n      const uuid = object.uuid;\r\n\r\n      if (this._hoverObjectMap[uuid]) {\r\n        delete hoverMapToUpdate[uuid];\r\n\r\n        // just update that intersection\r\n        this._hoverObjectMap[uuid].intersection = intersection;\r\n      } else {\r\n        this._hoverObjectMap[uuid] = {\r\n          object,\r\n          intersection,\r\n        };\r\n\r\n        if (!(mouseEnterEvent.isDefaultPrevented() || mouseEnterEvent.isPropagationStopped())) {\r\n          React3.eventDispatcher.dispatchEvent(object, 'onMouseEnter', mouseEnterEvent, intersection, depth);\r\n        }\r\n      }\r\n\r\n      // we have found the first solid intersection, don't go further\r\n      break;\r\n    }\r\n\r\n    const mouseLeaveEvent = this._createSyntheticMouseEvent('mouseLeave', {\r\n      target: this._container,\r\n      clientX: this._mouse.x,\r\n      clientY: this._mouse.y,\r\n    });\r\n\r\n    // delete all unseen uuids in hover map\r\n    const unseenUUIDs = Object.keys(hoverMapToUpdate);\r\n\r\n    for (let i = 0; i < unseenUUIDs.length; ++i) {\r\n      const uuid = unseenUUIDs[i];\r\n\r\n      if (!(mouseLeaveEvent.isDefaultPrevented() || mouseLeaveEvent.isPropagationStopped())) {\r\n        React3.eventDispatcher.dispatchEvent(this._hoverObjectMap[uuid].object, 'onMouseLeave', mouseLeaveEvent);\r\n      }\r\n\r\n      delete this._hoverObjectMap[uuid];\r\n    }\r\n  }\r\n\r\n  _getRelativeMouseCoords(screenMouseCoords) {\r\n    const containerRect = this._containerRect;\r\n\r\n    const relativeMouseCoords = screenMouseCoords.clone()\r\n      .sub(tempVector2.set(containerRect.left, containerRect.top))\r\n      .divide(tempVector2.set(containerRect.width, containerRect.height));\r\n\r\n    // mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n    // mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n    relativeMouseCoords.x = relativeMouseCoords.x * 2 - 1;\r\n    relativeMouseCoords.y = -relativeMouseCoords.y * 2 + 1;\r\n\r\n    return relativeMouseCoords;\r\n  }\r\n\r\n  dispose() {\r\n    document.removeEventListener('mousemove', this._onMouseMove, false);\r\n\r\n    this._caughtListenersCleanupFunctions.forEach(cleanupFunction => cleanupFunction());\r\n    delete this._caughtListenersCleanupFunctions;\r\n\r\n    delete this._onMouseMove;\r\n\r\n    this._patchedDescriptors.forEach(elementDescriptor => {\r\n      const allProps = Object.keys(boolProps)\r\n        .concat(mouseEvents);\r\n\r\n      allProps.forEach(propName => {\r\n        elementDescriptor.removeProp(propName);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default MouseInput;\r\n\n\n\n","module.exports = { \"default\": require(\"core-js/library/fn/object/values\"), __esModule: true };\n\n\n","require('../../modules/es7.object.values');\nmodule.exports = require('../../modules/$.core').Object.values;\n\n\n","// http://goo.gl/XkBrjD\nvar $export = require('./$.export')\n  , $values = require('./$.object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it){\n    return $values(it);\n  }\n});\n\n\n","var $         = require('./$')\n  , toIObject = require('./$.to-iobject')\n  , isEnum    = $.isEnum;\nmodule.exports = function(isEntries){\n  return function(it){\n    var O      = toIObject(it)\n      , keys   = $.getKeys(O)\n      , length = keys.length\n      , i      = 0\n      , result = []\n      , key;\n    while(length > i)if(isEnum.call(O, key = keys[i++])){\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n\n\n","import React from 'react';\r\nimport DraggableCube from './DraggableCube';\r\nimport THREE from 'three';\r\n\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nconst {PropTypes} = React;\r\n\r\nimport MouseInput from '../inputs/MouseInput';\r\n\r\nclass AllCubes extends React.Component {\r\n  static propTypes = {\r\n    mouseInput: PropTypes.instanceOf(MouseInput),\r\n    camera: PropTypes.instanceOf(THREE.PerspectiveCamera),\r\n\r\n    onCubesMounted: PropTypes.func.isRequired,\r\n    onHoverStart: PropTypes.func.isRequired,\r\n    onHoverEnd: PropTypes.func.isRequired,\r\n    onDragStart: PropTypes.func.isRequired,\r\n    onDragEnd: PropTypes.func.isRequired,\r\n\r\n    cursor: PropTypes.any,\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const cubePositions = [];\r\n    cubePositions.length = 200;\r\n\r\n    for (let i = 0; i < 200; ++i) {\r\n      cubePositions[i] = new THREE.Vector3(\r\n        Math.random() * 1000 - 500,\r\n        Math.random() * 600 - 300,\r\n        Math.random() * 800 - 400\r\n      );\r\n    }\r\n\r\n    const cubes = [];\r\n    cubes.length = cubePositions.length;\r\n    this.cubes = cubes;\r\n\r\n    this.cubePositions = cubePositions;\r\n\r\n    this.mouse = new THREE.Vector2();\r\n    this.offset = new THREE.Vector3();\r\n    this.selected = null;\r\n\r\n    this._hoveredCubes = 0;\r\n    this._draggingCubes = 0;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      onCubesMounted,\r\n      } = this.props;\r\n\r\n    onCubesMounted(this.cubes);\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  _onCubeCreate = (index, cube) => {\r\n    this.cubes[index] = cube;\r\n  };\r\n\r\n  _onCubeMouseEnter = () => {\r\n    if (this._hoveredCubes === 0) {\r\n      const {\r\n        onHoverStart,\r\n        } = this.props;\r\n\r\n      onHoverStart();\r\n    }\r\n\r\n    this._hoveredCubes++;\r\n  };\r\n\r\n  _onCubeMouseLeave = () => {\r\n    this._hoveredCubes--;\r\n\r\n    if (this._hoveredCubes === 0) {\r\n      const {\r\n        onHoverEnd,\r\n        } = this.props;\r\n\r\n      onHoverEnd();\r\n    }\r\n  };\r\n\r\n  _onCubeDragStart = () => {\r\n    if (this._draggingCubes === 0) {\r\n      const {\r\n        onDragStart,\r\n        } = this.props;\r\n\r\n      onDragStart();\r\n    }\r\n\r\n    this._draggingCubes++;\r\n  };\r\n\r\n  _onCubeDragEnd = () => {\r\n    this._draggingCubes--;\r\n\r\n    if (this._draggingCubes === 0) {\r\n      const {\r\n        onDragEnd,\r\n        } = this.props;\r\n\r\n      onDragEnd();\r\n    }\r\n  };\r\n\r\n\r\n  render() {\r\n    const {\r\n      mouseInput,\r\n      camera,\r\n\r\n      cursor,\r\n      } = this.props;\r\n\r\n    return (<group>\r\n      {this.cubePositions.map((cubePosition, index) => {\r\n        return (<DraggableCube\r\n          key={index}\r\n\r\n          mouseInput={mouseInput}\r\n          camera={camera}\r\n\r\n          initialPosition={cubePosition}\r\n          onCreate={this._onCubeCreate.bind(this, index)}\r\n          onMouseEnter={this._onCubeMouseEnter}\r\n          onMouseLeave={this._onCubeMouseLeave}\r\n          onDragStart={this._onCubeDragStart}\r\n          onDragEnd={this._onCubeDragEnd}\r\n\r\n          cursor={cursor}\r\n        />);\r\n      })}\r\n    </group>);\r\n  }\r\n}\r\n\r\nexport default AllCubes;\r\n\n\n\n","import React from 'react';\r\nconst {PropTypes} = React;\r\n\r\nimport THREE from 'three';\r\nimport PureRenderMixin from 'react/lib/ReactComponentWithPureRenderMixin';\r\n\r\nimport MouseInput from '../inputs/MouseInput';\r\n\r\n// shared plane for dragging purposes\r\n// it's good to share because you can drag only one cube at a time\r\nconst dragPlane = new THREE.Plane();\r\n\r\nconst backVector = new THREE.Vector3(0, 0, -1);\r\n\r\nclass DraggableCube extends React.Component {\r\n  static propTypes = {\r\n    initialPosition: PropTypes.instanceOf(THREE.Vector3).isRequired,\r\n\r\n    mouseInput: PropTypes.instanceOf(MouseInput),\r\n    camera: PropTypes.instanceOf(THREE.PerspectiveCamera),\r\n\r\n    onCreate: PropTypes.func.isRequired,\r\n\r\n    onMouseEnter: PropTypes.func.isRequired,\r\n    onMouseLeave: PropTypes.func.isRequired,\r\n    onDragStart: PropTypes.func.isRequired,\r\n    onDragEnd: PropTypes.func.isRequired,\r\n\r\n    cursor: PropTypes.any,\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.rotation = new THREE.Euler(\r\n      Math.random() * 2 * Math.PI,\r\n      Math.random() * 2 * Math.PI,\r\n      Math.random() * 2 * Math.PI\r\n    );\r\n\r\n    this.scale = new THREE.Vector3(\r\n      Math.random() * 2 + 1,\r\n      Math.random() * 2 + 1,\r\n      Math.random() * 2 + 1\r\n    );\r\n\r\n    this.color = new THREE.Color(Math.random() * 0xffffff);\r\n\r\n    const hsl = this.color.getHSL();\r\n\r\n    hsl.s = Math.min(1, hsl.s * 1.1);\r\n    hsl.l = Math.min(1, hsl.l * 1.1);\r\n\r\n    const {h, s, l} = hsl;\r\n\r\n    this.hoverColor = new THREE.Color().setHSL(h, s, l);\r\n    this.pressedColor = 0xff0000;\r\n\r\n    const {\r\n      initialPosition,\r\n      } = props;\r\n\r\n    this.state = {\r\n      hovered: false,\r\n      pressed: false,\r\n      position: initialPosition,\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate;\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mouseup', this._onDocumentMouseUp);\r\n  }\r\n\r\n  _onMouseEnter = () => {\r\n    this.setState({\r\n      'hovered': true,\r\n    });\r\n\r\n    const {onMouseEnter} = this.props;\r\n\r\n    onMouseEnter();\r\n  };\r\n\r\n  _onMouseDown = (event, intersection) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const {\r\n      position,\r\n      } = this.state;\r\n\r\n    const {\r\n      onDragStart,\r\n      camera,\r\n      } = this.props;\r\n\r\n    dragPlane.setFromNormalAndCoplanarPoint(backVector.clone().applyQuaternion(camera.quaternion), intersection.point);\r\n\r\n    this._offset = intersection.point.clone().sub(position);\r\n\r\n    document.addEventListener('mouseup', this._onDocumentMouseUp);\r\n    document.addEventListener('mousemove', this._onDocumentMouseMove);\r\n\r\n    this.setState({\r\n      'pressed': true,\r\n    });\r\n\r\n    onDragStart();\r\n  };\r\n\r\n  _onDocumentMouseMove = (event) => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      mouseInput,\r\n      } = this.props;\r\n\r\n    const ray:THREE.Ray = mouseInput.getCameraRay(new THREE.Vector2(event.clientX, event.clientY));\r\n\r\n    const intersection = dragPlane.intersectLine(new THREE.Line3(ray.origin, ray.origin.clone().add(ray.direction.clone().multiplyScalar(10000))));\r\n    if (intersection) {\r\n      this.setState({\r\n        position: intersection.sub(this._offset),\r\n      });\r\n    }\r\n  };\r\n\r\n  _onDocumentMouseUp = (event) => {\r\n    event.preventDefault();\r\n\r\n    document.removeEventListener('mouseup', this._onDocumentMouseUp);\r\n    document.removeEventListener('mousemove', this._onDocumentMouseMove);\r\n\r\n    const {\r\n      onDragEnd,\r\n      } = this.props;\r\n\r\n    onDragEnd();\r\n\r\n    this.setState({\r\n      pressed: false,\r\n    });\r\n  };\r\n\r\n  _onMouseLeave = () => {\r\n    if (this.state.hovered) {\r\n      this.setState({\r\n        'hovered': false,\r\n      });\r\n    }\r\n\r\n    const {\r\n      onMouseLeave,\r\n      } = this.props;\r\n\r\n    onMouseLeave();\r\n  };\r\n\r\n  _ref = (mesh) => {\r\n    const {\r\n      onCreate,\r\n      } = this.props;\r\n\r\n    onCreate(mesh);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      rotation,\r\n      scale,\r\n      } = this;\r\n\r\n    const {\r\n      cursor: {\r\n        dragging,\r\n        },\r\n      } = this.props;\r\n\r\n    const {\r\n      hovered,\r\n      pressed,\r\n      position,\r\n      } = this.state;\r\n\r\n    let color;\r\n\r\n    const hoverHighlight = (hovered && !dragging);\r\n    if (pressed) {\r\n      color = this.pressedColor;\r\n    } else if (hoverHighlight) {\r\n      color = this.hoverColor;\r\n    } else {\r\n      color = this.color;\r\n    }\r\n\r\n    return (<group\r\n      position={position}\r\n      rotation={rotation}\r\n      scale={scale}\r\n    >\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n\r\n        onMouseEnter={this._onMouseEnter}\r\n        onMouseDown={this._onMouseDown}\r\n        onMouseLeave={this._onMouseLeave}\r\n\r\n        ref={this._ref}\r\n      >\r\n        <geometryResource\r\n          resourceId=\"boxGeometry\"\r\n        />\r\n        <meshLambertMaterial\r\n          color={color}\r\n        />\r\n      </mesh>\r\n      {hoverHighlight ? <mesh\r\n        ignorePointerEvents\r\n      >\r\n        <geometryResource\r\n          resourceId=\"boxGeometry\"\r\n        />\r\n        <materialResource\r\n          resourceId=\"highlightMaterial\"\r\n        />\r\n      </mesh> : null}\r\n    </group>);\r\n  }\r\n}\r\n\r\nexport default DraggableCube;\r\n\n\n\n","import React from 'react';\r\nimport React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\nimport CANNON from 'cannon/src/Cannon';\r\n\r\nimport Stats from 'stats.js';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nclass Physics extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const world = new CANNON.World();\r\n    this.world = world;\r\n    world.gravity.set(0, 0, 0);\r\n    world.broadphase = new CANNON.NaiveBroadphase();\r\n    world.solver.iterations = 10;\r\n    const shape = new CANNON.Box(new CANNON.Vec3(1, 1, 1));\r\n    const mass = 1;\r\n    const body = new CANNON.Body({\r\n      mass,\r\n    });\r\n    body.addShape(shape);\r\n    body.angularVelocity.set(0, 10, 0);\r\n    body.angularDamping = 0.5;\r\n    world.addBody(body);\r\n\r\n    this._onMouseDown = () => {\r\n      body.angularVelocity.y += 5;\r\n    };\r\n\r\n    this.cameraPosition = new THREE.Vector3(0, 0, 5);\r\n\r\n    const timeStep = 1 / 60;\r\n\r\n    const updatePhysics = () => {\r\n      // Step the physics world\r\n      world.step(timeStep);\r\n      // Copy coordinates from Cannon.js to Three.js\r\n\r\n      this.setState({\r\n        // need to call new THREE.* in order to ensure an update goes through\r\n        meshPosition: new THREE.Vector3().copy(body.position),\r\n        meshQuaternion: new THREE.Quaternion().copy(body.quaternion),\r\n      });\r\n    };\r\n\r\n    this._onAnimate = () => {\r\n      updatePhysics();\r\n\r\n      this.stats.update();\r\n    };\r\n\r\n    this.state = {\r\n      meshPosition: new THREE.Vector3(),\r\n      meshQuaternion: new THREE.Quaternion(),\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.world;\r\n\r\n    delete this.stats;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      container,\r\n      } = this.refs;\r\n\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    container.appendChild(this.stats.domElement);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      meshPosition,\r\n      meshQuaternion,\r\n      } = this.state;\r\n\r\n    return (<div\r\n      ref=\"container\"\r\n\r\n      onMouseDown={this._onMouseDown}\r\n    ><React3\r\n      antialias\r\n      mainCamera=\"camera\"\r\n      width={width}\r\n      height={height}\r\n\r\n      onAnimate={this._onAnimate}\r\n    >\r\n      <scene>\r\n        <perspectiveCamera\r\n          name=\"camera\"\r\n          fov={75}\r\n          aspect={width / height}\r\n          near={1}\r\n          far={100}\r\n\r\n          position={this.cameraPosition}\r\n        />\r\n        <mesh\r\n          position={meshPosition}\r\n          quaternion={meshQuaternion}\r\n        >\r\n          <boxGeometry\r\n            width={2}\r\n            height={2}\r\n            depth={2}\r\n          />\r\n          <meshBasicMaterial\r\n            color={0x00ff00}\r\n            wireframe\r\n          />\r\n        </mesh>\r\n      </scene>\r\n    </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default Physics;\r\n\n\n\n","// Export classes\nmodule.exports = {\n    version :                       require('../package.json').version,\n\n    AABB :                          require('./collision/AABB'),\n    ArrayCollisionMatrix :          require('./collision/ArrayCollisionMatrix'),\n    Body :                          require('./objects/Body'),\n    Box :                           require('./shapes/Box'),\n    Broadphase :                    require('./collision/Broadphase'),\n    Constraint :                    require('./constraints/Constraint'),\n    ContactEquation :               require('./equations/ContactEquation'),\n    Narrowphase :                   require('./world/Narrowphase'),\n    ConeTwistConstraint :           require('./constraints/ConeTwistConstraint'),\n    ContactMaterial :               require('./material/ContactMaterial'),\n    ConvexPolyhedron :              require('./shapes/ConvexPolyhedron'),\n    Cylinder :                      require('./shapes/Cylinder'),\n    DistanceConstraint :            require('./constraints/DistanceConstraint'),\n    Equation :                      require('./equations/Equation'),\n    EventTarget :                   require('./utils/EventTarget'),\n    FrictionEquation :              require('./equations/FrictionEquation'),\n    GSSolver :                      require('./solver/GSSolver'),\n    GridBroadphase :                require('./collision/GridBroadphase'),\n    Heightfield :                   require('./shapes/Heightfield'),\n    HingeConstraint :               require('./constraints/HingeConstraint'),\n    LockConstraint :                require('./constraints/LockConstraint'),\n    Mat3 :                          require('./math/Mat3'),\n    Material :                      require('./material/Material'),\n    NaiveBroadphase :               require('./collision/NaiveBroadphase'),\n    ObjectCollisionMatrix :         require('./collision/ObjectCollisionMatrix'),\n    Pool :                          require('./utils/Pool'),\n    Particle :                      require('./shapes/Particle'),\n    Plane :                         require('./shapes/Plane'),\n    PointToPointConstraint :        require('./constraints/PointToPointConstraint'),\n    Quaternion :                    require('./math/Quaternion'),\n    Ray :                           require('./collision/Ray'),\n    RaycastVehicle :                require('./objects/RaycastVehicle'),\n    RaycastResult :                 require('./collision/RaycastResult'),\n    RigidVehicle :                  require('./objects/RigidVehicle'),\n    RotationalEquation :            require('./equations/RotationalEquation'),\n    RotationalMotorEquation :       require('./equations/RotationalMotorEquation'),\n    SAPBroadphase :                 require('./collision/SAPBroadphase'),\n    SPHSystem :                     require('./objects/SPHSystem'),\n    Shape :                         require('./shapes/Shape'),\n    Solver :                        require('./solver/Solver'),\n    Sphere :                        require('./shapes/Sphere'),\n    SplitSolver :                   require('./solver/SplitSolver'),\n    Spring :                        require('./objects/Spring'),\n    Trimesh :                       require('./shapes/Trimesh'),\n    Vec3 :                          require('./math/Vec3'),\n    Vec3Pool :                      require('./utils/Vec3Pool'),\n    World :                         require('./world/World'),\n};\n\n\n\n","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t\"cannon@^0.6.2\",\n\t\t\t\"C:\\\\Users\\\\Firtina\\\\work\\\\react-three-renderer-example\"\n\t\t]\n\t],\n\t\"_from\": \"cannon@>=0.6.2 <0.7.0\",\n\t\"_id\": \"cannon@0.6.2\",\n\t\"_inCache\": true,\n\t\"_installable\": true,\n\t\"_location\": \"/cannon\",\n\t\"_npmUser\": {\n\t\t\"email\": \"schteppe@gmail.com\",\n\t\t\"name\": \"schteppe\"\n\t},\n\t\"_npmVersion\": \"1.4.3\",\n\t\"_phantomChildren\": {},\n\t\"_requested\": {\n\t\t\"name\": \"cannon\",\n\t\t\"raw\": \"cannon@^0.6.2\",\n\t\t\"rawSpec\": \"^0.6.2\",\n\t\t\"scope\": null,\n\t\t\"spec\": \">=0.6.2 <0.7.0\",\n\t\t\"type\": \"range\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"/\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/cannon/-/cannon-0.6.2.tgz\",\n\t\"_shasum\": \"1e7bc72dd5841982f3c104c2bc578bfa4fb1c572\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"cannon@^0.6.2\",\n\t\"_where\": \"C:\\\\Users\\\\Firtina\\\\work\\\\react-three-renderer-example\",\n\t\"author\": {\n\t\t\"email\": \"schteppe@gmail.com\",\n\t\t\"name\": \"Stefan Hedman\",\n\t\t\"url\": \"http://steffe.se\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/schteppe/cannon.js/issues\"\n\t},\n\t\"dependencies\": {},\n\t\"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n\t\"devDependencies\": {\n\t\t\"browserify\": \"*\",\n\t\t\"grunt\": \"~0.4.0\",\n\t\t\"grunt-browserify\": \"^2.1.4\",\n\t\t\"grunt-contrib-concat\": \"~0.1.3\",\n\t\t\"grunt-contrib-jshint\": \"~0.1.1\",\n\t\t\"grunt-contrib-nodeunit\": \"^0.4.1\",\n\t\t\"grunt-contrib-uglify\": \"^0.5.1\",\n\t\t\"grunt-contrib-yuidoc\": \"^0.5.2\",\n\t\t\"jshint\": \"latest\",\n\t\t\"nodeunit\": \"^0.9.0\",\n\t\t\"uglify-js\": \"latest\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"1e7bc72dd5841982f3c104c2bc578bfa4fb1c572\",\n\t\t\"tarball\": \"http://registry.npmjs.org/cannon/-/cannon-0.6.2.tgz\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \"*\"\n\t},\n\t\"homepage\": \"https://github.com/schteppe/cannon.js\",\n\t\"keywords\": [\n\t\t\"3d\",\n\t\t\"cannon\",\n\t\t\"cannon.js\",\n\t\t\"engine\",\n\t\t\"physics\"\n\t],\n\t\"licenses\": [\n\t\t{\n\t\t\t\"type\": \"MIT\"\n\t\t}\n\t],\n\t\"main\": \"./build/cannon.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"schteppe\",\n\t\t\t\"email\": \"schteppe@gmail.com\"\n\t\t}\n\t],\n\t\"name\": \"cannon\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/schteppe/cannon.js.git\"\n\t},\n\t\"version\": \"0.6.2\"\n};\n\n\n","var Vec3 = require('../math/Vec3');\nvar Utils = require('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    // Extend lower bound\n    var l = aabb.lowerBound.x;\n    if(this.lowerBound.x > l){\n        this.lowerBound.x = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.x;\n    if(this.upperBound.x < u){\n        this.upperBound.x = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.y;\n    if(this.lowerBound.y > l){\n        this.lowerBound.y = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.y;\n    if(this.upperBound.y < u){\n        this.upperBound.y = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.z;\n    if(this.lowerBound.z > l){\n        this.lowerBound.z = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.z;\n    if(this.upperBound.z < u){\n        this.upperBound.z = u;\n    }\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n};\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n\n\n","module.exports = Vec3;\n\nvar Mat3 = require('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};\n\n\n","module.exports = Mat3;\n\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n\n\n\n","function Utils(){}\n\nmodule.exports = Utils;\n\n/**\n * Extend an options object with default values.\n * @static\n * @method defaults\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n * @param  {object} defaults An object containing default values.\n * @return {object} The modified options object.\n */\nUtils.defaults = function(options, defaults){\n    options = options || {};\n\n    for(var key in defaults){\n        if(!(key in options)){\n            options[key] = defaults[key];\n        }\n    }\n\n    return options;\n};\n\n\n\n","module.exports = ArrayCollisionMatrix;\n\n/**\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n * @class ArrayCollisionMatrix\n * @constructor\n */\nfunction ArrayCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Array}\n     */\n\tthis.matrix = [];\n}\n\n/**\n * Get an element\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nArrayCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n};\n\n/**\n * Set an element\n * @method set\n * @param {Number} i\n * @param {Number} j\n * @param {Number} value\n */\nArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n};\n\n/**\n * Sets all elements to zero\n * @method reset\n */\nArrayCollisionMatrix.prototype.reset = function() {\n\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\tthis.matrix[i]=0;\n\t}\n};\n\n/**\n * Sets the max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\tthis.matrix.length = n*(n-1)>>1;\n};\n\n\n\n","module.exports = Body;\n\nvar EventTarget = require('../utils/EventTarget');\nvar Shape = require('../shapes/Shape');\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\nvar Quaternion = require('../math/Quaternion');\nvar Material = require('../material/Material');\nvar AABB = require('../collision/AABB');\nvar Box = require('../shapes/Box');\n\n/**\n * Base class for all body types.\n * @class Body\n * @constructor\n * @extends EventTarget\n * @param {object} [options]\n * @param {Vec3} [options.position]\n * @param {Vec3} [options.velocity]\n * @param {Vec3} [options.angularVelocity]\n * @param {Quaternion} [options.quaternion]\n * @param {number} [options.mass]\n * @param {Material} [options.material]\n * @param {number} [options.type]\n * @param {number} [options.linearDamping=0.01]\n * @param {number} [options.angularDamping=0.01]\n * @param {boolean} [options.allowSleep=true]\n * @param {number} [options.sleepSpeedLimit=0.1]\n * @param {number} [options.sleepTimeLimit=1]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=1]\n * @param {boolean} [options.fixedRotation=false]\n * @param {Body} [options.shape]\n * @example\n *     var body = new Body({\n *         mass: 1\n *     });\n *     var shape = new Sphere(1);\n *     body.addShape(shape);\n *     world.add(body);\n */\nfunction Body(options){\n    options = options || {};\n\n    EventTarget.apply(this);\n\n    this.id = Body.idCounter++;\n\n    /**\n     * Reference to the world the body is living in\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n     * @property preStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.preStep = null;\n\n    /**\n     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n     * @property postStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.postStep = null;\n\n    this.vlambda = new Vec3();\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {Number} collisionResponse\n     */\n\tthis.collisionResponse = true;\n\n    /**\n     * @property position\n     * @type {Vec3}\n     */\n    this.position = new Vec3();\n\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n    /**\n     * @property {Vec3} previousPosition\n     */\n    this.previousPosition = new Vec3();\n\n    /**\n     * Initial position of the body\n     * @property initPosition\n     * @type {Vec3}\n     */\n    this.initPosition = new Vec3();\n\n    /**\n     * @property velocity\n     * @type {Vec3}\n     */\n    this.velocity = new Vec3();\n\n    if(options.velocity){\n        this.velocity.copy(options.velocity);\n    }\n\n    /**\n     * @property initVelocity\n     * @type {Vec3}\n     */\n    this.initVelocity = new Vec3();\n\n    /**\n     * Linear force on the body\n     * @property force\n     * @type {Vec3}\n     */\n    this.force = new Vec3();\n\n    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\n    /**\n     * @property mass\n     * @type {Number}\n     * @default 0\n     */\n    this.mass = mass;\n\n    /**\n     * @property invMass\n     * @type {Number}\n     */\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\n    /**\n     * @property material\n     * @type {Material}\n     */\n    this.material = options.material || null;\n\n    /**\n     * @property linearDamping\n     * @type {Number}\n     */\n    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\n    /**\n     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n     * @property type\n     * @type {Number}\n     */\n    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n    if(typeof(options.type) === typeof(Body.STATIC)){\n        this.type = options.type;\n    }\n\n    /**\n     * If true, the body will automatically fall to sleep.\n     * @property allowSleep\n     * @type {Boolean}\n     * @default true\n     */\n    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\n    /**\n     * Current sleep state.\n     * @property sleepState\n     * @type {Number}\n     */\n    this.sleepState = 0;\n\n    /**\n     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n     * @property sleepSpeedLimit\n     * @type {Number}\n     * @default 0.1\n     */\n    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\n    /**\n     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n     * @property sleepTimeLimit\n     * @type {Number}\n     * @default 1\n     */\n    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\n    this.timeLastSleepy = 0;\n\n    this._wakeUpAfterNarrowphase = false;\n\n\n    /**\n     * Rotational force on the body, around center of mass\n     * @property {Vec3} torque\n     */\n    this.torque = new Vec3();\n\n    /**\n     * Orientation of the body\n     * @property quaternion\n     * @type {Quaternion}\n     */\n    this.quaternion = new Quaternion();\n\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n\n    /**\n     * @property initQuaternion\n     * @type {Quaternion}\n     */\n    this.initQuaternion = new Quaternion();\n\n    /**\n     * @property angularVelocity\n     * @type {Vec3}\n     */\n    this.angularVelocity = new Vec3();\n\n    if(options.angularVelocity){\n        this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    /**\n     * @property initAngularVelocity\n     * @type {Vec3}\n     */\n    this.initAngularVelocity = new Vec3();\n\n    this.interpolatedPosition = new Vec3();\n    this.interpolatedQuaternion = new Quaternion();\n\n    /**\n     * @property shapes\n     * @type {array}\n     */\n    this.shapes = [];\n\n    /**\n     * @property shapeOffsets\n     * @type {array}\n     */\n    this.shapeOffsets = [];\n\n    /**\n     * @property shapeOrientations\n     * @type {array}\n     */\n    this.shapeOrientations = [];\n\n    /**\n     * @property inertia\n     * @type {Vec3}\n     */\n    this.inertia = new Vec3();\n\n    /**\n     * @property {Vec3} invInertia\n     */\n    this.invInertia = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorld\n     */\n    this.invInertiaWorld = new Mat3();\n\n    this.invMassSolve = 0;\n\n    /**\n     * @property {Vec3} invInertiaSolve\n     */\n    this.invInertiaSolve = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorldSolve\n     */\n    this.invInertiaWorldSolve = new Mat3();\n\n    /**\n     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n     * @property {Boolean} fixedRotation\n     * @default false\n     */\n    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\n    /**\n     * @property {Number} angularDamping\n     */\n    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\n    /**\n     * @property aabb\n     * @type {AABB}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * Indicates if the AABB needs to be updated before use.\n     * @property aabbNeedsUpdate\n     * @type {Boolean}\n     */\n    this.aabbNeedsUpdate = true;\n\n    this.wlambda = new Vec3();\n\n    if(options.shape){\n        this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n}\nBody.prototype = new EventTarget();\nBody.prototype.constructor = Body;\n\n/**\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n * @static\n * @property DYNAMIC\n * @type {Number}\n */\nBody.DYNAMIC = 1;\n\n/**\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n * @static\n * @property STATIC\n * @type {Number}\n */\nBody.STATIC = 2;\n\n/**\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n * @static\n * @property KINEMATIC\n * @type {Number}\n */\nBody.KINEMATIC = 4;\n\n\n\n/**\n * @static\n * @property AWAKE\n * @type {number}\n */\nBody.AWAKE = 0;\n\n/**\n * @static\n * @property SLEEPY\n * @type {number}\n */\nBody.SLEEPY = 1;\n\n/**\n * @static\n * @property SLEEPING\n * @type {number}\n */\nBody.SLEEPING = 2;\n\nBody.idCounter = 0;\n\n/**\n * Wake the body up.\n * @method wakeUp\n */\nBody.prototype.wakeUp = function(){\n    var s = this.sleepState;\n    this.sleepState = 0;\n    if(s === Body.SLEEPING){\n        this.dispatchEvent({type:\"wakeup\"});\n    }\n};\n\n/**\n * Force body sleep\n * @method sleep\n */\nBody.prototype.sleep = function(){\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0,0,0);\n    this.angularVelocity.set(0,0,0);\n};\n\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\n\nBody.sleepEvent = {\n    type: \"sleep\"\n};\n\n/**\n * Called every timestep to update internal sleep timer and change sleep state if needed.\n * @method sleepTick\n * @param {Number} time The world time in seconds\n */\nBody.prototype.sleepTick = function(time){\n    if(this.allowSleep){\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n            this.sleepState = Body.SLEEPY; // Sleepy\n            this.timeLastSleepy = time;\n            this.dispatchEvent(Body.sleepyEvent);\n        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n            this.wakeUp(); // Wake up\n        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n            this.sleep(); // Sleeping\n            this.dispatchEvent(Body.sleepEvent);\n        }\n    }\n};\n\n/**\n * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n * @method updateSolveMassProperties\n */\nBody.prototype.updateSolveMassProperties = function(){\n    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n    } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n};\n\n/**\n * Convert a world point to local body frame.\n * @method pointToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToLocalFrame = function(worldPoint,result){\n    var result = result || new Vec3();\n    worldPoint.vsub(this.position,result);\n    this.quaternion.conjugate().vmult(result,result);\n    return result;\n};\n\n/**\n * Convert a world vector to local body frame.\n * @method vectorToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToLocalFrame = function(worldVector, result){\n    var result = result || new Vec3();\n    this.quaternion.conjugate().vmult(worldVector,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method pointToWorldFrame\n * @param  {Vec3} localPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToWorldFrame = function(localPoint,result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localPoint,result);\n    result.vadd(this.position,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method vectorToWorldFrame\n * @param  {Vec3} localVector\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\n\n/**\n * Add a shape to the body with a local offset and orientation.\n * @method addShape\n * @param {Shape} shape\n * @param {Vec3} offset\n * @param {Quaternion} quaternion\n * @return {Body} The body object, for chainability.\n */\nBody.prototype.addShape = function(shape, _offset, _orientation){\n    var offset = new Vec3();\n    var orientation = new Quaternion();\n\n    if(_offset){\n        offset.copy(_offset);\n    }\n    if(_orientation){\n        orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n\n    this.aabbNeedsUpdate = true;\n\n    return this;\n};\n\n/**\n * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n * @method updateBoundingRadius\n */\nBody.prototype.updateBoundingRadius = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        N = shapes.length,\n        radius = 0;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].norm(),\n            r = shape.boundingSphereRadius;\n        if(offset + r > radius){\n            radius = offset + r;\n        }\n    }\n\n    this.boundingRadius = radius;\n};\n\nvar computeAABB_shapeAABB = new AABB();\n\n/**\n * Updates the .aabb\n * @method computeAABB\n * @todo rename to updateAABB()\n */\nBody.prototype.computeAABB = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        shapeOrientations = this.shapeOrientations,\n        N = shapes.length,\n        offset = tmpVec,\n        orientation = tmpQuat,\n        bodyQuat = this.quaternion,\n        aabb = this.aabb,\n        shapeAABB = computeAABB_shapeAABB;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n\n        // Get shape world quaternion\n        shapeOrientations[i].mult(bodyQuat, orientation);\n\n        // Get shape world position\n        orientation.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset);\n\n        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n        // vec2.add(offset, offset, this.position);\n\n        // Get shape AABB\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n        if(i === 0){\n            aabb.copy(shapeAABB);\n        } else {\n            aabb.extend(shapeAABB);\n        }\n    }\n\n    this.aabbNeedsUpdate = false;\n};\n\nvar uiw_m1 = new Mat3(),\n    uiw_m2 = new Mat3(),\n    uiw_m3 = new Mat3();\n\n/**\n * Update .inertiaWorld and .invInertiaWorld\n * @method updateInertiaWorld\n */\nBody.prototype.updateInertiaWorld = function(force){\n    var I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force) {\n        // If inertia M = s*I, where I is identity and s a scalar, then\n        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n        // where R is the rotation matrix.\n        // In other words, we don't have to transform the inertia if all\n        // inertia diagonal entries are equal.\n    } else {\n        var m1 = uiw_m1,\n            m2 = uiw_m2,\n            m3 = uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I,m1);\n        m1.mmult(m2,this.invInertiaWorld);\n        //m3.getTrace(this.invInertiaWorld);\n    }\n\n    /*\n    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n    */\n};\n\n/**\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n * @method applyForce\n * @param  {Vec3} force The amount of force to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyForce_r = new Vec3();\nvar Body_applyForce_rotForce = new Vec3();\nBody.prototype.applyForce = function(force,worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyForce_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced rotational force\n    var rotForce = Body_applyForce_rotForce;\n    r.cross(force,rotForce);\n\n    // Add linear force\n    this.force.vadd(force,this.force);\n\n    // Add rotational force\n    this.torque.vadd(rotForce,this.torque);\n};\n\n/**\n * Apply force to a local point in the body.\n * @method applyLocalForce\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_worldPoint = new Vec3();\nBody.prototype.applyLocalForce = function(localForce, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldForce = Body_applyLocalForce_worldForce;\n    var worldPoint = Body_applyLocalForce_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyForce(worldForce, worldPoint);\n};\n\n/**\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n * @method applyImpulse\n * @param  {Vec3} impulse The amount of impulse to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyImpulse_r = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nBody.prototype.applyImpulse = function(impulse, worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyImpulse_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced central impulse velocity\n    var velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.mult(this.invMass,velo);\n\n    // Add linear impulse\n    this.velocity.vadd(velo, this.velocity);\n\n    // Compute produced rotational impulse velocity\n    var rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse,rotVelo);\n\n    /*\n    rotVelo.x *= this.invInertia.x;\n    rotVelo.y *= this.invInertia.y;\n    rotVelo.z *= this.invInertia.z;\n    */\n    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\n    // Add rotational Impulse\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n};\n\n/**\n * Apply locally-defined impulse to a local point in the body.\n * @method applyLocalImpulse\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_worldPoint = new Vec3();\nBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyImpulse(worldImpulse, worldPoint);\n};\n\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Should be called whenever you change the body shape or mass.\n * @method updateMassProperties\n */\nBody.prototype.updateMassProperties = function(){\n    var halfExtents = Body_updateMassProperties_halfExtents;\n\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    var I = this.inertia;\n    var fixed = this.fixedRotation;\n\n    // Approximate with AABB box\n    this.computeAABB();\n    halfExtents.set(\n        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n    );\n    Box.calculateInertia(halfExtents, this.mass, I);\n\n    this.invInertia.set(\n        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n        I.z > 0 && !fixed ? 1.0 / I.z : 0\n    );\n    this.updateInertiaWorld(true);\n};\n\n/**\n * Get world velocity of a point in the body.\n * @method getVelocityAtWorldPoint\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3} The result vector.\n */\nBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n    var r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n};\n\n\n\n","/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n\n\n\n","module.exports = Shape;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Material = require('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @author schteppe\n * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n */\nfunction Shape(){\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = true;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n * @return {Number}\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @return {Vec3}\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n\n\n\n","module.exports = Quaternion;\n\nvar Vec3 = require('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n    var w = this.w,\n        va = Quaternion_mult_va,\n        vb = Quaternion_mult_vb,\n        vaxvb = Quaternion_mult_vaxvb;\n\n    va.set(this.x,this.y,this.z);\n    vb.set(q.x,q.y,q.z);\n    target.w = w*q.w - va.dot(vb);\n    va.cross(vb,vaxvb);\n\n    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n\n};\n\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n\n\n","module.exports = Material;\n\n/**\n * Defines a physics material.\n * @class Material\n * @constructor\n * @param {object} [options]\n * @author schteppe\n */\nfunction Material(options){\n    var name = '';\n    options = options || {};\n\n    // Backwards compatibility fix\n    if(typeof(options) === 'string'){\n        name = options;\n        options = {};\n    } else if(typeof(options) === 'object') {\n        name = '';\n    }\n\n    /**\n     * @property name\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * material id.\n     * @property id\n     * @type {number}\n     */\n    this.id = Material.idCounter++;\n\n    /**\n     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} friction\n     */\n    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\n    /**\n     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} restitution\n     */\n    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n}\n\nMaterial.idCounter = 0;\n\n\n\n","module.exports = Box;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this);\n\n    this.type = Shape.types.BOX;\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n\n\n\n","module.exports = ConvexPolyhedron;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    var that = this;\n    Shape.call(this);\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n\n\n\n","var Vec3 = require('./Vec3');\nvar Quaternion = require('./Quaternion');\n\nmodule.exports = Transform;\n\n/**\n * @class Transform\n * @constructor\n */\nfunction Transform(options) {\n    options = options || {};\n\n\t/**\n\t * @property {Vec3} position\n\t */\n\tthis.position = new Vec3();\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n\t/**\n\t * @property {Quaternion} quaternion\n\t */\n\tthis.quaternion = new Quaternion();\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n}\n\nvar tmpQuat = new Quaternion();\n\n/**\n * @static\n * @method pointToLocaFrame\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {Vec3} worldPoint\n * @param {Vec3} result\n */\nTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n    var result = result || new Vec3();\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n};\n\n/**\n * Get a global point in local transform coordinates.\n * @method pointToLocal\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToLocal = function(worldPoint, result){\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n};\n\n/**\n * @static\n * @method pointToWorldFrame\n * @param {Vec3} position\n * @param {Vec3} quaternion\n * @param {Vec3} localPoint\n * @param {Vec3} result\n */\nTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n    var result = result || new Vec3();\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n};\n\n/**\n * Get a local point in global transform coordinates.\n * @method pointToWorld\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToWorld = function(localPoint, result){\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n};\n\n\nTransform.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n    quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n    var result = result || new Vec3();\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n};\n\n\n\n","var Body = require('../objects/Body');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Shape = require('../shapes/Shape');\nvar Plane = require('../shapes/Plane');\n\nmodule.exports = Broadphase;\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nfunction Broadphase(){\n    /**\n    * The world to search for collisions in.\n    * @property world\n    * @type {World}\n    */\n    this.world = null;\n\n    /**\n     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n     * @property useBoundingBoxes\n     * @type {Boolean}\n     */\n    this.useBoundingBoxes = false;\n\n    /**\n     * Set to true if the objects in the world moved.\n     * @property {Boolean} dirty\n     */\n    this.dirty = true;\n}\n\n/**\n * Get the collision pairs from the world\n * @method collisionPairs\n * @param {World} world The world to search in\n * @param {Array} p1 Empty array to be filled with body objects\n * @param {Array} p2 Empty array to be filled with body objects\n */\nBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n};\n\n/**\n * Check if a body pair needs to be intersection tested at all.\n * @method needBroadphaseCollision\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {bool}\n */\nvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\nBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\n    // Check collision filter masks\n    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n        return false;\n    }\n\n    // Check types\n    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static, kinematic or sleeping. Skip.\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if the bounding volumes of two bodies intersect.\n * @method intersectionTest\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {array} pairs1\n * @param {array} pairs2\n  */\nBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n    if(this.useBoundingBoxes){\n        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n    } else {\n        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n    }\n};\n\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\nvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n    Broadphase_collisionPairs_normal =  new Vec3(),\n    Broadphase_collisionPairs_quat =  new Quaternion(),\n    Broadphase_collisionPairs_relpos  =  new Vec3();\nBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    var r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position,r);\n    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n    var norm2 = r.norm2();\n    if(norm2 < boundingRadiusSum2){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Check if the bounding boxes of two bodies are intersecting.\n * @method doBoundingBoxBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    if(bodyA.aabbNeedsUpdate){\n        bodyA.computeAABB();\n    }\n    if(bodyB.aabbNeedsUpdate){\n        bodyB.computeAABB();\n    }\n\n    // Check AABB / AABB\n    if(bodyA.aabb.overlaps(bodyB.aabb)){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar Broadphase_makePairsUnique_temp = { keys:[] },\n    Broadphase_makePairsUnique_p1 = [],\n    Broadphase_makePairsUnique_p2 = [];\nBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n    var t = Broadphase_makePairsUnique_temp,\n        p1 = Broadphase_makePairsUnique_p1,\n        p2 = Broadphase_makePairsUnique_p2,\n        N = pairs1.length;\n\n    for(var i=0; i!==N; i++){\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for(var i=0; i!==N; i++){\n        var id1 = p1[i].id,\n            id2 = p2[i].id;\n        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n        t[key] = i;\n        t.keys.push(key);\n    }\n\n    for(var i=0; i!==t.keys.length; i++){\n        var key = t.keys.pop(),\n            pairIndex = t[key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[key];\n    }\n};\n\n/**\n * To be implemented by subcasses\n * @method setWorld\n * @param {World} world\n */\nBroadphase.prototype.setWorld = function(world){\n};\n\n/**\n * Check if the bounding spheres of two bodies overlap.\n * @method boundingSphereCheck\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {boolean}\n */\nvar bsc_dist = new Vec3();\nBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n    var dist = bsc_dist;\n    bodyA.position.vsub(bodyB.position,dist);\n    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n};\n\n/**\n * Returns all the bodies within the AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param  {array} result An array to store resulting bodies in.\n * @return {array}\n */\nBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n};\n\n\n","module.exports = Plane;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n * @class Plane\n * @constructor\n * @extends Shape\n * @author schteppe\n */\nfunction Plane(){\n    Shape.call(this);\n    this.type = Shape.types.PLANE;\n\n    // World oriented normal\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n\n    this.boundingSphereRadius = Number.MAX_VALUE;\n}\nPlane.prototype = new Shape();\nPlane.prototype.constructor = Plane;\n\nPlane.prototype.computeWorldNormal = function(quat){\n    var n = this.worldNormal;\n    n.set(0,0,1);\n    quat.vmult(n,n);\n    this.worldNormalNeedsUpdate = false;\n};\n\nPlane.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    return target;\n};\n\nPlane.prototype.volume = function(){\n    return Number.MAX_VALUE; // The plane is infinite...\n};\n\nvar tempNormal = new Vec3();\nPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0,0,1); // Default plane normal is z\n    quat.vmult(tempNormal,tempNormal);\n    var maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if(tempNormal.x === 1){ max.x = pos.x; }\n    if(tempNormal.y === 1){ max.y = pos.y; }\n    if(tempNormal.z === 1){ max.z = pos.z; }\n\n    if(tempNormal.x === -1){ min.x = pos.x; }\n    if(tempNormal.y === -1){ min.y = pos.y; }\n    if(tempNormal.z === -1){ min.z = pos.z; }\n};\n\nPlane.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = Number.MAX_VALUE;\n};\n\n\n","module.exports = Constraint;\n\nvar Utils = require('../utils/Utils');\n\n/**\n * Constraint base class\n * @class Constraint\n * @author schteppe\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {boolean} [options.collideConnected=true]\n * @param {boolean} [options.wakeUpBodies=true]\n */\nfunction Constraint(bodyA, bodyB, options){\n    options = Utils.defaults(options,{\n        collideConnected : true,\n        wakeUpBodies : true,\n    });\n\n    /**\n     * Equations to be solved in this constraint\n     * @property equations\n     * @type {Array}\n     */\n    this.equations = [];\n\n    /**\n     * @property {Body} bodyA\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * @property {Body} bodyB\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * @property {Number} id\n     */\n    this.id = Constraint.idCounter++;\n\n    /**\n     * Set to true if you want the bodies to collide when they are connected.\n     * @property collideConnected\n     * @type {boolean}\n     */\n    this.collideConnected = options.collideConnected;\n\n    if(options.wakeUpBodies){\n        if(bodyA){\n            bodyA.wakeUp();\n        }\n        if(bodyB){\n            bodyB.wakeUp();\n        }\n    }\n}\n\n/**\n * Update all the equations with data.\n * @method update\n */\nConstraint.prototype.update = function(){\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n};\n\n/**\n * Enables all equations in the constraint.\n * @method enable\n */\nConstraint.prototype.enable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = true;\n    }\n};\n\n/**\n * Disables all equations in the constraint.\n * @method disable\n */\nConstraint.prototype.disable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = false;\n    }\n};\n\nConstraint.idCounter = 0;\n\n\n\n","module.exports = ContactEquation;\n\nvar Equation = require('./Equation');\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\n\n/**\n * Contact/non-penetration constraint equation\n * @class ContactEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @extends Equation\n */\nfunction ContactEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\n    /**\n     * @property restitution\n     * @type {Number}\n     */\n    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\n    /**\n     * World-oriented vector that goes from the center of bi to the contact point.\n     * @property {Vec3} ri\n     */\n    this.ri = new Vec3();\n\n    /**\n     * World-oriented vector that starts in body j position and goes to the contact point.\n     * @property {Vec3} rj\n     */\n    this.rj = new Vec3();\n\n    /**\n     * Contact normal, pointing out of body i.\n     * @property {Vec3} ni\n     */\n    this.ni = new Vec3();\n}\n\nContactEquation.prototype = new Equation();\nContactEquation.prototype.constructor = ContactEquation;\n\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nContactEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixn = ContactEquation_computeB_temp1,\n        rjxn = ContactEquation_computeB_temp2,\n\n        vi = bi.velocity,\n        wi = bi.angularVelocity,\n        fi = bi.force,\n        taui = bi.torque,\n\n        vj = bj.velocity,\n        wj = bj.angularVelocity,\n        fj = bj.force,\n        tauj = bj.torque,\n\n        penetrationVec = ContactEquation_computeB_temp3,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n\n        n = this.ni;\n\n    // Caluclate cross products\n    ri.cross(n,rixn);\n    rj.cross(n,rjxn);\n\n    // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n\n    // Calculate the penetration vector\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj,penetrationVec);\n    penetrationVec.vsub(bi.position,penetrationVec);\n    penetrationVec.vsub(ri,penetrationVec);\n\n    var g = n.dot(penetrationVec);\n\n    // Compute iteration\n    var ePlusOne = this.restitution + 1;\n    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    var GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h*GiMf;\n\n    return B;\n};\n\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Get the current relative velocity in the contact point.\n * @method getImpactVelocityAlongNormal\n * @return {number}\n */\nContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n\n    vi.vsub(vj, relVel);\n\n    return this.ni.dot(relVel);\n};\n\n\n\n\n","module.exports = Equation;\n\nvar JacobianElement = require('../math/JacobianElement'),\n    Vec3 = require('../math/Vec3');\n\n/**\n * Equation base class\n * @class Equation\n * @constructor\n * @author schteppe\n * @param {Body} bi\n * @param {Body} bj\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n */\nfunction Equation(bi,bj,minForce,maxForce){\n    this.id = Equation.id++;\n\n    /**\n     * @property {number} minForce\n     */\n    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\n    /**\n     * @property {number} maxForce\n     */\n    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\n    /**\n     * @property bi\n     * @type {Body}\n     */\n    this.bi = bi;\n\n    /**\n     * @property bj\n     * @type {Body}\n     */\n    this.bj = bj;\n\n    /**\n     * SPOOK parameter\n     * @property {number} a\n     */\n    this.a = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} b\n     */\n    this.b = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} eps\n     */\n    this.eps = 0.0;\n\n    /**\n     * @property {JacobianElement} jacobianElementA\n     */\n    this.jacobianElementA = new JacobianElement();\n\n    /**\n     * @property {JacobianElement} jacobianElementB\n     */\n    this.jacobianElementB = new JacobianElement();\n\n    /**\n     * @property {boolean} enabled\n     * @default true\n     */\n    this.enabled = true;\n\n    // Set typical spook params\n    this.setSpookParams(1e7,4,1/60);\n}\nEquation.prototype.constructor = Equation;\n\nEquation.id = 0;\n\n/**\n * Recalculates a,b,eps.\n * @method setSpookParams\n */\nEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n    var d = relaxation,\n        k = stiffness,\n        h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = (4.0 * d) / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n};\n\n/**\n * Computes the RHS of the SPOOK equation\n * @method computeB\n * @return {Number}\n */\nEquation.prototype.computeB = function(a,b,h){\n    var GW = this.computeGW(),\n        Gq = this.computeGq(),\n        GiMf = this.computeGiMf();\n    return - Gq * a - GW * b - GiMf*h;\n};\n\n/**\n * Computes G*q, where q are the generalized body coordinates\n * @method computeGq\n * @return {Number}\n */\nEquation.prototype.computeGq = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        xi = bi.position,\n        xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n};\n\nvar zero = new Vec3();\n\n/**\n * Computes G*W, where W are the body velocities\n * @method computeGW\n * @return {Number}\n */\nEquation.prototype.computeGW = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.velocity,\n        vj = bj.velocity,\n        wi = bi.angularVelocity || zero,\n        wj = bj.angularVelocity || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n\n/**\n * Computes G*Wlambda, where W are the body velocities\n * @method computeGWlambda\n * @return {Number}\n */\nEquation.prototype.computeGWlambda = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.vlambda,\n        vj = bj.vlambda,\n        wi = bi.wlambda || zero,\n        wj = bj.wlambda || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n/**\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n * @method computeGiMf\n * @return {Number}\n */\nvar iMfi = new Vec3(),\n    iMfj = new Vec3(),\n    invIi_vmult_taui = new Vec3(),\n    invIj_vmult_tauj = new Vec3();\nEquation.prototype.computeGiMf = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        fi = bi.force,\n        ti = bi.torque,\n        fj = bj.force,\n        tj = bj.torque,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve;\n\n    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n    else { invIi_vmult_taui.set(0,0,0); }\n    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n    else { invIj_vmult_tauj.set(0,0,0); }\n\n    fi.mult(invMassi,iMfi);\n    fj.mult(invMassj,iMfj);\n\n    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n};\n\n/**\n * Computes G*inv(M)*G'\n * @method computeGiMGt\n * @return {Number}\n */\nvar tmp = new Vec3();\nEquation.prototype.computeGiMGt = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve,\n        invIi = bi.invInertiaWorldSolve,\n        invIj = bj.invInertiaWorldSolve,\n        result = invMassi + invMassj;\n\n    if(invIi){\n        invIi.vmult(GA.rotational,tmp);\n        result += tmp.dot(GA.rotational);\n    }\n\n    if(invIj){\n        invIj.vmult(GB.rotational,tmp);\n        result += tmp.dot(GB.rotational);\n    }\n\n    return  result;\n};\n\nvar addToWlambda_temp = new Vec3(),\n    addToWlambda_Gi = new Vec3(),\n    addToWlambda_Gj = new Vec3(),\n    addToWlambda_ri = new Vec3(),\n    addToWlambda_rj = new Vec3(),\n    addToWlambda_Mdiag = new Vec3();\n\n/**\n * Add constraint velocity to the bodies.\n * @method addToWlambda\n * @param {Number} deltalambda\n */\nEquation.prototype.addToWlambda = function(deltalambda){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        temp = addToWlambda_temp;\n\n    // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n    bi.vlambda.vadd(temp, bi.vlambda);\n\n    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n    bj.vlambda.vadd(temp, bj.vlambda);\n\n    // Add to angular velocity\n    if(bi.invInertiaWorldSolve){\n        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bi.wlambda.vadd(temp,bi.wlambda);\n    }\n\n    if(bj.invInertiaWorldSolve){\n        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bj.wlambda.vadd(temp,bj.wlambda);\n    }\n};\n\n/**\n * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n * @method computeInvC\n * @param  {Number} eps\n * @return {Number}\n */\nEquation.prototype.computeC = function(){\n    return this.computeGiMGt() + this.eps;\n};\n\n\n\n","module.exports = JacobianElement;\n\nvar Vec3 = require('./Vec3');\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n * @class JacobianElement\n * @constructor\n */\nfunction JacobianElement(){\n\n    /**\n     * @property {Vec3} spatial\n     */\n    this.spatial = new Vec3();\n\n    /**\n     * @property {Vec3} rotational\n     */\n    this.rotational = new Vec3();\n}\n\n/**\n * Multiply with other JacobianElement\n * @method multiplyElement\n * @param  {JacobianElement} element\n * @return {Number}\n */\nJacobianElement.prototype.multiplyElement = function(element){\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n};\n\n/**\n * Multiply with two vectors\n * @method multiplyVectors\n * @param  {Vec3} spatial\n * @param  {Vec3} rotational\n * @return {Number}\n */\nJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n};\n\n\n\n","module.exports = Narrowphase;\n\nvar AABB = require('../collision/AABB');\nvar Shape = require('../shapes/Shape');\nvar Ray = require('../collision/Ray');\nvar Vec3 = require('../math/Vec3');\nvar Transform = require('../math/Transform');\nvar ConvexPolyhedron = require('../shapes/ConvexPolyhedron');\nvar Quaternion = require('../math/Quaternion');\nvar Solver = require('../solver/Solver');\nvar Vec3Pool = require('../utils/Vec3Pool');\nvar ContactEquation = require('../equations/ContactEquation');\nvar FrictionEquation = require('../equations/FrictionEquation');\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @class Narrowphase\n * @constructor\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo  should move methods to prototype\n */\nfunction Narrowphase(world){\n\n    /**\n     * Internal storage of pooled contact points.\n     * @property {Array} contactPointPool\n     */\n    this.contactPointPool = [];\n\n    this.frictionEquationPool = [];\n\n    this.result = [];\n    this.frictionResult = [];\n\n    /**\n     * Pooled vectors.\n     * @property {Vec3Pool} v3pool\n     */\n    this.v3pool = new Vec3Pool();\n\n    this.world = world;\n    this.currentContactMaterial = null;\n\n    /**\n     * @property {Boolean} enableFrictionReduction\n     */\n    this.enableFrictionReduction = false;\n}\n\n/**\n * Make a contact object, by using the internal pool or creating a new one.\n * @method createContactEquation\n * @return {ContactEquation}\n */\nNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n    var c;\n    if(this.contactPointPool.length){\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n    } else {\n        c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n    var cm = this.currentContactMaterial;\n\n    c.restitution = cm.restitution;\n\n    c.setSpookParams(\n        cm.contactEquationStiffness,\n        cm.contactEquationRelaxation,\n        this.world.dt\n    );\n\n    var matA = si.material || bi.material;\n    var matB = sj.material || bj.material;\n    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n        c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = rsi || si;\n    c.sj = rsj || sj;\n\n    return c;\n};\n\nNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n    var bodyA = contactEquation.bi;\n    var bodyB = contactEquation.bj;\n    var shapeA = contactEquation.si;\n    var shapeB = contactEquation.sj;\n\n    var world = this.world;\n    var cm = this.currentContactMaterial;\n\n    // If friction or restitution were specified in the material, use them\n    var friction = cm.friction;\n    var matA = shapeA.material || bodyA.material;\n    var matB = shapeB.material || bodyB.material;\n    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n        friction = matA.friction * matB.friction;\n    }\n\n    if(friction > 0){\n\n        // Create 2 tangent equations\n        var mug = friction * world.gravity.length();\n        var reducedMass = (bodyA.invMass + bodyB.invMass);\n        if(reducedMass > 0){\n            reducedMass = 1/reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug*reducedMass;\n        c1.maxForce = c2.maxForce = mug*reducedMass;\n\n        // Copy over the relative vectors\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj);\n\n        // Construct tangents\n        contactEquation.ni.tangents(c1.t, c2.t);\n\n        // Set spook params\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\n        c1.enabled = c2.enabled = contactEquation.enabled;\n\n        outArray.push(c1, c2);\n\n        return true;\n    }\n\n    return false;\n};\n\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\n\n// Take the average N latest contact point on the plane.\nNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n    // The last contactEquation\n    var c = this.result[this.result.length - 1];\n\n    // Create the result: two \"average\" friction equations\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n    }\n\n    var f1 = this.frictionResult[this.frictionResult.length - 2];\n    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n\n    var bodyA = c.bi;\n    var bodyB = c.bj;\n    for(var i=0; i!==numContacts; i++){\n        c = this.result[this.result.length - 1 - i];\n        if(c.bodyA !== bodyA){\n            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n    }\n\n    var invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n    f2.ri.copy(f1.ri); // Should be the same\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n    // return eq;\n};\n\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\n\n/**\n * Generate all contacts between a list of body pairs\n * @method getContacts\n * @param {array} p1 Array of body indices\n * @param {array} p2 Array of body indices\n * @param {World} world\n * @param {array} result Array to store generated contacts\n * @param {array} oldcontacts Optional. Array of reusable contact objects\n */\nNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n\n    var qi = tmpQuat1;\n    var qj = tmpQuat2;\n    var xi = tmpVec1;\n    var xj = tmpVec2;\n\n    for(var k=0, N=p1.length; k!==N; k++){\n\n        // Get current collision bodies\n        var bi = p1[k],\n            bj = p2[k];\n\n        // Get contact material\n        var bodyContactMaterial = null;\n        if(bi.material && bj.material){\n            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n        }\n\n        for (var i = 0; i < bi.shapes.length; i++) {\n            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n            xi.vadd(bi.position, xi);\n            var si = bi.shapes[i];\n\n            for (var j = 0; j < bj.shapes.length; j++) {\n\n                // Compute world transform of shapes\n                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n                xj.vadd(bj.position, xj);\n                var sj = bj.shapes[j];\n\n                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n                    continue;\n                }\n\n                // Get collision material\n                var shapeContactMaterial = null;\n                if(si.material && sj.material){\n                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n                }\n\n                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\n                // Get contacts\n                var resolver = this[si.type | sj.type];\n                if(resolver){\n                    if (si.type < sj.type) {\n                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n                    } else {\n                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n                    }\n                }\n            }\n        }\n    }\n};\n\nvar numWarnings = 0;\nvar maxWarnings = 10;\n\nfunction warn(msg){\n    if(numWarnings > maxWarnings){\n        return;\n    }\n\n    numWarnings++;\n\n    console.warn(msg);\n}\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\nNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\nNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\n/**\n * @method sphereSphere\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE] =\nNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have only one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    xj.vsub(xi, r.ni);\n    r.ni.normalize();\n\n    // Contact point locations\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.mult(si.radius, r.ri);\n    r.rj.mult(-sj.radius, r.rj);\n\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n\n    this.result.push(r);\n\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n};\n\n/**\n * @method planeTrimesh\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\nNarrowphase.prototype.planeTrimesh = function(\n    planeShape,\n    trimeshShape,\n    planePos,\n    trimeshPos,\n    planeQuat,\n    trimeshQuat,\n    planeBody,\n    trimeshBody\n){\n    // Make contacts!\n    var v = new Vec3();\n\n    var normal = planeTrimesh_normal;\n    normal.set(0,0,1);\n    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\n    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v);\n\n        // Safe up\n        var v2 = new Vec3();\n        v2.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n        // Check plane side\n        var relpos = planeTrimesh_relpos;\n        v.vsub(planePos, relpos);\n        var dot = normal.dot(relpos);\n\n        if(dot <= 0.0){\n            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\n            r.ni.copy(normal); // Contact normal is the plane normal\n\n            // Get vertex position projected on plane\n            var projected = planeTrimesh_projected;\n            normal.scale(relpos.dot(normal), projected);\n            v.vsub(projected,projected);\n\n            // ri is the projected world position minus plane position\n            r.ri.copy(projected);\n            r.ri.vsub(planeBody.position, r.ri);\n\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj);\n\n            // Store result\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n};\n\n/**\n * @method sphereTrimesh\n * @param  {Shape}      sphereShape\n * @param  {Shape}      trimeshShape\n * @param  {Vec3}       spherePos\n * @param  {Vec3}       trimeshPos\n * @param  {Quaternion} sphereQuat\n * @param  {Quaternion} trimeshQuat\n * @param  {Body}       sphereBody\n * @param  {Body}       trimeshBody\n */\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nvar sphereTrimesh_projected = new Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\nNarrowphase.prototype.sphereTrimesh = function (\n    sphereShape,\n    trimeshShape,\n    spherePos,\n    trimeshPos,\n    sphereQuat,\n    trimeshQuat,\n    sphereBody,\n    trimeshBody\n) {\n\n    var edgeVertexA = sphereTrimesh_edgeVertexA;\n    var edgeVertexB = sphereTrimesh_edgeVertexB;\n    var edgeVector = sphereTrimesh_edgeVector;\n    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    var localSpherePos = sphereTrimesh_localSpherePos;\n    var tmp = sphereTrimesh_tmp;\n    var localSphereAABB = sphereTrimesh_localSphereAABB;\n    var v2 = sphereTrimesh_v2;\n    var relpos = sphereTrimesh_relpos;\n    var triangles = sphereTrimesh_triangles;\n\n    // Convert sphere position to local in the trimesh\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\n    // Get the aabb of the sphere locally in the trimesh\n    var sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(\n        localSpherePos.x - sphereRadius,\n        localSpherePos.y - sphereRadius,\n        localSpherePos.z - sphereRadius\n    );\n    localSphereAABB.upperBound.set(\n        localSpherePos.x + sphereRadius,\n        localSpherePos.y + sphereRadius,\n        localSpherePos.z + sphereRadius\n    );\n\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\n    // Vertices\n    var v = sphereTrimesh_v;\n    var radiusSquared = sphereShape.radius * sphereShape.radius;\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\n            // Check vertex overlap in sphere\n            v.vsub(localSpherePos, relpos);\n\n            if(relpos.norm2() <= radiusSquared){\n\n                // Safe up\n                v2.copy(v);\n                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n                v.vsub(spherePos, relpos);\n\n                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n                r.ni.copy(relpos);\n                r.ni.normalize();\n\n                // ri is the vector from sphere center to the sphere surface\n                r.ri.copy(r.ni);\n                r.ri.scale(sphereShape.radius, r.ri);\n                r.ri.vadd(spherePos, r.ri);\n                r.ri.vsub(sphereBody.position, r.ri);\n\n                r.rj.copy(v);\n                r.rj.vsub(trimeshBody.position, r.rj);\n\n                // Store result\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    // Check all edges\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\n            // Project sphere position to the edge\n            localSpherePos.vsub(edgeVertexB, tmp);\n            var positionAlongEdgeB = tmp.dot(edgeVector);\n\n            localSpherePos.vsub(edgeVertexA, tmp);\n            var positionAlongEdgeA = tmp.dot(edgeVector);\n\n            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\n                // Now check the orthogonal distance from edge to sphere center\n                localSpherePos.vsub(edgeVertexA, tmp);\n\n                edgeVectorUnit.copy(edgeVector);\n                edgeVectorUnit.normalize();\n                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\n                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n                tmp.vadd(edgeVertexA, tmp);\n\n                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n                var dist = tmp.distanceTo(localSpherePos);\n                if(dist < sphereShape.radius){\n                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n                    tmp.vsub(localSpherePos, r.ni);\n                    r.ni.normalize();\n                    r.ni.scale(sphereShape.radius, r.ri);\n\n                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n                    tmp.vsub(trimeshBody.position, r.rj);\n\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n\n    // Triangle faces\n    var va = sphereTrimesh_va;\n    var vb = sphereTrimesh_vb;\n    var vc = sphereTrimesh_vc;\n    var normal = sphereTrimesh_normal;\n    for(var i=0, N = triangles.length; i !== N; i++){\n        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n        trimeshShape.getNormal(triangles[i], normal);\n        localSpherePos.vsub(va, tmp);\n        var dist = tmp.dot(normal);\n        normal.scale(dist, tmp);\n        localSpherePos.vsub(tmp, tmp);\n\n        // tmp is now the sphere position projected to the triangle plane\n        dist = tmp.distanceTo(localSpherePos);\n        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n\n    triangles.length = 0;\n};\n\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3();\n\n/**\n * @method spherePlane\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\nNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    r.ni.set(0,0,1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n    r.ni.normalize(); // Needed?\n\n    // Vector from sphere center to contact point\n    r.ni.mult(si.radius, r.ri);\n\n    // Project down sphere on plane\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\n    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\n        // Make it relative to the body\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p){\n    var positiveResult = null;\n    var N = verts.length;\n    for(var i=0; i!==N; i++){\n        var v = verts[i];\n\n        // Get edge to the next vertex\n        var edge = pointInPolygon_edge;\n        verts[(i+1) % (N)].vsub(v,edge);\n\n        // Get cross product between polygon normal and the edge\n        var edge_x_normal = pointInPolygon_edge_x_normal;\n        //var edge_x_normal = new Vec3();\n        edge.cross(normal,edge_x_normal);\n\n        // Get vector between point and current vertex\n        var vertex_to_p = pointInPolygon_vtp;\n        p.vsub(v,vertex_to_p);\n\n        // This dot product determines which side of the edge the point is\n        var r = edge_x_normal.dot(vertex_to_p);\n\n        // If all such dot products have same sign, we are inside the polygon.\n        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n            if(positiveResult===null){\n                positiveResult = r>0;\n            }\n            continue;\n        } else {\n            return false; // Encountered some other sign. Exit.\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return true;\n}\n\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\n\n/**\n * @method sphereBox\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\nNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n\n    // we refer to the box as body j\n    var sides = sphereBox_sides;\n    xi.vsub(xj,box_to_sphere);\n    sj.getSideNormals(sides,qj);\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // Check side (plane) intersections\n    var found = false;\n\n    // Store the resulting side penetration info\n    var side_ns = sphereBox_side_ns;\n    var side_ns1 = sphereBox_side_ns1;\n    var side_ns2 = sphereBox_side_ns2;\n    var side_h = null;\n    var side_penetrations = 0;\n    var side_dot1 = 0;\n    var side_dot2 = 0;\n    var side_distance = null;\n    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n\n        var h = ns.norm();\n        ns.normalize();\n\n        // The normal/distance dot product tells which side of the plane we are\n        var dot = box_to_sphere.dot(ns);\n\n        if(dot<h+R && dot>0){\n            // Intersects plane. Now check the other two dimensions\n            var ns1 = sphereBox_ns1;\n            var ns2 = sphereBox_ns2;\n            ns1.copy(sides[(idx+1)%3]);\n            ns2.copy(sides[(idx+2)%3]);\n            var h1 = ns1.norm();\n            var h2 = ns2.norm();\n            ns1.normalize();\n            ns2.normalize();\n            var dot1 = box_to_sphere.dot(ns1);\n            var dot2 = box_to_sphere.dot(ns2);\n            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n                var dist = Math.abs(dot-h-R);\n                if(side_distance===null || dist < side_distance){\n                    side_distance = dist;\n                    side_dot1 = dot1;\n                    side_dot2 = dot2;\n                    side_h = h;\n                    side_ns.copy(ns);\n                    side_ns1.copy(ns1);\n                    side_ns2.copy(ns2);\n                    side_penetrations++;\n                }\n            }\n        }\n    }\n    if(side_penetrations){\n        found = true;\n        var r = this.createContactEquation(bi,bj,si,sj);\n        side_ns.mult(-R,r.ri); // Sphere r\n        r.ni.copy(side_ns);\n        r.ni.negate(r.ni); // Normal should be out of sphere\n        side_ns.mult(side_h,side_ns);\n        side_ns1.mult(side_dot1,side_ns1);\n        side_ns.vadd(side_ns1,side_ns);\n        side_ns2.mult(side_dot2,side_ns2);\n        side_ns.vadd(side_ns2,r.rj);\n\n        // Make relative to bodies\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n\n    // Check corners\n    var rj = v3pool.get();\n    var sphere_to_corner = sphereBox_sphere_to_corner;\n    for(var j=0; j!==2 && !found; j++){\n        for(var k=0; k!==2 && !found; k++){\n            for(var l=0; l!==2 && !found; l++){\n                rj.set(0,0,0);\n                if(j){\n                    rj.vadd(sides[0],rj);\n                } else {\n                    rj.vsub(sides[0],rj);\n                }\n                if(k){\n                    rj.vadd(sides[1],rj);\n                } else {\n                    rj.vsub(sides[1],rj);\n                }\n                if(l){\n                    rj.vadd(sides[2],rj);\n                } else {\n                    rj.vsub(sides[2],rj);\n                }\n\n                // World position of corner\n                xj.vadd(rj,sphere_to_corner);\n                sphere_to_corner.vsub(xi,sphere_to_corner);\n\n                if(sphere_to_corner.norm2() < R*R){\n                    found = true;\n                    var r = this.createContactEquation(bi,bj,si,sj);\n                    r.ri.copy(sphere_to_corner);\n                    r.ri.normalize();\n                    r.ni.copy(r.ri);\n                    r.ri.mult(R,r.ri);\n                    r.rj.copy(rj);\n\n                    // Make relative to bodies\n                    r.ri.vadd(xi, r.ri);\n                    r.ri.vsub(bi.position, r.ri);\n                    r.rj.vadd(xj, r.rj);\n                    r.rj.vsub(bj.position, r.rj);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(rj);\n    rj = null;\n\n    // Check edges\n    var edgeTangent = v3pool.get();\n    var edgeCenter = v3pool.get();\n    var r = v3pool.get(); // r = edge center to sphere center\n    var orthogonal = v3pool.get();\n    var dist = v3pool.get();\n    var Nsides = sides.length;\n    for(var j=0; j!==Nsides && !found; j++){\n        for(var k=0; k!==Nsides && !found; k++){\n            if(j%3 !== k%3){\n                // Get edge tangent\n                sides[k].cross(sides[j],edgeTangent);\n                edgeTangent.normalize();\n                sides[j].vadd(sides[k], edgeCenter);\n                r.copy(xi);\n                r.vsub(edgeCenter,r);\n                r.vsub(xj,r);\n                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\n                // Find the third side orthogonal to this one\n                var l = 0;\n                while(l===j%3 || l===k%3){\n                    l++;\n                }\n\n                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n                dist.copy(xi);\n                dist.vsub(orthogonal,dist);\n                dist.vsub(edgeCenter,dist);\n                dist.vsub(xj,dist);\n\n                // Distances in tangent direction and distance in the plane orthogonal to it\n                var tdist = Math.abs(orthonorm);\n                var ndist = dist.norm();\n\n                if(tdist < sides[l].norm() && ndist<R){\n                    found = true;\n                    var res = this.createContactEquation(bi,bj,si,sj);\n                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n                    res.rj.copy(res.rj);\n                    dist.negate(res.ni);\n                    res.ni.normalize();\n\n                    res.ri.copy(res.rj);\n                    res.ri.vadd(xj,res.ri);\n                    res.ri.vsub(xi,res.ri);\n                    res.ri.normalize();\n                    res.ri.mult(R,res.ri);\n\n                    // Make relative to bodies\n                    res.ri.vadd(xi, res.ri);\n                    res.ri.vsub(bi.position, res.ri);\n                    res.rj.vadd(xj, res.rj);\n                    res.rj.vsub(bj.position, res.rj);\n\n                    this.result.push(res);\n                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n};\n\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\n\n/**\n * @method sphereConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n    xi.vsub(xj,convex_to_sphere);\n    var normals = sj.faceNormals;\n    var faces = sj.faces;\n    var verts = sj.vertices;\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //     return;\n    // }\n\n    // Check corners\n    for(var i=0; i!==verts.length; i++){\n        var v = verts[i];\n\n        // World position of corner\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v,worldCorner);\n        xj.vadd(worldCorner,worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if(sphere_to_corner.norm2() < R * R){\n            found = true;\n            var r = this.createContactEquation(bi,bj,si,sj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.mult(R,r.ri);\n            worldCorner.vsub(xj,r.rj);\n\n            // Should be relative to the body.\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n\n            // Should be relative to the body.\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n            return;\n        }\n    }\n\n    // Check side (plane) intersections\n    var found = false;\n    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n        var normal = normals[i];\n        var face = faces[i];\n\n        // Get world-transformed normal of the face\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal,worldNormal);\n\n        // Get a world vertex from the face\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]],worldPoint);\n        worldPoint.vadd(xj,worldPoint);\n\n        // Get a point on the sphere, closest to the face normal\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\n        // Vector from a face point to the closest point on the sphere\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\n        // The penetration. Negative value means overlap.\n        var penetration = penetrationVec.dot(worldNormal);\n\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n\n        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n            // Intersects plane. Now check if the sphere is inside the face polygon\n            var faceVerts = []; // Face vertices, in world coords\n            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n                var worldVertex = v3pool.get();\n                qj.vmult(verts[face[j]], worldVertex);\n                xj.vadd(worldVertex,worldVertex);\n                faceVerts.push(worldVertex);\n            }\n\n            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n                found = true;\n                var r = this.createContactEquation(bi,bj,si,sj);\n\n                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n                var penetrationVec2 = v3pool.get();\n                worldNormal.mult(-penetration, penetrationVec2);\n                var penetrationSpherePoint = v3pool.get();\n                worldNormal.mult(-R, penetrationSpherePoint);\n\n                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n                xi.vsub(xj,r.rj);\n                r.rj.vadd(penetrationSpherePoint,r.rj);\n                r.rj.vadd(penetrationVec2 , r.rj);\n\n                // Should be relative to the body.\n                r.rj.vadd(xj, r.rj);\n                r.rj.vsub(bj.position, r.rj);\n\n                // Should be relative to the body.\n                r.ri.vadd(xi, r.ri);\n                r.ri.vsub(bi.position, r.ri);\n\n                v3pool.release(penetrationVec2);\n                v3pool.release(penetrationSpherePoint);\n\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                // Release world vertices\n                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                    v3pool.release(faceVerts[j]);\n                }\n\n                return; // We only expect *one* face contact\n            } else {\n                // Edge?\n                for(var j=0; j!==face.length; j++){\n\n                    // Get two world transformed vertices\n                    var v1 = v3pool.get();\n                    var v2 = v3pool.get();\n                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n                    xj.vadd(v1, v1);\n                    xj.vadd(v2, v2);\n\n                    // Construct edge vector\n                    var edge = sphereConvex_edge;\n                    v2.vsub(v1,edge);\n\n                    // Construct the same vector, but normalized\n                    var edgeUnit = sphereConvex_edgeUnit;\n                    edge.unit(edgeUnit);\n\n                    // p is xi projected onto the edge\n                    var p = v3pool.get();\n                    var v1_to_xi = v3pool.get();\n                    xi.vsub(v1, v1_to_xi);\n                    var dot = v1_to_xi.dot(edgeUnit);\n                    edgeUnit.mult(dot, p);\n                    p.vadd(v1, p);\n\n                    // Compute a vector from p to the center of the sphere\n                    var xi_to_p = v3pool.get();\n                    p.vsub(xi, xi_to_p);\n\n                    // Collision if the edge-sphere distance is less than the radius\n                    // AND if p is in between v1 and v2\n                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n                        // Edge contact!\n                        var r = this.createContactEquation(bi,bj,si,sj);\n                        p.vsub(xj,r.rj);\n\n                        p.vsub(xi,r.ni);\n                        r.ni.normalize();\n\n                        r.ni.mult(R,r.ri);\n\n                        // Should be relative to the body.\n                        r.rj.vadd(xj, r.rj);\n                        r.rj.vsub(bj.position, r.rj);\n\n                        // Should be relative to the body.\n                        r.ri.vadd(xi, r.ri);\n                        r.ri.vsub(bi.position, r.ri);\n\n                        this.result.push(r);\n                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                        // Release world vertices\n                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                            v3pool.release(faceVerts[j]);\n                        }\n\n                        v3pool.release(v1);\n                        v3pool.release(v2);\n                        v3pool.release(p);\n                        v3pool.release(xi_to_p);\n                        v3pool.release(v1_to_xi);\n\n                        return;\n                    }\n\n                    v3pool.release(v1);\n                    v3pool.release(v2);\n                    v3pool.release(p);\n                    v3pool.release(xi_to_p);\n                    v3pool.release(v1_to_xi);\n                }\n            }\n\n            // Release world vertices\n            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                v3pool.release(faceVerts[j]);\n            }\n        }\n    }\n};\n\nvar planeBox_normal = new Vec3();\nvar plane_to_corner = new Vec3();\n\n/**\n * @method planeBox\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\nNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n};\n\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\n\n/**\n * @method planeConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.planeConvex = function(\n    planeShape,\n    convexShape,\n    planePosition,\n    convexPosition,\n    planeQuat,\n    convexQuat,\n    planeBody,\n    convexBody\n){\n    // Simply return the points behind the plane.\n    var worldVertex = planeConvex_v,\n        worldNormal = planeConvex_normal;\n    worldNormal.set(0,0,1);\n    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\n    var numContacts = 0;\n    var relpos = planeConvex_relpos;\n    for(var i = 0; i !== convexShape.vertices.length; i++){\n\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n\n        var dot = worldNormal.dot(relpos);\n        if(dot <= 0.0){\n\n            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\n            // Get vertex position projected on plane\n            var projected = planeConvex_projected;\n            worldNormal.mult(worldNormal.dot(relpos),projected);\n            worldVertex.vsub(projected, projected);\n            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\n            // rj is now just the vector from the convex center to the vertex\n            worldVertex.vsub(convexPosition, r.rj);\n\n            // Make it relative to the body\n            r.ri.vadd(planePosition, r.ri);\n            r.ri.vsub(planeBody.position, r.ri);\n            r.rj.vadd(convexPosition, r.rj);\n            r.rj.vsub(convexBody.position, r.rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    if(this.enableFrictionReduction && numContacts){\n        this.createFrictionFromAverage(numContacts);\n    }\n};\n\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\n\n/**\n * @method convexConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n    var sepAxis = convexConvex_sepAxis;\n\n    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n        return;\n    }\n\n    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n        var numContacts = 0;\n        for(var j = 0; j !== res.length; j++){\n            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n                ri = r.ri,\n                rj = r.rj;\n            sepAxis.negate(r.ni);\n            res[j].normal.negate(q);\n            q.mult(res[j].depth, q);\n            res[j].point.vadd(q, ri);\n            rj.copy(res[j].point);\n\n            // Contact points are in world coordinates. Transform back to relative\n            ri.vsub(xi,ri);\n            rj.vsub(xj,rj);\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n        if(this.enableFrictionReduction && numContacts){\n            this.createFrictionFromAverage(numContacts);\n        }\n    }\n};\n\n\n/**\n * @method convexTrimesh\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\n// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n//     var sepAxis = convexConvex_sepAxis;\n\n//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n//         return;\n//     }\n\n//     // Construct a temp hull for each triangle\n//     var hullB = new ConvexPolyhedron();\n\n//     hullB.faces = [[0,1,2]];\n//     var va = new Vec3();\n//     var vb = new Vec3();\n//     var vc = new Vec3();\n//     hullB.vertices = [\n//         va,\n//         vb,\n//         vc\n//     ];\n\n//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\n//         var triangleNormal = new Vec3();\n//         sj.getNormal(i, triangleNormal);\n//         hullB.faceNormals = [triangleNormal];\n\n//         sj.getTriangleVertices(i, va, vb, vc);\n\n//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n//         if(!d){\n//             triangleNormal.scale(-1, triangleNormal);\n//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\n//             if(!d){\n//                 continue;\n//             }\n//         }\n\n//         var res = [];\n//         var q = convexConvex_q;\n//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n//         for(var j = 0; j !== res.length; j++){\n//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n//                 ri = r.ri,\n//                 rj = r.rj;\n//             r.ni.copy(triangleNormal);\n//             r.ni.negate(r.ni);\n//             res[j].normal.negate(q);\n//             q.mult(res[j].depth, q);\n//             res[j].point.vadd(q, ri);\n//             rj.copy(res[j].point);\n\n//             // Contact points are in world coordinates. Transform back to relative\n//             ri.vsub(xi,ri);\n//             rj.vsub(xj,rj);\n\n//             // Make relative to bodies\n//             ri.vadd(xi, ri);\n//             ri.vsub(bi.position, ri);\n//             rj.vadd(xj, rj);\n//             rj.vsub(bj.position, rj);\n\n//             result.push(r);\n//         }\n//     }\n// };\n\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\n\n/**\n * @method particlePlane\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\nNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var normal = particlePlane_normal;\n    normal.set(0,0,1);\n    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n    var relpos = particlePlane_relpos;\n    xi.vsub(bj.position,relpos);\n    var dot = normal.dot(relpos);\n    if(dot <= 0.0){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n\n        // Get particle position projected on plane\n        var projected = particlePlane_projected;\n        normal.mult(normal.dot(xi),projected);\n        xi.vsub(projected,projected);\n        //projected.vadd(bj.position,projected);\n\n        // rj is now the projected world position minus plane position\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\nvar particleSphere_normal = new Vec3();\n\n/**\n * @method particleSphere\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\nNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    // The normal is the unit vector from sphere center to particle center\n    var normal = particleSphere_normal;\n    normal.set(0,0,1);\n    xi.vsub(xj,normal);\n    var lengthSquared = normal.norm2();\n\n    if(lengthSquared <= sj.radius * sj.radius){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.mult(sj.radius,r.rj);\n        r.ni.copy(normal); // Contact normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// WIP\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nvar convexParticle_normal = new Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\n\n/**\n * @method convexParticle\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var penetratedFaceIndex = -1;\n    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n    var minPenetration = null;\n    var numDetectedFaces = 0;\n\n    // Convert particle position xi to local coords in the convex\n    var local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj,local); // Convert position to relative the convex origin\n    qj.conjugate(cqj);\n    cqj.vmult(local,local);\n\n    if(sj.pointIsInside(local)){\n\n        if(sj.worldVerticesNeedsUpdate){\n            sj.computeWorldVertices(xj,qj);\n        }\n        if(sj.worldFaceNormalsNeedsUpdate){\n            sj.computeWorldFaceNormals(qj);\n        }\n\n        // For each world polygon in the polyhedra\n        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\n            // Construct world face vertices\n            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n            var normal = sj.worldFaceNormals[i];\n\n            // Check how much the particle penetrates the polygon plane.\n            xi.vsub(verts[0],convexParticle_vertexToParticle);\n            var penetration = -normal.dot(convexParticle_vertexToParticle);\n            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n                minPenetration = penetration;\n                penetratedFaceIndex = i;\n                penetratedFaceNormal.copy(normal);\n                numDetectedFaces++;\n            }\n        }\n\n        if(penetratedFaceIndex!==-1){\n            // Setup contact\n            var r = this.createContactEquation(bi,bj,si,sj);\n            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\n            // rj is the particle position projected to the face\n            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n            r.rj.copy(worldPenetrationVec);\n            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n            //projectedToFace.copy(r.rj);\n\n            //qj.vmult(r.rj,r.rj);\n            penetratedFaceNormal.negate( r.ni ); // Contact normal\n            r.ri.set(0,0,0); // Center of particle\n\n            var ri = r.ri,\n                rj = r.rj;\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n        }\n    }\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n};\n\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\n\n/**\n * @method convexHeightfield\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.convexHeightfield = function (\n    convexShape,\n    hfShape,\n    convexPos,\n    hfPos,\n    convexQuat,\n    hfQuat,\n    convexBody,\n    hfBody\n){\n    var data = hfShape.data,\n        w = hfShape.elementSize,\n        radius = convexShape.boundingSphereRadius,\n        worldPillarOffset = convexHeightfield_tmp2,\n        faceList = convexHeightfield_faceList;\n\n    // Get sphere position to heightfield local!\n    var localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n        return;\n    }\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n        }\n    }\n};\n\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\n\n/**\n * @method sphereHeightfield\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.sphereHeightfield = function (\n    sphereShape,\n    hfShape,\n    spherePos,\n    hfPos,\n    sphereQuat,\n    hfQuat,\n    sphereBody,\n    hfBody\n){\n    var data = hfShape.data,\n        radius = sphereShape.radius,\n        w = hfShape.elementSize,\n        worldPillarOffset = sphereHeightfield_tmp2;\n\n    // Get sphere position to heightfield local!\n    var localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n        return;\n    }\n\n    var result = this.result;\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            var numContactsBefore = result.length;\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            var numContacts = result.length - numContactsBefore;\n\n            if(numContacts > 2){\n                return;\n            }\n            /*\n            // Skip all but 1\n            for (var k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n            */\n        }\n    }\n};\n\n\n\n","module.exports = Ray;\n\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\nvar ConvexPolyhedron = require('../shapes/ConvexPolyhedron');\nvar Box = require('../shapes/Box');\nvar RaycastResult = require('../collision/RaycastResult');\nvar Shape = require('../shapes/Shape');\nvar AABB = require('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n    var data = shape.data,\n        w = shape.elementSize,\n        worldPillarOffset = new Vec3();\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = new Ray(this.from, this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\n    // Get the index of the data points to test against\n    var index = [];\n    var iMinX = null;\n    var iMinY = null;\n    var iMaxX = null;\n    var iMaxY = null;\n\n    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n    if(inside){\n        iMinX = index[0];\n        iMinY = index[1];\n        iMaxX = index[0];\n        iMaxY = index[1];\n    }\n    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n    if(inside){\n        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n    }\n\n    if(iMinX === null){\n        return;\n    }\n\n    var minMax = [];\n    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // // Bail out if the ray can't touch the bounding box\n    // // TODO\n    // var aabb = new AABB();\n    // this.getAABB(aabb);\n    // if(aabb.intersects()){\n    //     return;\n    // }\n\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    //body.vectorToLocalFrame(direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    //body.pointToLocalFrame(from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    //body.pointToLocalFrame(to, localTo);\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // Get plane normal\n        // quat.vmult(normal, normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        //body.vectorToWorldFrame(normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n\n\n\n","var Vec3 = require('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};\n\n\n","module.exports = Solver;\n\n/**\n * Constraint equation solver base class.\n * @class Solver\n * @constructor\n * @author schteppe / https://github.com/schteppe\n */\nfunction Solver(){\n    /**\n     * All equations to be solved\n     * @property {Array} equations\n     */\n    this.equations = [];\n}\n\n/**\n * Should be implemented in subclasses!\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSolver.prototype.solve = function(dt,world){\n    // Should return the number of iterations done!\n    return 0;\n};\n\n/**\n * Add an equation\n * @method addEquation\n * @param {Equation} eq\n */\nSolver.prototype.addEquation = function(eq){\n    if (eq.enabled) {\n        this.equations.push(eq);\n    }\n};\n\n/**\n * Remove an equation\n * @method removeEquation\n * @param {Equation} eq\n */\nSolver.prototype.removeEquation = function(eq){\n    var eqs = this.equations;\n    var i = eqs.indexOf(eq);\n    if(i !== -1){\n        eqs.splice(i,1);\n    }\n};\n\n/**\n * Add all equations\n * @method removeAllEquations\n */\nSolver.prototype.removeAllEquations = function(){\n    this.equations.length = 0;\n};\n\n\n\n\n","module.exports = Vec3Pool;\n\nvar Vec3 = require('../math/Vec3');\nvar Pool = require('./Pool');\n\n/**\n * @class Vec3Pool\n * @constructor\n * @extends Pool\n */\nfunction Vec3Pool(){\n    Pool.call(this);\n    this.type = Vec3;\n}\nVec3Pool.prototype = new Pool();\n\n/**\n * Construct a vector\n * @method constructObject\n * @return {Vec3}\n */\nVec3Pool.prototype.constructObject = function(){\n    return new Vec3();\n};\n\n\n\n","module.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n\n\n","module.exports = FrictionEquation;\n\nvar Equation = require('./Equation');\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\n\n/**\n * Constrains the slipping in a contact along a tangent\n * @class FrictionEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n * @extends Equation\n */\nfunction FrictionEquation(bodyA, bodyB, slipForce){\n    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3(); // tangent\n}\n\nFrictionEquation.prototype = new Equation();\nFrictionEquation.prototype.constructor = FrictionEquation;\n\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\nFrictionEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixt = FrictionEquation_computeB_temp1,\n        rjxt = FrictionEquation_computeB_temp2,\n        t = this.t;\n\n    // Caluclate cross products\n    ri.cross(t,rixt);\n    rj.cross(t,rjxt);\n\n    // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n\n    var GW = this.computeGW();\n    var GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n\n","module.exports = ConeTwistConstraint;\n\nvar Constraint = require('./Constraint');\nvar PointToPointConstraint = require('./PointToPointConstraint');\nvar ConeEquation = require('../equations/ConeEquation');\nvar RotationalEquation = require('../equations/RotationalEquation');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n\n\n\n","module.exports = PointToPointConstraint;\n\nvar Constraint = require('./Constraint');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};\n\n\n","module.exports = ConeEquation;\n\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\nvar Equation = require('./Equation');\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n * @class ConeEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA] Local axis in A\n * @param {Vec3} [options.axisB] Local axis in B\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\n * @param {number} [options.maxForce=1e6]\n * @extends Equation\n */\nfunction ConeEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    /**\n     * The cone angle to keep\n     * @property {number} angle\n     */\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n}\n\nConeEquation.prototype = new Equation();\nConeEquation.prototype.constructor = ConeEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nConeEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.angle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n\n\n","module.exports = RotationalEquation;\n\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\nvar Equation = require('./Equation');\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n * @class RotationalEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {number} [options.maxForce]\n * @extends Equation\n */\nfunction RotationalEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    this.maxAngle = Math.PI / 2;\n}\n\nRotationalEquation.prototype = new Equation();\nRotationalEquation.prototype.constructor = RotationalEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nRotationalEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n\n\n","var Utils = require('../utils/Utils');\n\nmodule.exports = ContactMaterial;\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n */\nfunction ContactMaterial(m1, m2, options){\n    options = Utils.defaults(options, {\n        friction: 0.3,\n        restitution: 0.3,\n        contactEquationStiffness: 1e7,\n        contactEquationRelaxation: 3,\n        frictionEquationStiffness: 1e7,\n        frictionEquationRelaxation: 3\n    });\n\n    /**\n     * Identifier of this material\n     * @property {Number} id\n     */\n    this.id = ContactMaterial.idCounter++;\n\n    /**\n     * Participating materials\n     * @property {Array} materials\n     * @todo  Should be .materialA and .materialB instead\n     */\n    this.materials = [m1, m2];\n\n    /**\n     * Friction coefficient\n     * @property {Number} friction\n     */\n    this.friction = options.friction;\n\n    /**\n     * Restitution coefficient\n     * @property {Number} restitution\n     */\n    this.restitution = options.restitution;\n\n    /**\n     * Stiffness of the produced contact equations\n     * @property {Number} contactEquationStiffness\n     */\n    this.contactEquationStiffness = options.contactEquationStiffness;\n\n    /**\n     * Relaxation time of the produced contact equations\n     * @property {Number} contactEquationRelaxation\n     */\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\n    /**\n     * Stiffness of the produced friction equations\n     * @property {Number} frictionEquationStiffness\n     */\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\n    /**\n     * Relaxation time of the produced friction equations\n     * @property {Number} frictionEquationRelaxation\n     */\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n}\n\nContactMaterial.idCounter = 0;\n\n\n\n","module.exports = Cylinder;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\nfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n    var N = numSegments,\n        verts = [],\n        axes = [],\n        faces = [],\n        bottomface = [],\n        topface = [],\n        cos = Math.cos,\n        sin = Math.sin;\n\n    // First bottom point\n    verts.push(new Vec3(radiusBottom*cos(0),\n                               radiusBottom*sin(0),\n                               -height*0.5));\n    bottomface.push(0);\n\n    // First top point\n    verts.push(new Vec3(radiusTop*cos(0),\n                               radiusTop*sin(0),\n                               height*0.5));\n    topface.push(1);\n\n    for(var i=0; i<N; i++){\n        var theta = 2*Math.PI/N * (i+1);\n        var thetaN = 2*Math.PI/N * (i+0.5);\n        if(i<N-1){\n            // Bottom\n            verts.push(new Vec3(radiusBottom*cos(theta),\n                                       radiusBottom*sin(theta),\n                                       -height*0.5));\n            bottomface.push(2*i+2);\n            // Top\n            verts.push(new Vec3(radiusTop*cos(theta),\n                                       radiusTop*sin(theta),\n                                       height*0.5));\n            topface.push(2*i+3);\n\n            // Face\n            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n        } else {\n            faces.push([0,1, 2*i+1, 2*i]); // Connect\n        }\n\n        // Axis: we can cut off half of them if we have even number of segments\n        if(N % 2 === 1 || i < N / 2){\n            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n        }\n    }\n    faces.push(topface);\n    axes.push(new Vec3(0,0,1));\n\n    // Reorder bottom face\n    var temp = [];\n    for(var i=0; i<bottomface.length; i++){\n        temp.push(bottomface[bottomface.length - i - 1]);\n    }\n    faces.push(temp);\n\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n    ConvexPolyhedron.call( this, verts, faces, axes );\n}\n\nCylinder.prototype = new ConvexPolyhedron();\n\n\n\n","module.exports = DistanceConstraint;\n\nvar Constraint = require('./Constraint');\nvar ContactEquation = require('../equations/ContactEquation');\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n * @class DistanceConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n * @param {Number} [maxForce=1e6]\n * @extends Constraint\n */\nfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    if(typeof(distance)===\"undefined\") {\n        distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    if(typeof(maxForce)===\"undefined\") {\n        maxForce = 1e6;\n    }\n\n    /**\n     * @property {number} distance\n     */\n    this.distance = distance;\n\n    /**\n     * @property {ContactEquation} distanceEquation\n     */\n    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n\n    // Make it bidirectional\n    eq.minForce = -maxForce;\n    eq.maxForce =  maxForce;\n}\nDistanceConstraint.prototype = new Constraint();\n\nDistanceConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var eq = this.distanceEquation;\n    var halfDist = this.distance * 0.5;\n    var normal = eq.ni;\n\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.mult(halfDist, eq.ri);\n    normal.mult(-halfDist, eq.rj);\n};\n\n\n","module.exports = GSSolver;\n\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Solver = require('./Solver');\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @class GSSolver\n * @constructor\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @author schteppe / https://github.com/schteppe\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n * @extends Solver\n */\nfunction GSSolver(){\n    Solver.call(this);\n\n    /**\n     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n     * @property iterations\n     * @type {Number}\n     * @todo write more about solver and iterations in the wiki\n     */\n    this.iterations = 10;\n\n    /**\n     * When tolerance is reached, the system is assumed to be converged.\n     * @property tolerance\n     * @type {Number}\n     */\n    this.tolerance = 1e-7;\n}\nGSSolver.prototype = new Solver();\n\nvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\nGSSolver.prototype.solve = function(dt,world){\n    var iter = 0,\n        maxIter = this.iterations,\n        tolSquared = this.tolerance*this.tolerance,\n        equations = this.equations,\n        Neq = equations.length,\n        bodies = world.bodies,\n        Nbodies = bodies.length,\n        h = dt,\n        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\n    // Update solve mass\n    if(Neq !== 0){\n        for(var i=0; i!==Nbodies; i++){\n            bodies[i].updateSolveMassProperties();\n        }\n    }\n\n    // Things that does not change during iteration can be computed once\n    var invCs = GSSolver_solve_invCs,\n        Bs = GSSolver_solve_Bs,\n        lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for(var i=0; i!==Neq; i++){\n        var c = equations[i];\n        lambda[i] = 0.0;\n        Bs[i] = c.computeB(h);\n        invCs[i] = 1.0 / c.computeC();\n    }\n\n    if(Neq !== 0){\n\n        // Reset vlambda\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                vlambda=b.vlambda,\n                wlambda=b.wlambda;\n            vlambda.set(0,0,0);\n            if(wlambda){\n                wlambda.set(0,0,0);\n            }\n        }\n\n        // Iterate over equations\n        for(iter=0; iter!==maxIter; iter++){\n\n            // Accumulate the total error for each iteration.\n            deltalambdaTot = 0.0;\n\n            for(var j=0; j!==Neq; j++){\n\n                var c = equations[j];\n\n                // Compute iteration\n                B = Bs[j];\n                invC = invCs[j];\n                lambdaj = lambda[j];\n                GWlambda = c.computeGWlambda();\n                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\n                // Clamp if we are not within the min/max interval\n                if(lambdaj + deltalambda < c.minForce){\n                    deltalambda = c.minForce - lambdaj;\n                } else if(lambdaj + deltalambda > c.maxForce){\n                    deltalambda = c.maxForce - lambdaj;\n                }\n                lambda[j] += deltalambda;\n\n                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n                c.addToWlambda(deltalambda);\n            }\n\n            // If the total error is small enough - stop iterate\n            if(deltalambdaTot*deltalambdaTot < tolSquared){\n                break;\n            }\n        }\n\n        // Add result to velocity\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                v=b.velocity,\n                w=b.angularVelocity;\n            v.vadd(b.vlambda, v);\n            if(w){\n                w.vadd(b.wlambda, w);\n            }\n        }\n    }\n\n    return iter;\n};\n\n\n\n","module.exports = GridBroadphase;\n\nvar Broadphase = require('./Broadphase');\nvar Vec3 = require('../math/Vec3');\nvar Shape = require('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n\n\n\n","var Shape = require('./Shape');\nvar ConvexPolyhedron = require('./ConvexPolyhedron');\nvar Vec3 = require('../math/Vec3');\nvar Utils = require('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this);\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.type = Shape.types.HEIGHTFIELD;\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var idx = [];\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\n    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n    var minmax = [];\n    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\n    return (minmax[0] + minmax[1]) / 2; // average\n};\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n\n\n","module.exports = HingeConstraint;\n\nvar Constraint = require('./Constraint');\nvar PointToPointConstraint = require('./PointToPointConstraint');\nvar RotationalEquation = require('../equations/RotationalEquation');\nvar RotationalMotorEquation = require('../equations/RotationalMotorEquation');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n * @class HingeConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction HingeConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * Rotation axis, defined locally in bodyA.\n     * @property {Vec3} axisA\n     */\n    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n    axisA.normalize();\n\n    /**\n     * Rotation axis, defined locally in bodyB.\n     * @property {Vec3} axisB\n     */\n    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n    axisB.normalize();\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalMotorEquation} motorEquation\n     */\n    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n    motor.enabled = false; // Not enabled by default\n\n    // Equations to be fed to the solver\n    this.equations.push(\n        r1, // rotational1\n        r2, // rotational2\n        motor\n    );\n}\nHingeConstraint.prototype = new PointToPointConstraint();\nHingeConstraint.constructor = HingeConstraint;\n\n/**\n * @method enableMotor\n */\nHingeConstraint.prototype.enableMotor = function(){\n    this.motorEquation.enabled = true;\n};\n\n/**\n * @method disableMotor\n */\nHingeConstraint.prototype.disableMotor = function(){\n    this.motorEquation.enabled = false;\n};\n\n/**\n * @method setMotorSpeed\n * @param {number} speed\n */\nHingeConstraint.prototype.setMotorSpeed = function(speed){\n    this.motorEquation.targetVelocity = speed;\n};\n\n/**\n * @method setMotorMaxForce\n * @param {number} maxForce\n */\nHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n};\n\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\nHingeConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        worldAxisA = HingeConstraint_update_tmpVec1,\n        worldAxisB = HingeConstraint_update_tmpVec2;\n\n    var axisA = this.axisA;\n    var axisB = this.axisB;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Get world axes\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if(this.motorEquation.enabled){\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n};\n\n\n\n\n","module.exports = RotationalMotorEquation;\n\nvar Vec3 = require('../math/Vec3');\nvar Mat3 = require('../math/Mat3');\nvar Equation = require('./Equation');\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n * @class RotationalMotorEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} maxForce\n * @extends Equation\n */\nfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisA\n     */\n    this.axisA = new Vec3();\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisB\n     */\n    this.axisB = new Vec3(); // World oriented rotational axis\n\n    /**\n     * Motor velocity\n     * @property {Number} targetVelocity\n     */\n    this.targetVelocity = 0;\n}\n\nRotationalMotorEquation.prototype = new Equation();\nRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\nRotationalMotorEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n\n        axisA = this.axisA,\n        axisB = this.axisB,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n\n    var GW = this.computeGW() - this.targetVelocity,\n        GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n\n","module.exports = LockConstraint;\n\nvar Constraint = require('./Constraint');\nvar PointToPointConstraint = require('./PointToPointConstraint');\nvar RotationalEquation = require('../equations/RotationalEquation');\nvar RotationalMotorEquation = require('../equations/RotationalMotorEquation');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n * @class LockConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction LockConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation3\n     */\n    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\n    this.equations.push(r1, r2, r3);\n}\nLockConstraint.prototype = new PointToPointConstraint();\nLockConstraint.constructor = LockConstraint;\n\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\nLockConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        r3 = this.rotationalEquation3,\n        worldAxisA = LockConstraint_update_tmpVec1,\n        worldAxisB = LockConstraint_update_tmpVec2;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n};\n\n\n\n\n","module.exports = NaiveBroadphase;\n\nvar Broadphase = require('./Broadphase');\nvar AABB = require('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n\n\n","module.exports = ObjectCollisionMatrix;\n\n/**\n * Records what objects are colliding with each other\n * @class ObjectCollisionMatrix\n * @constructor\n */\nfunction ObjectCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Object}\n     */\n\tthis.matrix = {};\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nObjectCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn i+'-'+j in this.matrix;\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n\t}\n\tif (value) {\n\t\tthis.matrix[i+'-'+j] = true;\n\t}\n\telse {\n\t\tdelete this.matrix[i+'-'+j];\n\t}\n};\n\n/**\n * Empty the matrix\n * @method reset\n */\nObjectCollisionMatrix.prototype.reset = function() {\n\tthis.matrix = {};\n};\n\n/**\n * Set max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n};\n\n\n\n","module.exports = Particle;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Particle shape.\n * @class Particle\n * @constructor\n * @author schteppe\n * @extends Shape\n */\nfunction Particle(){\n    Shape.call(this);\n\n    this.type = Shape.types.PARTICLE;\n}\nParticle.prototype = new Shape();\nParticle.prototype.constructor = Particle;\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nParticle.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nParticle.prototype.volume = function(){\n    return 0;\n};\n\nParticle.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = 0;\n};\n\nParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n};\n\n\n\n","var Body = require('./Body');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar RaycastResult = require('../collision/RaycastResult');\nvar Ray = require('../collision/Ray');\nvar WheelInfo = require('../objects/WheelInfo');\n\nmodule.exports = RaycastVehicle;\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n * @class RaycastVehicle\n * @constructor\n * @param {object} [options]\n * @param {Body} [options.chassisBody] The car chassis body.\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n * @param {integer} [options.indexLeftAxis]\n * @param {integer} [options.indexUpAxis]\n */\nfunction RaycastVehicle(options){\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    /**\n     * An array of WheelInfo objects.\n     * @property {array} wheelInfos\n     */\n    this.wheelInfos = [];\n\n    /**\n     * Will be set to true if the car is sliding.\n     * @property {boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * @property {World} world\n     */\n    this.world = null;\n\n    /**\n     * Index of the right axis, 0=x, 1=y, 2=z\n     * @property {integer} indexRightAxis\n     * @default 1\n     */\n    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\n    /**\n     * Index of the forward axis, 0=x, 1=y, 2=z\n     * @property {integer} indexForwardAxis\n     * @default 0\n     */\n    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\n    /**\n     * Index of the up axis, 0=x, 1=y, 2=z\n     * @property {integer} indexUpAxis\n     * @default 2\n     */\n    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n}\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpVec3 = new Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nvar tmpRay = new Ray();\n\n/**\n * Add a wheel. For information about the options, see WheelInfo.\n * @method addWheel\n * @param {object} [options]\n */\nRaycastVehicle.prototype.addWheel = function(options){\n    options = options || {};\n\n    var info = new WheelInfo(options);\n    var index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n\n    return index;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    var wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method applyEngineForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n    this.wheelInfos[wheelIndex].engineForce = value;\n};\n\n/**\n * Set the braking force of a wheel\n * @method setBrake\n * @param {number} brake\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n    this.wheelInfos[wheelIndex].brake = brake;\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    world.add(this.chassisBody);\n    var that = this;\n    this.preStepCallback = function(){\n        that.updateVehicle(world.dt);\n    };\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n};\n\n/**\n * Get one of the wheel axles, world-oriented.\n * @private\n * @method getVehicleAxisWorld\n * @param  {integer} axisIndex\n * @param  {Vec3} result\n */\nRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n    result.set(\n        axisIndex === 0 ? 1 : 0,\n        axisIndex === 1 ? 1 : 0,\n        axisIndex === 2 ? 1 : 0\n    );\n    this.chassisBody.vectorToWorldFrame(result, result);\n};\n\nRaycastVehicle.prototype.updateVehicle = function(timeStep){\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n\n    for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\n    var forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0){\n        this.currentVehicleSpeedKmHour *= -1;\n    }\n\n    // simulate suspension\n    for (var i = 0; i < numWheels; i++) {\n        this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n\n    var impulse = new Vec3();\n    var relpos = new Vec3();\n    for (var i = 0; i < numWheels; i++) {\n        //apply suspension force\n        var wheel = wheelInfos[i];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n            suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n    }\n\n    this.updateFriction(timeStep);\n\n    var hitNormalWorldScaledWithProj = new Vec3();\n    var fwd  = new Vec3();\n    var vel = new Vec3();\n    for (i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        //var relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\n        // Hack to get the rotation in the correct direction\n        var m = 1;\n        switch(this.indexUpAxis){\n        case 1:\n            m = -1;\n            break;\n        }\n\n        if (wheel.isInContact) {\n\n            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\n            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\n            var proj2 = fwd.dot(vel);\n            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n        }\n\n        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n            // Apply custom rotation when accelerating and sliding\n            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n        }\n\n        // Lock wheels\n        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n            wheel.deltaRotation = 0;\n        }\n\n        wheel.rotation += wheel.deltaRotation; // Use the old value\n        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n};\n\nRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n    var chassisBody = this.chassisBody;\n    var chassisMass = chassisBody.mass;\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n\n    for (var w_it = 0; w_it < numWheels; w_it++){\n        var wheel = wheelInfos[w_it];\n\n        if (wheel.isInContact){\n            var force;\n\n            // Spring\n            var susp_length = wheel.suspensionRestLength;\n            var current_length = wheel.suspensionLength;\n            var length_diff = (susp_length - current_length);\n\n            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\n            // Damper\n            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n            var susp_damping;\n            if (projected_rel_vel < 0) {\n                susp_damping = wheel.dampingCompression;\n            } else {\n                susp_damping = wheel.dampingRelaxation;\n            }\n            force -= susp_damping * projected_rel_vel;\n\n            wheel.suspensionForce = force * chassisMass;\n            if (wheel.suspensionForce < 0) {\n                wheel.suspensionForce = 0;\n            }\n        } else {\n            wheel.suspensionForce = 0;\n        }\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    world.remove(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n};\n\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nRaycastVehicle.prototype.castRay = function(wheel) {\n    var rayvector = castRay_rayvector;\n    var target = castRay_target;\n\n    this.updateWheelTransformWorld(wheel);\n    var chassisBody = this.chassisBody;\n\n    var depth = -1;\n\n    var raylen = wheel.suspensionRestLength + wheel.radius;\n\n    wheel.directionWorld.scale(raylen, rayvector);\n    var source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    var raycastResult = wheel.raycastResult;\n\n    var param = 0;\n\n    raycastResult.reset();\n    // Turn off ray collision with the chassis temporarily\n    var oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n\n    // Cast ray against world\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n\n    var object = raycastResult.body;\n\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius;\n\n        // clamp on max suspension travel\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n            wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n            wheel.suspensionLength = maxSuspensionLength;\n            wheel.raycastResult.reset();\n        }\n\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\n        var chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\n        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\n        if (denominator >= -0.1) {\n            wheel.suspensionRelativeVelocity = 0;\n            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n            var inv = -1 / denominator;\n            wheel.suspensionRelativeVelocity = projVel * inv;\n            wheel.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n};\n\nRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n    wheel.isInContact = false;\n    var chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n};\n\n\n/**\n * Update one of the wheel transform.\n * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n * @method updateWheelTransform\n * @param {integer} wheelIndex The wheel index to update.\n */\nRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n    var up = tmpVec4;\n    var right = tmpVec5;\n    var fwd = tmpVec6;\n\n    var wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n\n    // Rotate around steering over the wheelAxle\n    var steering = wheel.steering;\n    var steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n\n    var rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\n    // World rotation of the wheel\n    var q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n\n    q.normalize();\n\n    // world position of the wheel\n    var p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n};\n\nvar directions = [\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\n\n/**\n * Get the world transform of one of the wheels\n * @method getWheelTransformWorld\n * @param  {integer} wheelIndex\n * @return {Transform}\n */\nRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n};\n\n\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nRaycastVehicle.prototype.updateFriction = function(timeStep) {\n    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\n    //calculate the impulse, so that the wheels don't move sidewards\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n    var forwardWS = updateFriction_forwardWS;\n    var axle = updateFriction_axle;\n\n    var numWheelsOnGround = 0;\n\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject){\n            numWheelsOnGround++;\n        }\n\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if(!forwardWS[i]){\n            forwardWS[i] = new Vec3();\n        }\n        if(!axle[i]){\n            axle[i] = new Vec3();\n        }\n    }\n\n    for (var i = 0; i < numWheels; i++){\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n\n        if (groundObject) {\n            var axlei = axle[i];\n            var wheelTrans = this.getWheelTransformWorld(i);\n\n            // Get world axle\n            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\n            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n            var proj = axlei.dot(surfNormalWS);\n            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n            axlei.normalize();\n\n            surfNormalWS.cross(axlei, forwardWS[i]);\n            forwardWS[i].normalize();\n\n            wheel.sideImpulse = resolveSingleBilateral(\n                chassisBody,\n                wheel.raycastResult.hitPointWorld,\n                groundObject,\n                wheel.raycastResult.hitPointWorld,\n                axlei\n            );\n\n            wheel.sideImpulse *= sideFrictionStiffness2;\n        }\n    }\n\n    var sideFactor = 1;\n    var fwdFactor = 0.5;\n\n    this.sliding = false;\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n\n        var rollingFriction = 0;\n\n        wheel.slipInfo = 1;\n        if (groundObject) {\n            var defaultRollingFrictionImpulse = 0;\n            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\n            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n            // rollingFriction = calcRollingFriction(contactPt);\n            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\n            rollingFriction += wheel.engineForce * timeStep;\n\n            // rollingFriction = 0;\n            var factor = maxImpulse / rollingFriction;\n            wheel.slipInfo *= factor;\n        }\n\n        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        wheel.forwardImpulse = 0;\n        wheel.skidInfo = 1;\n\n        if (groundObject) {\n            wheel.skidInfo = 1;\n\n            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n            var maximpSide = maximp;\n\n            var maximpSquared = maximp * maximpSide;\n\n            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\n            var x = wheel.forwardImpulse * fwdFactor;\n            var y = wheel.sideImpulse * sideFactor;\n\n            var impulseSquared = x * x + y * y;\n\n            wheel.sliding = false;\n            if (impulseSquared > maximpSquared) {\n                this.sliding = true;\n                wheel.sliding = true;\n\n                var factor = maximp / Math.sqrt(impulseSquared);\n\n                wheel.skidInfo *= factor;\n            }\n        }\n    }\n\n    if (this.sliding) {\n        for (var i = 0; i < numWheels; i++) {\n            var wheel = wheelInfos[i];\n            if (wheel.sideImpulse !== 0) {\n                if (wheel.skidInfo < 1){\n                    wheel.forwardImpulse *= wheel.skidInfo;\n                    wheel.sideImpulse *= wheel.skidInfo;\n                }\n            }\n        }\n    }\n\n    // apply the impulses\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var rel_pos = new Vec3();\n        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n        // cannons applyimpulse is using world coord for the position\n        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (wheel.forwardImpulse !== 0) {\n            var impulse = new Vec3();\n            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n            chassisBody.applyImpulse(impulse, rel_pos);\n        }\n\n        if (wheel.sideImpulse !== 0){\n            var groundObject = wheel.raycastResult.body;\n\n            var rel_pos2 = new Vec3();\n            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n            var sideImp = new Vec3();\n            axle[i].scale(wheel.sideImpulse, sideImp);\n\n            // Scale the relative position in the up direction with rollInfluence.\n            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n            chassisBody.applyImpulse(sideImp, rel_pos);\n\n            //apply friction impulse on the ground\n            sideImp.scale(-1, sideImp);\n            groundObject.applyImpulse(sideImp, rel_pos2);\n        }\n    }\n};\n\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n    var j1 = 0;\n    var contactPosWorld = frictionPosWorld;\n\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    var vel1 = calcRollingFriction_vel1;\n    var vel2 = calcRollingFriction_vel2;\n    var vel = calcRollingFriction_vel;\n    // contactPosWorld.vsub(body0.position, rel_pos1);\n    // contactPosWorld.vsub(body1.position, rel_pos2);\n\n    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n    vel1.vsub(vel2, vel);\n\n    var vrel = frictionDirectionWorld.dot(vel);\n\n    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n    var relaxation = 1;\n    var jacDiagABInv = relaxation / (denom0 + denom1);\n\n    // calculate j that moves us to zero relative velocity\n    j1 = -vrel * jacDiagABInv;\n\n    if (maxImpulse < j1) {\n        j1 = maxImpulse;\n    }\n    if (j1 < -maxImpulse) {\n        j1 = -maxImpulse;\n    }\n\n    return j1;\n}\n\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n    var r0 = computeImpulseDenominator_r0;\n    var c0 = computeImpulseDenominator_c0;\n    var vec = computeImpulseDenominator_vec;\n    var m = computeImpulseDenominator_m;\n\n    pos.vsub(body.position, r0);\n    r0.cross(normal, c0);\n    body.invInertiaWorld.vmult(c0, m);\n    m.cross(r0, vec);\n\n    return body.invMass + normal.dot(vec);\n}\n\n\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3();\n\n//bilateral constraint between two dynamic objects\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n    var normalLenSqr = normal.norm2();\n    if (normalLenSqr > 1.1){\n        return 0; // no impulse\n    }\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    // pos1.vsub(body1.position, rel_pos1);\n    // pos2.vsub(body2.position, rel_pos2);\n\n    var vel1 = resolveSingleBilateral_vel1;\n    var vel2 = resolveSingleBilateral_vel2;\n    var vel = resolveSingleBilateral_vel;\n    body1.getVelocityAtWorldPoint(pos1, vel1);\n    body2.getVelocityAtWorldPoint(pos2, vel2);\n\n    vel1.vsub(vel2, vel);\n\n    var rel_vel = normal.dot(vel);\n\n    var contactDamping = 0.2;\n    var massTerm = 1 / (body1.invMass + body2.invMass);\n    var impulse = - contactDamping * rel_vel * massTerm;\n\n    return impulse;\n}\n\n\n","var Vec3 = require('../math/Vec3');\nvar Transform = require('../math/Transform');\nvar RaycastResult = require('../collision/RaycastResult');\nvar Utils = require('../utils/Utils');\n\nmodule.exports = WheelInfo;\n\n/**\n * @class WheelInfo\n * @constructor\n * @param {Object} [options]\n *\n * @param {Vec3} [options.chassisConnectionPointLocal]\n * @param {Vec3} [options.chassisConnectionPointWorld]\n * @param {Vec3} [options.directionLocal]\n * @param {Vec3} [options.directionWorld]\n * @param {Vec3} [options.axleLocal]\n * @param {Vec3} [options.axleWorld]\n * @param {number} [options.suspensionRestLength=1]\n * @param {number} [options.suspensionMaxLength=2]\n * @param {number} [options.radius=1]\n * @param {number} [options.suspensionStiffness=100]\n * @param {number} [options.dampingCompression=10]\n * @param {number} [options.dampingRelaxation=10]\n * @param {number} [options.frictionSlip=10000]\n * @param {number} [options.steering=0]\n * @param {number} [options.rotation=0]\n * @param {number} [options.deltaRotation=0]\n * @param {number} [options.rollInfluence=0.01]\n * @param {number} [options.maxSuspensionForce]\n * @param {boolean} [options.isFrontWheel=true]\n * @param {number} [options.clippedInvContactDotSuspension=1]\n * @param {number} [options.suspensionRelativeVelocity=0]\n * @param {number} [options.suspensionForce=0]\n * @param {number} [options.skidInfo=0]\n * @param {number} [options.suspensionLength=0]\n * @param {number} [options.maxSuspensionTravel=1]\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n */\nfunction WheelInfo(options){\n    options = Utils.defaults(options, {\n        chassisConnectionPointLocal: new Vec3(),\n        chassisConnectionPointWorld: new Vec3(),\n        directionLocal: new Vec3(),\n        directionWorld: new Vec3(),\n        axleLocal: new Vec3(),\n        axleWorld: new Vec3(),\n        suspensionRestLength: 1,\n        suspensionMaxLength: 2,\n        radius: 1,\n        suspensionStiffness: 100,\n        dampingCompression: 10,\n        dampingRelaxation: 10,\n        frictionSlip: 10000,\n        steering: 0,\n        rotation: 0,\n        deltaRotation: 0,\n        rollInfluence: 0.01,\n        maxSuspensionForce: Number.MAX_VALUE,\n        isFrontWheel: true,\n        clippedInvContactDotSuspension: 1,\n        suspensionRelativeVelocity: 0,\n        suspensionForce: 0,\n        skidInfo: 0,\n        suspensionLength: 0,\n        maxSuspensionTravel: 1,\n        useCustomSlidingRotationalSpeed: false,\n        customSlidingRotationalSpeed: -0.1\n    });\n\n    /**\n     * Max travel distance of the suspension, in meters.\n     * @property {number} maxSuspensionTravel\n     */\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\n    /**\n     * Speed to apply to the wheel rotation when the wheel is sliding.\n     * @property {number} customSlidingRotationalSpeed\n     */\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\n    /**\n     * If the customSlidingRotationalSpeed should be used.\n     * @property {Boolean} useCustomSlidingRotationalSpeed\n     */\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\n    /**\n     * @property {Boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * Connection point, defined locally in the chassis body frame.\n     * @property {Vec3} chassisConnectionPointLocal\n     */\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\n    /**\n     * @property {Vec3} chassisConnectionPointWorld\n     */\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\n    /**\n     * @property {Vec3} directionLocal\n     */\n    this.directionLocal = options.directionLocal.clone();\n\n    /**\n     * @property {Vec3} directionWorld\n     */\n    this.directionWorld = options.directionWorld.clone();\n\n    /**\n     * @property {Vec3} axleLocal\n     */\n    this.axleLocal = options.axleLocal.clone();\n\n    /**\n     * @property {Vec3} axleWorld\n     */\n    this.axleWorld = options.axleWorld.clone();\n\n    /**\n     * @property {number} suspensionRestLength\n     */\n    this.suspensionRestLength = options.suspensionRestLength;\n\n    /**\n     * @property {number} suspensionMaxLength\n     */\n    this.suspensionMaxLength = options.suspensionMaxLength;\n\n    /**\n     * @property {number} radius\n     */\n    this.radius = options.radius;\n\n    /**\n     * @property {number} suspensionStiffness\n     */\n    this.suspensionStiffness = options.suspensionStiffness;\n\n    /**\n     * @property {number} dampingCompression\n     */\n    this.dampingCompression = options.dampingCompression;\n\n    /**\n     * @property {number} dampingRelaxation\n     */\n    this.dampingRelaxation = options.dampingRelaxation;\n\n    /**\n     * @property {number} frictionSlip\n     */\n    this.frictionSlip = options.frictionSlip;\n\n    /**\n     * @property {number} steering\n     */\n    this.steering = 0;\n\n    /**\n     * Rotation value, in radians.\n     * @property {number} rotation\n     */\n    this.rotation = 0;\n\n    /**\n     * @property {number} deltaRotation\n     */\n    this.deltaRotation = 0;\n\n    /**\n     * @property {number} rollInfluence\n     */\n    this.rollInfluence = options.rollInfluence;\n\n    /**\n     * @property {number} maxSuspensionForce\n     */\n    this.maxSuspensionForce = options.maxSuspensionForce;\n\n    /**\n     * @property {number} engineForce\n     */\n    this.engineForce = 0;\n\n    /**\n     * @property {number} brake\n     */\n    this.brake = 0;\n\n    /**\n     * @property {number} isFrontWheel\n     */\n    this.isFrontWheel = options.isFrontWheel;\n\n    /**\n     * @property {number} clippedInvContactDotSuspension\n     */\n    this.clippedInvContactDotSuspension = 1;\n\n    /**\n     * @property {number} suspensionRelativeVelocity\n     */\n    this.suspensionRelativeVelocity = 0;\n\n    /**\n     * @property {number} suspensionForce\n     */\n    this.suspensionForce = 0;\n\n    /**\n     * @property {number} skidInfo\n     */\n    this.skidInfo = 0;\n\n    /**\n     * @property {number} suspensionLength\n     */\n    this.suspensionLength = 0;\n\n    /**\n     * @property {number} sideImpulse\n     */\n    this.sideImpulse = 0;\n\n    /**\n     * @property {number} forwardImpulse\n     */\n    this.forwardImpulse = 0;\n\n    /**\n     * The result from raycasting\n     * @property {RaycastResult} raycastResult\n     */\n    this.raycastResult = new RaycastResult();\n\n    /**\n     * Wheel world transform\n     * @property {Transform} worldTransform\n     */\n    this.worldTransform = new Transform();\n\n    /**\n     * @property {boolean} isInContact\n     */\n    this.isInContact = false;\n}\n\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\nvar chassis_velocity_at_contactPoint = new Vec3();\nWheelInfo.prototype.updateWheel = function(chassis){\n    var raycastResult = this.raycastResult;\n\n    if (this.isInContact){\n        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n        if (project >= -0.1) {\n            this.suspensionRelativeVelocity = 0.0;\n            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n            var inv = -1 / project;\n            this.suspensionRelativeVelocity = projVel * inv;\n            this.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n    }\n};\n\n\n","var Body = require('./Body');\nvar Sphere = require('../shapes/Sphere');\nvar Box = require('../shapes/Box');\nvar Vec3 = require('../math/Vec3');\nvar HingeConstraint = require('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.add(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n\n\n\n","module.exports = Sphere;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this);\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius!==undefined ? Number(radius) : 1.0;\n    this.type = Shape.types.SPHERE;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n\n\n\n","var Shape = require('../shapes/Shape');\nvar Broadphase = require('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n\n\n","module.exports = SPHSystem;\n\nvar Shape = require('../shapes/Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Particle = require('../shapes/Particle');\nvar Body = require('../objects/Body');\nvar Material = require('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n\n\n\n","module.exports = SplitSolver;\n\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Solver = require('./Solver');\nvar Body = require('../objects/Body');\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n * @class SplitSolver\n * @constructor\n * @extends Solver\n * @param {Solver} subsolver\n */\nfunction SplitSolver(subsolver){\n    Solver.call(this);\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n\n    // Create needed nodes, reuse if possible\n    while(this.nodePool.length < 128){\n        this.nodePool.push(this.createNode());\n    }\n}\nSplitSolver.prototype = new Solver();\n\n// Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\nvar SplitSolver_solve_nodePool = []; // All allocated node objects\nvar SplitSolver_solve_eqs = [];   // Temp array\nvar SplitSolver_solve_bds = [];   // Temp array\nvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes){\n    var Nnodes = nodes.length;\n    for(var i=0; i!==Nnodes; i++){\n        var node = nodes[i];\n        if(!node.visited && !(node.body.type & STATIC)){\n            return node;\n        }\n    }\n    return false;\n}\n\nvar queue = [];\nfunction bfs(root,visitFunc,bds,eqs){\n    queue.push(root);\n    root.visited = true;\n    visitFunc(root,bds,eqs);\n    while(queue.length) {\n        var node = queue.pop();\n        // Loop over unvisited child nodes\n        var child;\n        while((child = getUnvisitedNode(node.children))) {\n            child.visited = true;\n            visitFunc(child,bds,eqs);\n            queue.push(child);\n        }\n    }\n}\n\nfunction visitFunc(node,bds,eqs){\n    bds.push(node.body);\n    var Neqs = node.eqs.length;\n    for(var i=0; i!==Neqs; i++){\n        var eq = node.eqs[i];\n        if(eqs.indexOf(eq) === -1){\n            eqs.push(eq);\n        }\n    }\n}\n\nSplitSolver.prototype.createNode = function(){\n    return { body:null, children:[], eqs:[], visited:false };\n};\n\n/**\n * Solve the subsystems\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSplitSolver.prototype.solve = function(dt,world){\n    var nodes=SplitSolver_solve_nodes,\n        nodePool=this.nodePool,\n        bodies=world.bodies,\n        equations=this.equations,\n        Neq=equations.length,\n        Nbodies=bodies.length,\n        subsolver=this.subsolver;\n\n    // Create needed nodes, reuse if possible\n    while(nodePool.length < Nbodies){\n        nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n    }\n\n    // Reset node values\n    for(var i=0; i!==Nbodies; i++){\n        var node = nodes[i];\n        node.body = bodies[i];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n    }\n    for(var k=0; k!==Neq; k++){\n        var eq=equations[k],\n            i=bodies.indexOf(eq.bi),\n            j=bodies.indexOf(eq.bj),\n            ni=nodes[i],\n            nj=nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n    }\n\n    var child, n=0, eqs=SplitSolver_solve_eqs;\n\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n\n    var dummyWorld = SplitSolver_solve_dummyWorld;\n    while((child = getUnvisitedNode(nodes))){\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\n        var Neqs = eqs.length;\n\n        eqs = eqs.sort(sortById);\n\n        for(var i=0; i!==Neqs; i++){\n            subsolver.addEquation(eqs[i]);\n        }\n\n        var iter = subsolver.solve(dt,dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n    }\n\n    return n;\n};\n\nfunction sortById(a, b){\n    return b.id - a.id;\n}\n\n\n","var Vec3 = require('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n\n\n\n","module.exports = Trimesh;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\nvar AABB = require('../collision/AABB');\nvar Octree = require('../utils/Octree');\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     var vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     var indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     var trimeshShape = new Trimesh(vertices, indices);\n */\nfunction Trimesh(vertices, indices) {\n    Shape.call(this);\n    this.type = Shape.types.TRIMESH;\n\n    /**\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = new Float32Array(vertices);\n\n    /**\n     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n     * @property indices\n     * @type {Array}\n     */\n    this.indices = new Int16Array(indices);\n\n    /**\n     * The normals data.\n     * @property normals\n     * @type {Array}\n     */\n    this.normals = new Float32Array(indices.length);\n\n    /**\n     * The local AABB of the mesh.\n     * @property aabb\n     * @type {Array}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * References to vertex pairs, making up all unique edges in the trimesh.\n     * @property {array} edges\n     */\n    this.edges = null;\n\n    /**\n     * Local scaling of the mesh. Use .setScale() to set it.\n     * @property {Vec3} scale\n     */\n    this.scale = new Vec3(1, 1, 1);\n\n    /**\n     * The indexed triangles. Use .updateTree() to update it.\n     * @property {Octree} tree\n     */\n    this.tree = new Octree();\n\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n}\nTrimesh.prototype = new Shape();\nTrimesh.prototype.constructor = Trimesh;\n\nvar computeNormals_n = new Vec3();\n\n/**\n * @method updateTree\n */\nTrimesh.prototype.updateTree = function(){\n    var tree = this.tree;\n\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n\n    // Insert all triangles\n    var triangleAABB = new AABB();\n    var a = new Vec3();\n    var b = new Vec3();\n    var c = new Vec3();\n    var points = [a, b, c];\n    for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n};\n\nvar unscaledAABB = new AABB();\n\n/**\n * Get triangles in a local AABB from the trimesh.\n * @method getTrianglesInAABB\n * @param  {AABB} aabb\n * @param  {array} result An array of integers, referencing the queried triangles.\n */\nTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n    unscaledAABB.copy(aabb);\n\n    // Scale it to local\n    var scale = this.scale;\n    var isx = scale.x;\n    var isy = scale.y;\n    var isz = scale.z;\n    var l = unscaledAABB.lowerBound;\n    var u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n\n    return this.tree.aabbQuery(unscaledAABB, result);\n};\n\n/**\n * @method setScale\n * @param {Vec3} scale\n */\nTrimesh.prototype.setScale = function(scale){\n    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n    var isUniform = scale.x === scale.y === scale.z;\n\n    if(!(wasUniform && isUniform)){\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n};\n\n/**\n * Compute the normals of the faces. Will save in the .normals array.\n * @method updateNormals\n */\nTrimesh.prototype.updateNormals = function(){\n    var n = computeNormals_n;\n\n    // Generate normals\n    var normals = this.normals;\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n\n        this.getVertex(a, va);\n        this.getVertex(b, vb);\n        this.getVertex(c, vc);\n\n        Trimesh.computeNormal(vb, va, vc, n);\n\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n    }\n};\n\n/**\n * Update the .edges property\n * @method updateEdges\n */\nTrimesh.prototype.updateEdges = function(){\n    var edges = {};\n    var add = function(indexA, indexB){\n        var key = a < b ? a + '_' + b : b + '_' + a;\n        edges[key] = true;\n    };\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n        add(a,b);\n        add(b,c);\n        add(c,a);\n    }\n    var keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (var i = 0; i < keys.length; i++) {\n        var indices = keys[i].split('_');\n        this.edges[2 * i] = parseInt(indices[0], 10);\n        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n};\n\n/**\n * Get an edge vertex\n * @method getEdgeVertex\n * @param  {number} edgeIndex\n * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n * @param  {Vec3} vertexStore Where to store the result\n */\nTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n};\n\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\n\n/**\n * Get a vector along an edge.\n * @method getEdgeVector\n * @param  {number} edgeIndex\n * @param  {Vec3} vectorStore\n */\nTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n    var va = getEdgeVector_va;\n    var vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nTrimesh.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\n\n/**\n * Get vertex i.\n * @method getVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getVertex = function(i, out){\n    var scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n};\n\n/**\n * Get raw vertex i\n * @private\n * @method _getUnscaledVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype._getUnscaledVertex = function(i, out){\n    var i3 = i * 3;\n    var vertices = this.vertices;\n    return out.set(\n        vertices[i3],\n        vertices[i3 + 1],\n        vertices[i3 + 2]\n    );\n};\n\n/**\n * Get a vertex from the trimesh,transformed by the given position and quaternion.\n * @method getWorldVertex\n * @param  {number} i\n * @param  {Vec3} pos\n * @param  {Quaternion} quat\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n};\n\n/**\n * Get the three vertices for triangle i.\n * @method getTriangleVertices\n * @param  {number} i\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n    var i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n};\n\n/**\n * Compute the normal of triangle i.\n * @method getNormal\n * @param  {Number} i\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.getNormal = function(i, target){\n    var i3 = i * 3;\n    return target.set(\n        this.normals[i3],\n        this.normals[i3 + 1],\n        this.normals[i3 + 2]\n    );\n};\n\nvar cli_aabb = new AABB();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n    );\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\n\n/**\n * Compute the local AABB for the trimesh\n * @method computeLocalAABB\n * @param  {AABB} aabb\n */\nTrimesh.prototype.computeLocalAABB = function(aabb){\n    var l = aabb.lowerBound,\n        u = aabb.upperBound,\n        n = this.vertices.length,\n        vertices = this.vertices,\n        v = computeLocalAABB_worldVert;\n\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for(var i=0; i !== n; i++){\n        this.getVertex(i, v);\n\n        if(v.x < l.x){\n            l.x = v.x;\n        } else if(v.x > u.x){\n            u.x = v.x;\n        }\n\n        if(v.y < l.y){\n            l.y = v.y;\n        } else if(v.y > u.y){\n            u.y = v.y;\n        }\n\n        if(v.z < l.z){\n            l.z = v.z;\n        } else if(v.z > u.z){\n            u.z = v.z;\n        }\n    }\n};\n\n\n/**\n * Update the .aabb property\n * @method updateAABB\n */\nTrimesh.prototype.updateAABB = function(){\n    this.computeLocalAABB(this.aabb);\n};\n\n/**\n * Will update the .boundingSphereRadius property\n * @method updateBoundingSphereRadius\n */\nTrimesh.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var vertices = this.vertices;\n    var v = new Vec3();\n    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    /*\n    var n = this.vertices.length / 3,\n        verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n\n    var v = tempWorldVertex;\n    for(var i=0; i<n; i++){\n        this.getVertex(i, v);\n        quat.vmult(v, v);\n        pos.vadd(v, v);\n        if (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n    */\n\n    // Faster approximation using local AABB\n    var frame = calculateWorldAABB_frame;\n    var result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n};\n\n/**\n * Get approximate volume\n * @method volume\n * @return {Number}\n */\nTrimesh.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\nTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n    radius = radius || 1;\n    tube = tube || 0.5;\n    radialSegments = radialSegments || 8;\n    tubularSegments = tubularSegments || 6;\n    arc = arc || Math.PI * 2;\n\n    var vertices = [];\n    var indices = [];\n\n    for ( var j = 0; j <= radialSegments; j ++ ) {\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n\n            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n            var z = tube * Math.sin( v );\n\n            vertices.push( x, y, z );\n        }\n    }\n\n    for ( var j = 1; j <= radialSegments; j ++ ) {\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\n            var a = ( tubularSegments + 1 ) * j + i - 1;\n            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( tubularSegments + 1 ) * j + i;\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return new Trimesh(vertices, indices);\n};\n\n\n\n","var AABB = require('../collision/AABB');\nvar Vec3 = require('../math/Vec3');\n\nmodule.exports = Octree;\n\n/**\n * @class OctreeNode\n * @param {object} [options]\n * @param {Octree} [options.root]\n * @param {AABB} [options.aabb]\n */\nfunction OctreeNode(options){\n    options = options || {};\n\n    /**\n     * The root node\n     * @property {OctreeNode} root\n     */\n    this.root = options.root || null;\n\n    /**\n     * Boundary of this node\n     * @property {AABB} aabb\n     */\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\n    /**\n     * Contained data at the current node level.\n     * @property {Array} data\n     */\n    this.data = [];\n\n    /**\n     * Children to this node\n     * @property {Array} children\n     */\n    this.children = [];\n}\n\n/**\n * @class Octree\n * @param {AABB} aabb The total AABB of the tree\n * @param {object} [options]\n * @param {number} [options.maxDepth=8]\n * @extends OctreeNode\n */\nfunction Octree(aabb, options){\n    options = options || {};\n    options.root = null;\n    options.aabb = aabb;\n    OctreeNode.call(this, options);\n\n    /**\n     * Maximum subdivision depth\n     * @property {number} maxDepth\n     */\n    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n}\nOctree.prototype = new OctreeNode();\n\nOctreeNode.prototype.reset = function(aabb, options){\n    this.children.length = this.data.length = 0;\n};\n\n/**\n * Insert data into this node\n * @method insert\n * @param  {AABB} aabb\n * @param  {object} elementData\n * @return {boolean} True if successful, otherwise false\n */\nOctreeNode.prototype.insert = function(aabb, elementData, level){\n    var nodeData = this.data;\n    level = level || 0;\n\n    // Ignore objects that do not belong in this node\n    if (!this.aabb.contains(aabb)){\n        return false; // object cannot be added\n    }\n\n    var children = this.children;\n\n    if(level < (this.maxDepth || this.root.maxDepth)){\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length){\n            this.subdivide();\n            subdivided = true;\n        }\n\n        // add to whichever node will accept it\n        for (var i = 0; i !== 8; i++) {\n            if (children[i].insert(aabb, elementData, level + 1)){\n                return true;\n            }\n        }\n\n        if(subdivided){\n            // No children accepted! Might as well just remove em since they contain none\n            children.length = 0;\n        }\n    }\n\n    // Too deep, or children didnt want it. add it in current node\n    nodeData.push(elementData);\n\n    return true;\n};\n\nvar halfDiagonal = new Vec3();\n\n/**\n * Create 8 equally sized children nodes and put them in the .children array.\n * @method subdivide\n */\nOctreeNode.prototype.subdivide = function() {\n    var aabb = this.aabb;\n    var l = aabb.lowerBound;\n    var u = aabb.upperBound;\n\n    var children = this.children;\n\n    children.push(\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n    );\n\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n\n    var root = this.root || this;\n\n    for (var i = 0; i !== 8; i++) {\n        var child = children[i];\n\n        // Set current node as root\n        child.root = root;\n\n        // Compute bounds\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n\n        lowerBound.vadd(l, lowerBound);\n\n        // Upper bound is always lower bound + halfDiagonal\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n};\n\n/**\n * Get all data, potentially within an AABB\n * @method aabbQuery\n * @param  {AABB} aabb\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\n    var nodeData = this.data;\n\n    // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n    var children = this.children;\n\n\n    // for (var i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)){\n            Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Get all data, potentially intersected by a ray.\n * @method rayQuery\n * @param  {Ray} ray\n * @param  {Transform} treeTransform\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n\n    return result;\n};\n\n/**\n * @method removeEmptyNodes\n */\nOctreeNode.prototype.removeEmptyNodes = function() {\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            if(!node.children[i].data.length){\n                node.children.splice(i, 1);\n            }\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n};\n\n\n\n","/* global performance */\n\nmodule.exports = World;\n\nvar Shape = require('../shapes/Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar GSSolver = require('../solver/GSSolver');\nvar Vec3Pool = require('../utils/Vec3Pool');\nvar ContactEquation = require('../equations/ContactEquation');\nvar FrictionEquation = require('../equations/FrictionEquation');\nvar Narrowphase = require('./Narrowphase');\nvar EventTarget = require('../utils/EventTarget');\nvar ArrayCollisionMatrix = require('../collision/ArrayCollisionMatrix');\nvar Material = require('../material/Material');\nvar ContactMaterial = require('../material/ContactMaterial');\nvar Body = require('../objects/Body');\nvar TupleDictionary = require('../utils/TupleDictionary');\nvar RaycastResult = require('../collision/RaycastResult');\nvar AABB = require('../collision/AABB');\nvar Ray = require('../collision/Ray');\nvar NaiveBroadphase = require('../collision/NaiveBroadphase');\n\n/**\n * The physics world\n * @class World\n * @constructor\n * @extends EventTarget\n */\nfunction World(){\n    EventTarget.apply(this);\n\n    /**\n     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n     * @property {Number} dt\n     */\n    this.dt = -1;\n\n    /**\n     * Makes bodies go to sleep when they've been inactive\n     * @property allowSleep\n     * @type {Boolean}\n     */\n    this.allowSleep = false;\n\n    /**\n     * All the current contacts (instances of ContactEquation) in the world.\n     * @property contacts\n     * @type {Array}\n     */\n    this.contacts = [];\n    this.frictionEquations = [];\n\n    /**\n     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n     * @property quatNormalizeSkip\n     * @type {Number}\n     */\n    this.quatNormalizeSkip = 0;\n\n    /**\n     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n     * @property quatNormalizeFast\n     * @type {Boolean}\n     * @see Quaternion.normalizeFast\n     * @see Quaternion.normalize\n     */\n    this.quatNormalizeFast = false;\n\n    /**\n     * The wall-clock time since simulation start\n     * @property time\n     * @type {Number}\n     */\n    this.time = 0.0;\n\n    /**\n     * Number of timesteps taken since start\n     * @property stepnumber\n     * @type {Number}\n     */\n    this.stepnumber = 0;\n\n    /// Default and last timestep sizes\n    this.default_dt = 1/60;\n\n    this.nextId = 0;\n    /**\n     * @property gravity\n     * @type {Vec3}\n     */\n    this.gravity = new Vec3();\n\n    /**\n     * @property broadphase\n     * @type {Broadphase}\n     */\n    this.broadphase = new NaiveBroadphase();\n\n    /**\n     * @property bodies\n     * @type {Array}\n     */\n    this.bodies = [];\n\n    /**\n     * @property solver\n     * @type {Solver}\n     */\n    this.solver = new GSSolver();\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    /**\n     * @property narrowphase\n     * @type {Narrowphase}\n     */\n    this.narrowphase = new Narrowphase(this);\n\n    /**\n     * @property {ArrayCollisionMatrix} collisionMatrix\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\n    /**\n     * CollisionMatrix from the previous step.\n     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\n    /**\n     * All added materials\n     * @property materials\n     * @type {Array}\n     */\n    this.materials = [];\n\n    /**\n     * @property contactmaterials\n     * @type {Array}\n     */\n    this.contactmaterials = [];\n\n    /**\n     * Used to look up a ContactMaterial given two instances of Material.\n     * @property {TupleDictionary} contactMaterialTable\n     */\n    this.contactMaterialTable = new TupleDictionary();\n\n    this.defaultMaterial = new Material(\"default\");\n\n    /**\n     * This contact material is used if no suitable contactmaterial is found for a contact.\n     * @property defaultContactMaterial\n     * @type {ContactMaterial}\n     */\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\n    /**\n     * @property doProfiling\n     * @type {Boolean}\n     */\n    this.doProfiling = false;\n\n    /**\n     * @property profile\n     * @type {Object}\n     */\n    this.profile = {\n        solve:0,\n        makeContactConstraints:0,\n        broadphase:0,\n        integrate:0,\n        narrowphase:0,\n    };\n\n    /**\n     * @property subsystems\n     * @type {Array}\n     */\n    this.subsystems = [];\n\n    this.addBodyEvent = {\n        type:\"addBody\",\n        body : null,\n    };\n\n    this.removeBodyEvent = {\n        type:\"removeBody\",\n        body : null,\n    };\n}\nWorld.prototype = new EventTarget();\n\n// Temp stuff\nvar tmpAABB1 = new AABB();\nvar tmpArray1 = [];\nvar tmpRay = new Ray();\n\n/**\n * Get the contact material between materials m1 and m2\n * @method getContactMaterial\n * @param {Material} m1\n * @param {Material} m2\n * @return {ContactMaterial} The contact material if it was found.\n */\nWorld.prototype.getContactMaterial = function(m1,m2){\n    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n};\n\n/**\n * Get number of objects in the world.\n * @method numObjects\n * @return {Number}\n * @deprecated\n */\nWorld.prototype.numObjects = function(){\n    return this.bodies.length;\n};\n\n/**\n * Store old collision state info\n * @method collisionMatrixTick\n */\nWorld.prototype.collisionMatrixTick = function(){\n\tvar temp = this.collisionMatrixPrevious;\n\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\tthis.collisionMatrix = temp;\n\tthis.collisionMatrix.reset();\n};\n\n/**\n * Add a rigid body to the simulation.\n * @method add\n * @param {Body} body\n * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n * @todo Adding an array of bodies should be possible. This would save some loops too\n * @deprecated Use .addBody instead\n */\nWorld.prototype.add = World.prototype.addBody = function(body){\n    if(this.bodies.indexOf(body) !== -1){\n        return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if(body instanceof Body){\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n    }\n\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.dispatchEvent(this.addBodyEvent);\n};\n\n/**\n * Add a constraint to the simulation.\n * @method addConstraint\n * @param {Constraint} c\n */\nWorld.prototype.addConstraint = function(c){\n    this.constraints.push(c);\n};\n\n/**\n * Removes a constraint\n * @method removeConstraint\n * @param {Constraint} c\n */\nWorld.prototype.removeConstraint = function(c){\n    var idx = this.constraints.indexOf(c);\n    if(idx!==-1){\n        this.constraints.splice(idx,1);\n    }\n};\n\n/**\n * Raycast test\n * @method rayTest\n * @param {Vec3} from\n * @param {Vec3} to\n * @param {Function|RaycastResult} result\n * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n */\nWorld.prototype.rayTest = function(from, to, result){\n    if(result instanceof RaycastResult){\n        // Do raycastclosest\n        this.raycastClosest(from, to, {\n            skipBackfaces: true\n        }, result);\n    } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n            skipBackfaces: true\n        }, result);\n    }\n};\n\n/**\n * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n * @method raycastAll\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {Function} callback\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAll = function(from, to, options, callback){\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n * @method raycastAny\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAny = function(from, to, options, result){\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and return information of the closest hit.\n * @method raycastClosest\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastClosest = function(from, to, options, result){\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method remove\n * @param {Body} body\n * @deprecated Use .removeBody instead\n */\nWorld.prototype.remove = function(body){\n    body.world = null;\n    var n = this.bodies.length-1,\n        bodies = this.bodies,\n        idx = bodies.indexOf(body);\n    if(idx !== -1){\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\n        // Recompute index\n        for(var i=0; i!==bodies.length; i++){\n            bodies[i].index = i;\n        }\n\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        this.dispatchEvent(this.removeBodyEvent);\n    }\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method removeBody\n * @param {Body} body\n */\nWorld.prototype.removeBody = World.prototype.remove;\n\n/**\n * Adds a material to the World.\n * @method addMaterial\n * @param {Material} m\n * @todo Necessary?\n */\nWorld.prototype.addMaterial = function(m){\n    this.materials.push(m);\n};\n\n/**\n * Adds a contact material to the World\n * @method addContactMaterial\n * @param {ContactMaterial} cmat\n */\nWorld.prototype.addContactMaterial = function(cmat) {\n\n    // Add contact material\n    this.contactmaterials.push(cmat);\n\n    // Add current contact material to the material table\n    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n};\n\n// performance.now()\nif(typeof performance === 'undefined'){\n    performance = {};\n}\nif(!performance.now){\n    var nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = function(){\n        return Date.now() - nowOffset;\n    };\n}\n\nvar step_tmp1 = new Vec3();\n\n/**\n * Step the physics world forward in time.\n *\n * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n *\n * @method step\n * @param {Number} dt                       The fixed time step size to use.\n * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n *\n * @example\n *     // fixed timestepping without interpolation\n *     world.step(1/60);\n *\n * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n */\nWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n    maxSubSteps = maxSubSteps || 10;\n    timeSinceLastCalled = timeSinceLastCalled || 0;\n\n    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\n        this.internalStep(dt);\n\n        // Increment time\n        this.time += dt;\n\n    } else {\n\n        // Compute the number of fixed steps we should have taken since the last step\n        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n        internalSteps = Math.min(internalSteps,maxSubSteps);\n\n        // Do some fixed steps to catch up\n        var t0 = performance.now();\n        for(var i=0; i!==internalSteps; i++){\n            this.internalStep(dt);\n            if(performance.now() - t0 > dt * 1000){\n                // We are slower than real-time. Better bail out.\n                break;\n            }\n        }\n\n        // Increment internal clock\n        this.time += timeSinceLastCalled;\n\n        // Compute \"Left over\" time step\n        var h = this.time % dt;\n        var h_div_dt = h / dt;\n        var interpvelo = step_tmp1;\n        var bodies = this.bodies;\n\n        for(var j=0; j !== bodies.length; j++){\n            var b = bodies[j];\n            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\n                // Interpolate\n                b.position.vsub(b.previousPosition, interpvelo);\n                interpvelo.scale(h_div_dt, interpvelo);\n                b.position.vadd(interpvelo, b.interpolatedPosition);\n\n                // TODO: interpolate quaternion\n                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\n            } else {\n\n                // For static bodies, just copy. Who else will do it?\n                b.interpolatedPosition.copy(b.position);\n                b.interpolatedQuaternion.copy(b.quaternion);\n            }\n        }\n    }\n};\n\n/**\n * Step the simulation\n * @method step\n * @param {Number} dt\n */\nvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n    World_step_preStepEvent = {type:\"preStep\"},\n    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n    World_step_oldContacts = [], // Pools for unused objects\n    World_step_frictionEquationPool = [],\n    World_step_p1 = [], // Reusable arrays for collision pairs\n    World_step_p2 = [],\n    World_step_gvec = new Vec3(), // Temporary vectors and quats\n    World_step_vi = new Vec3(),\n    World_step_vj = new Vec3(),\n    World_step_wi = new Vec3(),\n    World_step_wj = new Vec3(),\n    World_step_t1 = new Vec3(),\n    World_step_t2 = new Vec3(),\n    World_step_rixn = new Vec3(),\n    World_step_rjxn = new Vec3(),\n    World_step_step_q = new Quaternion(),\n    World_step_step_w = new Quaternion(),\n    World_step_step_wq = new Quaternion(),\n    invI_tau_dt = new Vec3();\nWorld.prototype.internalStep = function(dt){\n    this.dt = dt;\n\n    var world = this,\n        that = this,\n        contacts = this.contacts,\n        p1 = World_step_p1,\n        p2 = World_step_p2,\n        N = this.numObjects(),\n        bodies = this.bodies,\n        solver = this.solver,\n        gravity = this.gravity,\n        doProfiling = this.doProfiling,\n        profile = this.profile,\n        DYNAMIC = Body.DYNAMIC,\n        profilingStart,\n        constraints = this.constraints,\n        frictionEquationPool = World_step_frictionEquationPool,\n        gnorm = gravity.norm(),\n        gx = gravity.x,\n        gy = gravity.y,\n        gz = gravity.z,\n        i=0;\n\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add gravity to all objects\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var f = bi.force, m = bi.mass;\n            f.x += m*gx;\n            f.y += m*gy;\n            f.z += m*gz;\n        }\n    }\n\n    // Update subsystems\n    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n        this.subsystems[i].update();\n    }\n\n    // Collision detection\n    if(doProfiling){ profilingStart = performance.now(); }\n    p1.length = 0; // Clean up pair arrays from last step\n    p2.length = 0;\n    this.broadphase.collisionPairs(this,p1,p2);\n    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\n    // Remove constrained pairs with collideConnected == false\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        if(!c.collideConnected){\n            for(var j = p1.length-1; j>=0; j-=1){\n                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n                    p1.splice(j, 1);\n                    p2.splice(j, 1);\n                }\n            }\n        }\n    }\n\n    this.collisionMatrixTick();\n\n    // Generate contacts\n    if(doProfiling){ profilingStart = performance.now(); }\n    var oldcontacts = World_step_oldContacts;\n    var NoldContacts = contacts.length;\n\n    for(i=0; i!==NoldContacts; i++){\n        oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n\n    // Transfer FrictionEquation from current list to the pool for reuse\n    var NoldFrictionEquations = this.frictionEquations.length;\n    for(i=0; i!==NoldFrictionEquations; i++){\n        frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n\n    this.narrowphase.getContacts(\n        p1,\n        p2,\n        this,\n        contacts,\n        oldcontacts, // To be reused\n        this.frictionEquations,\n        frictionEquationPool\n    );\n\n    if(doProfiling){\n        profile.narrowphase = performance.now() - profilingStart;\n    }\n\n    // Loop over all collisions\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add all friction eqs\n    for (var i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n    }\n\n    var ncontacts = contacts.length;\n    for(var k=0; k!==ncontacts; k++){\n\n        // Current contact\n        var c = contacts[k];\n\n        // Get current collision indeces\n        var bi = c.bi,\n            bj = c.bj,\n            si = c.si,\n            sj = c.sj;\n\n        // Get collision properties\n        var cm;\n        if(bi.material && bj.material){\n            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n        } else {\n            cm = this.defaultContactMaterial;\n        }\n\n        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        var mu = cm.friction;\n        // c.restitution = cm.restitution;\n\n        // If friction or restitution were specified in the material, use them\n        if(bi.material && bj.material){\n            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n                mu = bi.material.friction * bj.material.friction;\n            }\n\n            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n                c.restitution = bi.material.restitution * bj.material.restitution;\n            }\n        }\n\n\t\t// c.setSpookParams(\n  //           cm.contactEquationStiffness,\n  //           cm.contactEquationRelaxation,\n  //           dt\n  //       );\n\n\t\tsolver.addEquation(c);\n\n\t\t// // Add friction constraint equation\n\t\t// if(mu > 0){\n\n\t\t// \t// Create 2 tangent equations\n\t\t// \tvar mug = mu * gnorm;\n\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t// \tif(reducedMass > 0){\n\t\t// \t\treducedMass = 1/reducedMass;\n\t\t// \t}\n\t\t// \tvar pool = frictionEquationPool;\n\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tthis.frictionEquations.push(c1, c2);\n\n\t\t// \tc1.bi = c2.bi = bi;\n\t\t// \tc1.bj = c2.bj = bj;\n\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\n\t\t// \t// Copy over the relative vectors\n\t\t// \tc1.ri.copy(c.ri);\n\t\t// \tc1.rj.copy(c.rj);\n\t\t// \tc2.ri.copy(c.ri);\n\t\t// \tc2.rj.copy(c.rj);\n\n\t\t// \t// Construct tangents\n\t\t// \tc.ni.tangents(c1.t, c2.t);\n\n  //           // Set spook params\n  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\n  //           c1.enabled = c2.enabled = c.enabled;\n\n\t\t// \t// Add equations to solver\n\t\t// \tsolver.addEquation(c1);\n\t\t// \tsolver.addEquation(c2);\n\t\t// }\n\n        if( bi.allowSleep &&\n            bi.type === Body.DYNAMIC &&\n            bi.sleepState  === Body.SLEEPING &&\n            bj.sleepState  === Body.AWAKE &&\n            bj.type !== Body.STATIC\n        ){\n            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n            if(speedSquaredB >= speedLimitSquaredB*2){\n                bi._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        if( bj.allowSleep &&\n            bj.type === Body.DYNAMIC &&\n            bj.sleepState  === Body.SLEEPING &&\n            bi.sleepState  === Body.AWAKE &&\n            bi.type !== Body.STATIC\n        ){\n            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n            if(speedSquaredA >= speedLimitSquaredA*2){\n                bj._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        // Now we know that i and j are in contact. Set collision matrix state\n\t\tthis.collisionMatrix.set(bi, bj, true);\n\n        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n            // First contact!\n            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n            World_step_collideEvent.body = bj;\n            World_step_collideEvent.contact = c;\n            bi.dispatchEvent(World_step_collideEvent);\n\n            World_step_collideEvent.body = bi;\n            bj.dispatchEvent(World_step_collideEvent);\n        }\n    }\n    if(doProfiling){\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n    }\n\n    // Wake up bodies\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi._wakeUpAfterNarrowphase){\n            bi.wakeUp();\n            bi._wakeUpAfterNarrowphase = false;\n        }\n    }\n\n    // Add user-added constraints\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        c.update();\n        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n            var eq = c.equations[j];\n            solver.addEquation(eq);\n        }\n    }\n\n    // Solve the constrained system\n    solver.solve(dt,this);\n\n    if(doProfiling){\n        profile.solve = performance.now() - profilingStart;\n    }\n\n    // Remove all contacts from solver\n    solver.removeAllEquations();\n\n    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n    var pow = Math.pow;\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var ld = pow(1.0 - bi.linearDamping,dt);\n            var v = bi.velocity;\n            v.mult(ld,v);\n            var av = bi.angularVelocity;\n            if(av){\n                var ad = pow(1.0 - bi.angularDamping,dt);\n                av.mult(ad,av);\n            }\n        }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent);\n\n    // Invoke pre-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.preStep){\n            bi.preStep.call(bi);\n        }\n    }\n\n    // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n    var q = World_step_step_q;\n    var w = World_step_step_w;\n    var wq = World_step_step_wq;\n    var stepnumber = this.stepnumber;\n    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n    var quatNormalizeFast = this.quatNormalizeFast;\n    var half_dt = dt * 0.5;\n    var PLANE = Shape.types.PLANE,\n        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\n    for(i=0; i!==N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n            var velo = b.velocity,\n                angularVelo = b.angularVelocity,\n                pos = b.position,\n                quat = b.quaternion,\n                invMass = b.invMass,\n                invInertia = b.invInertiaWorld;\n\n            velo.x += force.x * invMass * dt;\n            velo.y += force.y * invMass * dt;\n            velo.z += force.z * invMass * dt;\n\n            if(b.angularVelocity){\n                invInertia.vmult(tau,invI_tau_dt);\n                invI_tau_dt.mult(dt,invI_tau_dt);\n                invI_tau_dt.vadd(angularVelo,angularVelo);\n            }\n\n            // Use new velocity  - leap frog\n            pos.x += velo.x * dt;\n            pos.y += velo.y * dt;\n            pos.z += velo.z * dt;\n\n            if(b.angularVelocity){\n                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n                w.mult(quat,wq);\n                quat.x += half_dt * wq.x;\n                quat.y += half_dt * wq.y;\n                quat.z += half_dt * wq.z;\n                quat.w += half_dt * wq.w;\n                if(quatNormalize){\n                    if(quatNormalizeFast){\n                        quat.normalizeFast();\n                    } else {\n                        quat.normalize();\n                    }\n                }\n            }\n\n            if(b.aabb){\n                b.aabbNeedsUpdate = true;\n            }\n\n            // Update world inertia\n            if(b.updateInertiaWorld){\n                b.updateInertiaWorld();\n            }\n        }\n    }\n    this.clearForces();\n\n    this.broadphase.dirty = true;\n\n    if(doProfiling){\n        profile.integrate = performance.now() - profilingStart;\n    }\n\n    // Update world time\n    this.time += dt;\n    this.stepnumber += 1;\n\n    this.dispatchEvent(World_step_postStepEvent);\n\n    // Invoke post-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        var postStep = bi.postStep;\n        if(postStep){\n            postStep.call(bi);\n        }\n    }\n\n    // Sleeping update\n    if(this.allowSleep){\n        for(i=0; i!==N; i++){\n            bodies[i].sleepTick(this.time);\n        }\n    }\n};\n\n/**\n * Sets all body forces in the world to zero.\n * @method clearForces\n */\nWorld.prototype.clearForces = function(){\n    var bodies = this.bodies;\n    var N = bodies.length;\n    for(var i=0; i !== N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n\n        b.force.set(0,0,0);\n        b.torque.set(0,0,0);\n    }\n};\n\n\n\n","module.exports = TupleDictionary;\n\n/**\n * @class TupleDictionary\n * @constructor\n */\nfunction TupleDictionary() {\n\n    /**\n     * The data storage\n     * @property data\n     * @type {Object}\n     */\n    this.data = { keys:[] };\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nTupleDictionary.prototype.get = function(i, j) {\n    if (i > j) {\n        // swap\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    return this.data[i+'-'+j];\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nTupleDictionary.prototype.set = function(i, j, value) {\n    if (i > j) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    var key = i+'-'+j;\n\n    // Check if key already exists\n    if(!this.get(i,j)){\n        this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n};\n\n/**\n * @method reset\n */\nTupleDictionary.prototype.reset = function() {\n    var data = this.data,\n        keys = data.keys;\n    while(keys.length > 0){\n        var key = keys.pop();\n        delete data[key];\n    }\n};\n\n\n\n","import React from 'react';\r\nimport React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\nimport CANNON from 'cannon/src/Cannon';\r\n\r\nimport MouseInput from '../inputs/MouseInput';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nimport Stats from 'stats.js';\r\n\r\nimport PickableMesh from './mousePick/PickableMesh';\r\n\r\nconst backVector = new THREE.Vector3(0, 0, -1);\r\nconst dragPlane = new THREE.Plane();\r\n\r\nclass PhysicsMousePick extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const N = 100;\r\n\r\n    this._raycaster = new THREE.Raycaster();\r\n\r\n    this.fog = new THREE.Fog(0x001525, 10, 40);\r\n\r\n    const d = 20;\r\n\r\n    this.lightPosition = new THREE.Vector3(d, d, d);\r\n    this.groundQuaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);\r\n    this.cameraPosition = new THREE.Vector3(10, 2, 0);\r\n    this.cameraQuaternion = new THREE.Quaternion()\r\n      .setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);\r\n\r\n    const world = new CANNON.World();\r\n\r\n    const bodies = [];\r\n    const meshRefs = [];\r\n\r\n    let constrainedBody;\r\n    let pivot;\r\n\r\n    const initCannon = () => {\r\n      world.quatNormalizeSkip = 0;\r\n      world.quatNormalizeFast = false;\r\n\r\n      world.gravity.set(0, -10, 0);\r\n      world.broadphase = new CANNON.NaiveBroadphase();\r\n\r\n      const mass = 5;\r\n\r\n      const boxShape = new CANNON.Box(new CANNON.Vec3(0.25, 0.25, 0.25));\r\n\r\n      for (let i = 0; i < N; ++i) {\r\n        const boxBody = new CANNON.Body({\r\n          mass,\r\n        });\r\n\r\n        boxBody.addShape(boxShape);\r\n        boxBody.position.set(-2.5 + Math.random() * 5, 2.5 + Math.random() * 5, -2.5 + Math.random() * 5);\r\n        world.addBody(boxBody);\r\n        bodies.push(boxBody);\r\n\r\n        meshRefs.push((mesh) => {\r\n          if (mesh) {\r\n            mesh.userData._bodyIndex = i;\r\n\r\n            this.meshes.push(mesh);\r\n          }\r\n        });\r\n      }\r\n\r\n      const groundShape = new CANNON.Plane();\r\n      const groundBody = new CANNON.Body({mass: 0});\r\n\r\n      groundBody.addShape(groundShape);\r\n      groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);\r\n\r\n      // WAIT A MINUTE I CAN CREATE A REACT RENDERER FOR CANNON\r\n      // patience is a virtue\r\n      // breathe in breathe out breathe in breathe out\r\n      // let's finish this one first\r\n\r\n      world.addBody(groundBody);\r\n\r\n      const shape = new CANNON.Sphere(0.1);\r\n      const jointBody = new CANNON.Body({mass: 0});\r\n      jointBody.addShape(shape);\r\n      jointBody.collisionFilterGroup = 0;\r\n      jointBody.collisionFilterMask = 0;\r\n\r\n      world.addBody(jointBody);\r\n\r\n      this.jointBody = jointBody;\r\n    };\r\n\r\n    initCannon();\r\n\r\n    const timeStep = 1 / 60;\r\n    const updatePhysics = () => {\r\n      // Step the physics world\r\n      world.step(timeStep);\r\n    };\r\n\r\n    const _getMeshStates = () => {\r\n      return bodies.map(({position, quaternion}, bodyIndex) => {\r\n        return {\r\n          position: new THREE.Vector3().copy(position),\r\n          quaternion: new THREE.Quaternion().copy(quaternion),\r\n          ref: meshRefs[bodyIndex],\r\n        };\r\n      });\r\n    };\r\n\r\n    this._onAnimate = () => {\r\n      updatePhysics();\r\n\r\n      this.setState({\r\n        meshStates: _getMeshStates(),\r\n      });\r\n\r\n      this.stats.update();\r\n    };\r\n\r\n    this._addMouseConstraint = ({x, y, z}, bodyIndex) => {\r\n      // The cannon body constrained by the mouse joint\r\n      constrainedBody = bodies[bodyIndex];\r\n      // Vector to the clicked point, relative to the body\r\n      const v1 = new CANNON.Vec3(x, y, z).vsub(constrainedBody.position);\r\n      // Apply anti-quaternion to vector to transform it into the local body coordinate system\r\n      const antiRot = constrainedBody.quaternion.inverse();\r\n      pivot = antiRot.vmult(v1); // pivot is not in local body coordinates\r\n      // Move the cannon click marker particle to the click position\r\n      this.jointBody.position.set(x, y, z);\r\n      // Create a new constraint\r\n      // The pivot for the jointBody is zero\r\n      this.mouseConstraint = new CANNON.PointToPointConstraint(constrainedBody, pivot, this.jointBody, new CANNON.Vec3(0, 0, 0));\r\n      // Add the t to world\r\n      world.addConstraint(this.mouseConstraint);\r\n\r\n      this.world = world;\r\n    };\r\n\r\n    this.state = {\r\n      clickMarkerVisible: false,\r\n      clickMarkerPosition: new THREE.Vector3(),\r\n\r\n      meshStates: _getMeshStates(),\r\n    };\r\n\r\n    this.meshes = [];\r\n  }\r\n\r\n  _setClickMarker(x, y, z) {\r\n    return {\r\n      clickMarkerPosition: new THREE.Vector3(x, y, z),\r\n      clickMarkerVisible: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      mouseInput,\r\n      container,\r\n      } = this.refs;\r\n\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    container.appendChild(this.stats.domElement);\r\n\r\n    if (!mouseInput.isReady()) {\r\n      const {\r\n        scene,\r\n        camera,\r\n        } = this.refs;\r\n\r\n      mouseInput.ready(scene, container, camera);\r\n      mouseInput.restrictIntersections(this.meshes);\r\n      mouseInput.setActive(false);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(newProps) {\r\n    const {\r\n      mouseInput,\r\n      } = this.refs;\r\n\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    if (width !== newProps.width || height !== newProps.height) {\r\n      mouseInput.containerResized();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.world;\r\n    delete this.stats;\r\n  }\r\n\r\n  _onMeshMouseDown = (bodyIndex, intersection) => {\r\n    const {\r\n      camera,\r\n      } = this.refs;\r\n\r\n    const pos = intersection.point;\r\n\r\n    this.setState({\r\n      // Set marker on contact point\r\n      ...this._setClickMarker(pos.x, pos.y, pos.z),\r\n    });\r\n\r\n    dragPlane.setFromNormalAndCoplanarPoint(backVector.clone().applyQuaternion(camera.quaternion), pos);\r\n\r\n    this._addMouseConstraint(pos, bodyIndex);\r\n\r\n    window.addEventListener('mousemove', this._onMouseMove, false);\r\n    window.addEventListener('mouseup', this._onMouseUp, false);\r\n  };\r\n\r\n  _onMouseUp = () => {\r\n    window.removeEventListener('mousemove', this._onMouseMove, false);\r\n    window.removeEventListener('mouseup', this._onMouseUp, false);\r\n\r\n    this.setState({\r\n      clickMarkerVisible: false,\r\n    });\r\n\r\n    this.world.removeConstraint(this.mouseConstraint);\r\n    this.mouseConstraint = false;\r\n  };\r\n\r\n  _onMouseMove = (event) => {\r\n    const {\r\n      mouseInput,\r\n      } = this.refs;\r\n\r\n    const ray:THREE.Ray = mouseInput.getCameraRay(new THREE.Vector2(event.clientX, event.clientY));\r\n\r\n    const pos = dragPlane.intersectLine(\r\n      new THREE.Line3(ray.origin, ray.origin\r\n        .clone()\r\n        .add(ray.direction\r\n          .clone()\r\n          .multiplyScalar(10000))));\r\n\r\n    if (pos) {\r\n      this.setState({\r\n        ... this._setClickMarker(pos.x, pos.y, pos.z),\r\n      });\r\n\r\n      // Move the joint body to a new position\r\n      this.jointBody.position.set(pos.x, pos.y, pos.z);\r\n      this.mouseConstraint.update();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      clickMarkerVisible,\r\n      clickMarkerPosition,\r\n\r\n      meshStates,\r\n      } = this.state;\r\n\r\n    const d = 20;\r\n\r\n    const cubeMeshes = meshStates.map(({position, quaternion}, i) => {\r\n      return (<PickableMesh\r\n        key={i}\r\n\r\n        position={position}\r\n        quaternion={quaternion}\r\n\r\n        bodyIndex={i}\r\n\r\n        meshes={this.meshes}\r\n\r\n        onMouseDown={this._onMeshMouseDown}\r\n      />);\r\n    });\r\n\r\n    return (<div\r\n      ref=\"container\"\r\n    >\r\n      <React3\r\n        antialias\r\n        mainCamera=\"camera\"\r\n        width={width}\r\n        height={height}\r\n\r\n        onAnimate={this._onAnimate}\r\n\r\n        clearColor={this.fog.color}\r\n\r\n        gammaInput\r\n        gammaOutput\r\n        shadowMapEnabled\r\n      >\r\n        <module\r\n          ref=\"mouseInput\"\r\n          descriptor={MouseInput}\r\n        />\r\n        <resources>\r\n          <boxGeometry\r\n            resourceId=\"cubeGeo\"\r\n\r\n            width={0.5}\r\n            height={0.5}\r\n            depth={0.5}\r\n\r\n            widthSegments={10}\r\n            heightSegments={10}\r\n          />\r\n          <meshPhongMaterial\r\n            resourceId=\"cubeMaterial\"\r\n\r\n            color={0x888888}\r\n          />\r\n        </resources>\r\n        <scene\r\n          ref=\"scene\"\r\n          fog={this.fog}\r\n        >\r\n          <perspectiveCamera\r\n            name=\"camera\"\r\n            fov={30}\r\n            aspect={width / height}\r\n            near={0.5}\r\n            far={10000}\r\n\r\n            position={this.cameraPosition}\r\n            quaternion={this.cameraQuaternion}\r\n\r\n            ref=\"camera\"\r\n          />\r\n          <ambientLight\r\n            color={0x666666}\r\n          />\r\n          <directionalLight\r\n            color={0xffffff}\r\n            intensity={1.75}\r\n\r\n            castShadow\r\n\r\n            shadowMapWidth={1024}\r\n            shadowMapHeight={1024}\r\n\r\n            shadowCameraLeft={-d}\r\n            shadowCameraRight={d}\r\n            shadowCameraTop={d}\r\n            shadowCameraBottom={-d}\r\n\r\n            shadowCameraFar={3 * d}\r\n            shadowCameraNear={d}\r\n            shadowDarkness={0.5}\r\n\r\n            position={this.lightPosition}\r\n          />\r\n          <mesh\r\n            castShadow\r\n            receiveShadow\r\n\r\n            quaternion={this.groundQuaternion}\r\n          >\r\n            <planeBufferGeometry\r\n              width={100}\r\n              height={100}\r\n              widthSegments={1}\r\n              heightSegments={1}\r\n            />\r\n            <meshLambertMaterial\r\n              color={0x777777}\r\n            />\r\n          </mesh>\r\n          {cubeMeshes}\r\n          <mesh // click marker\r\n            visible={clickMarkerVisible}\r\n\r\n            position={clickMarkerPosition}\r\n          >\r\n            <sphereGeometry\r\n              radius={0.2}\r\n              widthSegments={8}\r\n              heightSegments={8}\r\n            />\r\n            <meshLambertMaterial\r\n              color={0x772211}\r\n            />\r\n          </mesh>\r\n        </scene>\r\n\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default PhysicsMousePick;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\n\r\nconst {PropTypes} = React;\r\n\r\nclass PickableMesh extends React.Component {\r\n  static propTypes = {\r\n    position: PropTypes.instanceOf(THREE.Vector3).isRequired,\r\n    quaternion: PropTypes.instanceOf(THREE.Quaternion).isRequired,\r\n    meshes: PropTypes.arrayOf(PropTypes.instanceOf(THREE.Mesh)).isRequired,\r\n    bodyIndex: PropTypes.number.isRequired,\r\n\r\n    onMouseDown: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const {\r\n      mesh,\r\n      } = this.refs;\r\n\r\n    const {\r\n      bodyIndex,\r\n      meshes,\r\n      } = this.props;\r\n\r\n    mesh.userData._bodyIndex = bodyIndex;\r\n\r\n    meshes.push(mesh);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const {\r\n      mesh,\r\n      } = this.refs;\r\n\r\n    const {\r\n      meshes,\r\n      } = this.props;\r\n\r\n    meshes.splice(meshes.indexOf(mesh), 1);\r\n  }\r\n\r\n  _onMouseDown = (event, intersection) => {\r\n    event.preventDefault();\r\n\r\n    this.props.onMouseDown(this.refs.mesh.userData._bodyIndex, intersection);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      quaternion,\r\n      } = this.props;\r\n\r\n    return (<mesh\r\n      position={position}\r\n      quaternion={quaternion}\r\n\r\n      ref=\"mesh\"\r\n\r\n      castShadow\r\n\r\n      onMouseDown={this._onMouseDown}\r\n    >\r\n      <geometryResource\r\n        resourceId=\"cubeGeo\"\r\n      />\r\n      <materialResource\r\n        resourceId=\"cubeMaterial\"\r\n      />\r\n    </mesh>);\r\n  }\r\n}\r\n\r\nexport default PickableMesh;\r\n\n\n\n","import React from 'react';\r\nimport React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\n\r\nimport ExampleBase from '../ExampleBase';\r\n\r\nimport Stats from 'stats.js';\r\n\r\nimport RotatingCube from './RotatingCube';\r\n\r\nclass RotatingCubes extends ExampleBase {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    const N = 200;\r\n\r\n    this.fog = new THREE.Fog(0x001525, 10, 40);\r\n\r\n    const d = 20;\r\n\r\n    this.lightPosition = new THREE.Vector3(d, d, d);\r\n    this.groundQuaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);\r\n    this.cameraPosition = new THREE.Vector3(10, 2, 0);\r\n    this.cameraQuaternion = new THREE.Quaternion()\r\n      .setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);\r\n\r\n    const bodies = [];\r\n    bodies.length = N;\r\n\r\n    this.bodies = bodies;\r\n\r\n    this._createBodies();\r\n\r\n    this.state = {\r\n      numBodies: N,\r\n      meshStates: this._getMeshStates(),\r\n    };\r\n  }\r\n\r\n  _getMeshStates() {\r\n    return this.bodies.map(({position, quaternion}) => {\r\n      return {\r\n        position: new THREE.Vector3().copy(position),\r\n        quaternion: new THREE.Quaternion().copy(quaternion),\r\n      };\r\n    });\r\n  };\r\n\r\n  _onAnimate = () => {\r\n    this._updatePhysics();\r\n\r\n    this._updateGraphics();\r\n\r\n    this.stats.update();\r\n  };\r\n\r\n  _updateGraphics() {\r\n    this.setState({\r\n      meshStates: this._getMeshStates(),\r\n    });\r\n  }\r\n\r\n  _updatePhysics() {\r\n    const time = new Date().getTime();\r\n    const bodies = this.bodies;\r\n\r\n    for (let i = 0; i < bodies.length; ++i) {\r\n      const body = bodies[i];\r\n\r\n      const sinTime = Math.sin(time * body.timeScale);\r\n\r\n      body.quaternion.multiply(body.rotationDeltaPerFrame);\r\n\r\n      const {movementPerFrame} = body;\r\n\r\n      body.position.copy(body.startPosition.clone()\r\n        .add(movementPerFrame.clone()\r\n          .multiplyScalar(sinTime)));\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const {\r\n      container,\r\n      } = this.refs;\r\n\r\n    this.stats = new Stats();\r\n\r\n    this.stats.domElement.style.position = 'absolute';\r\n    this.stats.domElement.style.top = '0px';\r\n\r\n    container.appendChild(this.stats.domElement);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.stats;\r\n  }\r\n\r\n  _createBodies() {\r\n    const {bodies} = this;\r\n    const N = bodies.length;\r\n\r\n    for (let i = 0; i < N; ++i) {\r\n      bodies[i] = this._createBody(i);\r\n    }\r\n  }\r\n\r\n  _createBody() {\r\n    const position = new THREE.Vector3(-2.5 + Math.random() * 5, 0.5 + Math.random() * 5, -2.5 + Math.random() * 5);\r\n\r\n    return {\r\n      position,\r\n      timeScale: Math.random() * 0.005,\r\n      startPosition: position.clone(),\r\n      movementPerFrame: new THREE.Vector3(Math.random(), Math.random(), Math.random()),\r\n      rotationDeltaPerFrame: new THREE.Quaternion()\r\n        .setFromEuler(new THREE.Euler(Math.random() * 0.05, Math.random() * 0.05, Math.random() * 0.05)),\r\n      quaternion: new THREE.Quaternion(),\r\n    };\r\n  }\r\n\r\n  _onBodiesSelectChange = (event) => {\r\n    const numBodies = event.target.value;\r\n\r\n    this.bodies.length = numBodies;\r\n    this._createBodies();\r\n\r\n    this.setState({\r\n      numBodies,\r\n      meshStates: this._getMeshStates(),\r\n    });\r\n\r\n    this._updateGraphics();\r\n  };\r\n\r\n  _getInputBox(title) {\r\n    const {numBodies} = this.state;\r\n\r\n    return (<div style={{\r\n      position: 'absolute',\r\n      top: 0,\r\n      color: 'white',\r\n      width: '100%',\r\n      textAlign: 'center',\r\n      background: 'rgba(1,1,1,0.75)',\r\n    }}>\r\n      <div>{title}</div>\r\n      <label>Bodies: <select\r\n        value={numBodies}\r\n        onChange={this._onBodiesSelectChange}>\r\n        {[10, 50, 100, 200, 300, 500, 1000, 1500, 2000, 2500, 3000].map(val => {\r\n          return <option value={val} key={val}>{val}</option>;\r\n        })}\r\n      </select>\r\n      </label>\r\n    </div>);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      meshStates,\r\n      } = this.state;\r\n\r\n    const d = 20;\r\n\r\n    const cubeMeshes = meshStates.map(({position, quaternion}, i) => {\r\n      return (<RotatingCube\r\n        key={i}\r\n\r\n        position={position}\r\n        quaternion={quaternion}\r\n\r\n        bodyIndex={i}\r\n\r\n        meshes={this.meshes}\r\n      />);\r\n    });\r\n\r\n    return (<div\r\n      ref=\"container\"\r\n    >\r\n      {this._getInputBox('Rotating Cubes - Through React')}\r\n      <React3\r\n        antialias\r\n        mainCamera=\"camera\"\r\n        width={width}\r\n        height={height}\r\n\r\n        onAnimate={this._onAnimate}\r\n\r\n        clearColor={this.fog.color}\r\n\r\n        gammaInput\r\n        gammaOutput\r\n        shadowMapEnabled\r\n      >\r\n        <resources>\r\n          <boxGeometry\r\n            resourceId=\"cubeGeo\"\r\n\r\n            width={0.5}\r\n            height={0.5}\r\n            depth={0.5}\r\n\r\n            widthSegments={10}\r\n            heightSegments={10}\r\n          />\r\n          <meshPhongMaterial\r\n            resourceId=\"cubeMaterial\"\r\n\r\n            color={0x888888}\r\n          />\r\n        </resources>\r\n        <scene\r\n          ref=\"scene\"\r\n          fog={this.fog}\r\n        >\r\n          <perspectiveCamera\r\n            name=\"camera\"\r\n            fov={30}\r\n            aspect={width / height}\r\n            near={0.5}\r\n            far={10000}\r\n\r\n            position={this.cameraPosition}\r\n            quaternion={this.cameraQuaternion}\r\n\r\n            ref=\"camera\"\r\n          />\r\n          <ambientLight\r\n            color={0x666666}\r\n          />\r\n          <directionalLight\r\n            color={0xffffff}\r\n            intensity={1.75}\r\n\r\n            castShadow\r\n\r\n            shadowMapWidth={1024}\r\n            shadowMapHeight={1024}\r\n\r\n            shadowCameraLeft={-d}\r\n            shadowCameraRight={d}\r\n            shadowCameraTop={d}\r\n            shadowCameraBottom={-d}\r\n\r\n            shadowCameraFar={3 * d}\r\n            shadowCameraNear={d}\r\n            shadowDarkness={0.5}\r\n\r\n            position={this.lightPosition}\r\n          />\r\n          <mesh\r\n            castShadow\r\n            receiveShadow\r\n\r\n            quaternion={this.groundQuaternion}\r\n          >\r\n            <planeBufferGeometry\r\n              width={100}\r\n              height={100}\r\n              widthSegments={1}\r\n              heightSegments={1}\r\n            />\r\n            <meshLambertMaterial\r\n              color={0x777777}\r\n            />\r\n          </mesh>\r\n          {cubeMeshes}\r\n        </scene>\r\n\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default RotatingCubes;\r\n\n\n\n","import React from 'react';\r\nimport THREE from 'three';\r\n\r\nconst {PropTypes} = React;\r\n\r\nconst meshScale = new THREE.Vector3(1, 1, 1).multiplyScalar(0.5);\r\n\r\nclass RotatingCube extends React.Component {\r\n  static propTypes = {\r\n    position: PropTypes.instanceOf(THREE.Vector3).isRequired,\r\n    quaternion: PropTypes.instanceOf(THREE.Quaternion).isRequired,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      quaternion,\r\n      } = this.props;\r\n\r\n    return (<mesh\r\n      position={position}\r\n      quaternion={quaternion}\r\n      scale={meshScale}\r\n\r\n      castShadow\r\n    >\r\n      <geometryResource\r\n        resourceId=\"cubeGeo\"\r\n      />\r\n      <materialResource\r\n        resourceId=\"cubeMaterial\"\r\n      />\r\n    </mesh>);\r\n  }\r\n}\r\n\r\nexport default RotatingCube;\r\n\n\n\n","import React from 'react';\r\nimport React3 from 'react-three-renderer';\r\nimport THREE from 'three';\r\n\r\nimport RotatingCube from './RotatingCube';\r\nimport RotatingCubes from './RotatingCubes';\r\n\r\nclass RotatingCubesDirectUpdates extends RotatingCubes {\r\n  _getMeshStates() {\r\n    const {bodies} = this;\r\n\r\n    return bodies.map(({position, quaternion, ref}) => {\r\n      return {\r\n        position: new THREE.Vector3().copy(position),\r\n        quaternion: new THREE.Quaternion().copy(quaternion),\r\n        ref,\r\n      };\r\n    });\r\n  }\r\n\r\n  _bodyRef(index, body) {\r\n    if (body === null) {\r\n      // dismounted\r\n      return;\r\n    }\r\n\r\n    this.bodies[index].body = React3.findTHREEObject(body);\r\n  }\r\n\r\n  _updateGraphics() {\r\n    const {bodies} = this;\r\n\r\n    for (let i = 0; i < bodies.length; ++i) {\r\n      const body = bodies[i];\r\n\r\n      if (body.body) {\r\n        body.body.position.copy(body.position);\r\n        body.body.quaternion.copy(body.quaternion);\r\n      }\r\n    }\r\n  }\r\n\r\n  _createBody(i) {\r\n    return {\r\n      ...super._createBody(),\r\n\r\n      ref: this._bodyRef.bind(this, i),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      width,\r\n      height,\r\n      } = this.props;\r\n\r\n    const {\r\n      meshStates,\r\n      } = this.state;\r\n\r\n    const d = 20;\r\n\r\n    const cubeMeshes = meshStates.map(({position, quaternion, ref}, i) => {\r\n      return (<RotatingCube\r\n        key={i}\r\n\r\n        position={position}\r\n        quaternion={quaternion}\r\n\r\n        ref={ref}\r\n\r\n        meshes={this.meshes}\r\n      />);\r\n    });\r\n\r\n    return (<div\r\n      ref=\"container\"\r\n    >\r\n      {this._getInputBox('Rotating Cubes - Direct Updates')}\r\n      <React3\r\n        antialias\r\n        mainCamera=\"camera\"\r\n        width={width}\r\n        height={height}\r\n\r\n        onAnimate={this._onAnimate}\r\n\r\n        clearColor={this.fog.color}\r\n\r\n        gammaInput\r\n        gammaOutput\r\n        shadowMapEnabled\r\n      >\r\n        <resources>\r\n          <boxGeometry\r\n            resourceId=\"cubeGeo\"\r\n\r\n            width={0.5}\r\n            height={0.5}\r\n            depth={0.5}\r\n\r\n            widthSegments={10}\r\n            heightSegments={10}\r\n          />\r\n          <meshPhongMaterial\r\n            resourceId=\"cubeMaterial\"\r\n\r\n            color={0x888888}\r\n          />\r\n        </resources>\r\n        <scene\r\n          ref=\"scene\"\r\n          fog={this.fog}\r\n        >\r\n          <perspectiveCamera\r\n            name=\"camera\"\r\n            fov={30}\r\n            aspect={width / height}\r\n            near={0.5}\r\n            far={10000}\r\n\r\n            position={this.cameraPosition}\r\n            quaternion={this.cameraQuaternion}\r\n\r\n            ref=\"camera\"\r\n          />\r\n          <ambientLight\r\n            color={0x666666}\r\n          />\r\n          <directionalLight\r\n            color={0xffffff}\r\n            intensity={1.75}\r\n\r\n            castShadow\r\n\r\n            shadowMapWidth={1024}\r\n            shadowMapHeight={1024}\r\n\r\n            shadowCameraLeft={-d}\r\n            shadowCameraRight={d}\r\n            shadowCameraTop={d}\r\n            shadowCameraBottom={-d}\r\n\r\n            shadowCameraFar={3 * d}\r\n            shadowCameraNear={d}\r\n            shadowDarkness={0.5}\r\n\r\n            position={this.lightPosition}\r\n          />\r\n          <mesh\r\n            castShadow\r\n            receiveShadow\r\n\r\n            quaternion={this.groundQuaternion}\r\n          >\r\n            <planeBufferGeometry\r\n              width={100}\r\n              height={100}\r\n              widthSegments={1}\r\n              heightSegments={1}\r\n            />\r\n            <meshLambertMaterial\r\n              color={0x777777}\r\n            />\r\n          </mesh>\r\n          {cubeMeshes}\r\n        </scene>\r\n\r\n      </React3>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default RotatingCubesDirectUpdates;\r\n\n\n\n","module.exports = require('react/lib/ReactDefaultPerf');\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');\nvar ReactMount = require('./ReactMount');\nvar ReactPerf = require('./ReactPerf');\n\nvar performanceNow = require('fbjs/lib/performanceNow');\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  getMeasurementsSummaryMap: function (measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    return summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result.type = item.type;\n      result.args = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0,\n          created: {}\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          var id = args[0];\n          if (typeof id === 'object') {\n            id = ReactMount.getID(args[0]);\n          }\n          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n\n        if (this._currentElement.type === ReactMount.TopLevelWrapper) {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          entry.created[rootNodeID] = true;\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  SET_MARKUP: 'set innerHTML',\n  TEXT_CONTENT: 'set textContent',\n  'setValueForProperty': 'update attribute',\n  'setValueForAttribute': 'update attribute',\n  'deleteValueForProperty': 'remove attribute',\n  'setValueForStyles': 'update styles',\n  'replaceNodeWithMarkup': 'replace',\n  'updateTextContent': 'set textContent'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  measurements.forEach(function (measurement) {\n    Object.keys(measurement.writes).forEach(function (id) {\n      measurement.writes[id].forEach(function (write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    });\n  });\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function (a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    // check if component newly created\n    if (measurement.created[id]) {\n      isDirty = true;\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\n'use strict';\n\nvar performance = require('./performance');\n\nvar performanceNow;\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (performance.now) {\n  performanceNow = function () {\n    return performance.now();\n  };\n} else {\n  performanceNow = function () {\n    return Date.now();\n  };\n}\n\nmodule.exports = performanceNow;\n\n\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performance\n * @typechecks\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance = window.performance || window.msPerformance || window.webkitPerformance;\n}\n\nmodule.exports = performance || {};\n\n\n"],"sourceRoot":""}